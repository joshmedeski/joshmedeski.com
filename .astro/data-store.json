[["Map",1,2,9,10,762,763,797,798,147,821,844,845,19,1091],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.2.5","content-config-digest","df9cfce7a7f2718a","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://joshmedeski.com/\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":true,\"port\":4321,\"streaming\":true},\"redirects\":{},\"prefetch\":true,\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[[null,{}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","posts",["Map",11,12,29,30,44,45,60,61,75,76,91,92,106,107,120,121,135,136,155,156,170,171,183,184,196,197,211,212,225,226,238,239,251,252,266,267,280,281,296,297,311,312,328,329,346,347,361,362,376,377,394,395,407,408,420,421,435,436,448,449,461,462,479,480,497,498,510,511,528,529,546,547,561,562,576,577,591,592,606,607,618,619,633,634,648,649,663,664,678,679,691,692,704,705,719,720,732,733,747,748],"a-pretty-terminal-in-5-minutes",{"id":11,"data":13,"body":23,"filePath":24,"assetImports":25,"digest":27,"deferredRender":28},{"title":14,"description":15,"pubDate":16,"category":17,"duration":20,"heroImage":21,"youtubeUrl":22},"A Pretty Terminal in 5 minutes!","Here's a quick guide on how to take your ugly terminal and make it pretty in just 5 minutes!",["Date","2022-07-05T12:00:00.000Z"],{"id":18,"collection":19},"dotfiles","categories","5:22","__ASTRO_IMAGE_../../assets/posts/a-pretty-terminal-in-5-minutes.jpeg","https://www.youtube.com/embed/Mu4frtvHPOY","Here's a quick guide on how to take your ugly terminal and make it pretty in just 5 minutes!\n\nHere are all the important links:\n\n- [Alacritty](https://alacritty.org)\n- [San Francisco Mono Nerd Font](https://github.com/epk/SF-Mono-Nerd-Font)\n- [Starship prompt](https://starship.rs)\n\n```yaml\nlive_config_reload: true\n\nwindow:\n  opacity: 0.85\n  padding:\n    x: 18\n    y: 16\n  dynamic_padding: false\n  decorations: buttonless\n\nfont:\n  normal:\n    family: \"SFMono Nerd Font\"\n    style: Regular\n  size: 22.0\n  use_thin_strokes: true\n```\n\nhttps://gist.github.com/joshmedeski/d695b0d2ea64ab2c1b79286862070b00","src/data/posts/a-pretty-terminal-in-5-minutes.mdx",[26],"../../assets/posts/a-pretty-terminal-in-5-minutes.jpeg","5bb9d3019b6e0259",true,"abbreviate-everything",{"id":29,"data":31,"body":39,"filePath":40,"assetImports":41,"digest":43,"deferredRender":28},{"title":32,"description":33,"pubDate":34,"category":35,"duration":36,"heroImage":37,"youtubeUrl":38},"Abbreviate Everything: Lessons from a Stenographer","An overview of how to manage macOS windows and desktops at blazing speeds!",["Date","2021-11-15T12:00:00.000Z"],{"id":18,"collection":19},"20:17","__ASTRO_IMAGE_../../assets/posts/abbreviate-everything.jpg","https://www.youtube.com/embed/G0pmpc9JAI4","From Vimconf 2021.\n\nI hope it inspired you to start using text expanders and shorthand to start typing less and getting more done.\n\n**Note:** The promotion in the video has expired, but reach to me on social media if you want to talk about your personal shorthand dictionary!","src/data/posts/abbreviate-everything.mdx",[42],"../../assets/posts/abbreviate-everything.jpg","7cdf4b728fe94a26","abhishek-keshris-dev-workflow",{"id":44,"data":46,"body":55,"filePath":56,"assetImports":57,"digest":59,"deferredRender":28},{"title":47,"description":48,"pubDate":49,"category":50,"duration":52,"heroImage":53,"youtubeUrl":54},"Abhishek Keshri's Dev Workflow","Abhishek shares his Neovim and tmux dev workflow. We discuss our use of various tools and plugins to be productive as developers.",["Date","2023-03-23T18:00:00.000Z"],{"id":51,"collection":19},"conversations","1:02:53","__ASTRO_IMAGE_../../assets/posts/abhishek-keshris-dev-workflow.jpeg","https://www.youtube.com/embed/KhQG3gku618","The conversation is about me and Abhishek's developer environment setup. We discuss our use of various tools and plugins, including Lazygit, fuzzy-finder, and Catppuccin for transparency. We also discuss different key bindings for Git and file management, and our use of abbreviations in our shell environment. We share tips and tricks for optimizing our workflow, and express an interest in trying out each other's favorite tools. The conversation ends with an agreement to keep in touch and share updates on our respective setups.\n\n## Resources\n\n- [Abhishek's YouTube channel](https://www.youtube.com/@2kabhishek)\n- [Abhishek's Dotfiles](https://github.com/2KAbhishek/Dotfiles)\n- [Josh's Dotfiles](https://github.com/joshmedeski/dotfiles)\n- [PDE: A different take on editing code](https://www.youtube.com/watch?v=QMVIJhC9Veg)\n- [t-smart-tmux-session-manager](https://github.com/joshmedeski/t-smart-tmux-session-manager)\n- [octo.nvim plugin](https://github.com/pwntester/octo.nvim)\n- [gh.nvim plugin](https://github.com/ldelossa/gh.nvim)\n- [Abhishek's tmux-tilit](https://github.com/2kabhishek/tmux-tilit/)\n- [telekasten.nvim plugin](https://github.com/renerocksai/telekasten.nvim)\n- [GitHub Copilot](https://github.com/features/copilot)\n- [Abhishek's co-author.nvim plugin](https://github.com/2KAbhishek/co-author.nvim)\n- [lsp_lines.nvim plugin](https://github.com/Maan2003/lsp_lines.nvim)\n- [which-key.nvim plugin](https://github.com/folke/which-key.nvim)\n- [Josh's tmux-fzf-url plugin](https://github.com/joshmedeski/tmux-fzf-url)","src/data/posts/abhishek-keshris-dev-workflow.mdx",[58],"../../assets/posts/abhishek-keshris-dev-workflow.jpeg","07fcc32b2bd6c3d0","blazing-fast-window-management-on-macos",{"id":60,"data":62,"body":70,"filePath":71,"assetImports":72,"digest":74,"deferredRender":28},{"title":63,"description":33,"pubDate":64,"category":65,"duration":66,"heroImage":67,"titleClasses":68,"youtubeUrl":69},"Blazing Fast Window Management on macOS",["Date","2022-05-22T12:00:00.000Z"],{"id":18,"collection":19},"19:06","__ASTRO_IMAGE_../../assets/posts/blazing-fast-window-management-on-macos/blazing-fast-window-management-on-macos.jpeg","max-w-[500px] mx-auto","https://www.youtube.com/embed/fYsCAOfGjxE","An overview of how to manage macOS windows and desktops at blazing speeds!\n\nHere is my yabai configuration (`.yabairc`)\n\n```sh title=\"~/.yabairc\"\n#!/usr/bin/env sh\n\nsudo yabai --load-sa\nyabai -m signal --add event=dock_did_restart action=\"sudo yabai --load-sa\"\n\n# global settings\nyabai -m config mouse_follows_focus          off\nyabai -m config focus_follows_mouse          off\nyabai -m config window_origin_display        default\nyabai -m config window_placement             second_child\nyabai -m config window_topmost               off\nyabai -m config window_shadow                on\nyabai -m config window_opacity               off\nyabai -m config window_opacity_duration      0.0\nyabai -m config active_window_opacity        1.0\nyabai -m config normal_window_opacity        0.90\nyabai -m config window_border                off\nyabai -m config window_border_width          6\nyabai -m config active_window_border_color   0xff775759\nyabai -m config normal_window_border_color   0xff555555\nyabai -m config insert_feedback_color        0xffd75f5f\nyabai -m config split_ratio                  0.50\nyabai -m config auto_balance                 off\nyabai -m config mouse_modifier               fn\nyabai -m config mouse_action1                move\nyabai -m config mouse_action2                resize\nyabai -m config mouse_drop_action            swap\n\n# general space settings\nyabai -m config layout                       bsp\nyabai -m config top_padding                  15\nyabai -m config bottom_padding               15\nyabai -m config left_padding                 15\n# NOTE: for OBS floating head\n# yabai -m config left_padding                 450\nyabai -m config right_padding                15\nyabai -m config window_gap                   15\n\n# apps to not manage (ignore)\nyabai -m rule --add app=\"^System Settings$\" manage=off\nyabai -m rule --add app=\"^Archive Utility$\" manage=off\nyabai -m rule --add app=\"^Wally$\" manage=off\nyabai -m rule --add app=\"^Pika$\" manage=off\nyabai -m rule --add app=\"^balenaEtcher$\" manage=off\nyabai -m rule --add app=\"^Creative Cloud$\" manage=off\nyabai -m rule --add app=\"^Logi Options$\" manage=off\nyabai -m rule --add app=\"^Alfred Preferences$\" manage=off\nyabai -m rule --add app=\"Raycast\" manage=off\nyabai -m rule --add app=\"^Music$\" manage=off\n\necho \"yabai configuration loaded..\"\n```\n\nThis is my skhd configuration (`.skhdrc`)\n\n```sh title=\"~/.skhdrc\"\n# focus window\nalt - h : yabai -m window --focus west\nalt - j : yabai -m window --focus south\nalt - k : yabai -m window --focus north\nalt - l : yabai -m window --focus east\n\n# swap managed window\nshift + alt - h : yabai -m window --swap west\nshift + alt - j : yabai -m window --swap south\nshift + alt - k : yabai -m window --swap north\nshift + alt - l : yabai -m window --swap east\n\n# move managed window\nshift + alt + ctrl - h : yabai -m window --warp west\nshift + alt + ctrl - j : yabai -m window --warp south\nshift + alt + ctrl - k : yabai -m window --warp north\nshift + alt + ctrl - l : yabai -m window --warp east\n\n# rotate tree\nalt - r : yabai -m space --rotate 90\n\n# toggle window fullscreen zoom\nalt - f : yabai -m window --toggle zoom-fullscreen\n\n# alt - s : yabai -m window --toggle\nalt - s : yabai -m window --toggle sticky;\\\n          yabai -m window --toggle topmost;\\\n          yabai -m window --toggle pip\n\n# toggle padding and gap\nalt - g : yabai -m space --toggle padding; yabai -m space --toggle gap\n\n# float / unfloat window and center on screen\nalt - t : yabai -m window --toggle float;\\\n          yabai -m window --grid 4:4:1:1:2:2\n\n# toggle window split type\nalt - e : yabai -m window --toggle split\n\n# balance size of windows\nshift + alt - 0 : yabai -m space --balance\n\n# move window and focus desktop\nshift + alt - 1 : yabai -m window --space 1; yabai -m space --focus 1\nshift + alt - 2 : yabai -m window --space 2; yabai -m space --focus 2\nshift + alt - 3 : yabai -m window --space 3; yabai -m space --focus 3\nshift + alt - 4 : yabai -m window --space 4; yabai -m space --focus 4\nshift + alt - 5 : yabai -m window --space 5; yabai -m space --focus 5\nshift + alt - 6 : yabai -m window --space 6; yabai -m space --focus 6\nshift + alt - 7 : yabai -m window --space 7; yabai -m space --focus 7\nshift + alt - 8 : yabai -m window --space 8; yabai -m space --focus 8\nshift + alt - 9 : yabai -m window --space 9; yabai -m space --focus 9\n\n\n# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)\nshift + alt - n : yabai -m space --create && \\\n                   index=\"$(yabai -m query --spaces --display | jq 'map(select(.\"native-fullscreen\" == 0))[-1].index')\" && \\\n                   yabai -m window --space \"${index}\" && \\\n                   yabai -m space --focus \"${index}\"\n\n# fast focus desktop\nalt - tab : yabai -m space --focus recent\n\n# send window to monitor and follow focus\nshift + alt - n : yabai -m window --display next; yabai -m display --focus next\nshift + alt - p : yabai -m window --display previous; yabai -m display --focus previous\n```\n\n## Resources\n\n- [yabai](https://github.com/koekeishiya/yabai)\n- [skhd](https://github.com/koekeishiya/skhd)\n- [My Dotfiles](https://dotfiles.joshmedeski.com/yabai.html)\n- [SpaceLauncher](https://spacelauncherapp.com)\n\n## Additional Links\n\n- [Homebrew](https://brew.sh)\n- [Work in multiple spaces on Mac](https://support.apple.com/guide/mac-help/work-in-multiple-spaces-mh14112/mac)\n- [macos keyboard shortcuts for tmux](https://youtu.be/BLp61-Lq0kQ)\n- [My moonlander layout](https://configure.zsa.io/moonlander/layouts/3qe37/latest/0)\n\n**Update:** In macOS Ventura, it has been moved to a \"Mission Control\" dropdown in the keyboard shortcut section.\n\n![switch to desktop keyboard shortcut ventura](../../assets/posts/blazing-fast-window-management-on-macos/switch-to-desktop-keyboard-shortcut-ventura.png)","src/data/posts/blazing-fast-window-management-on-macos.mdx",[73],"../../assets/posts/blazing-fast-window-management-on-macos/blazing-fast-window-management-on-macos.jpeg","2b1bbfcaffe2b221","building-mdx-github-embeds-with-astro",{"id":75,"data":77,"body":86,"filePath":87,"assetImports":88,"digest":90,"deferredRender":28},{"title":78,"description":79,"pubDate":80,"category":81,"duration":83,"heroImage":84,"youtubeUrl":85},"Building MDX GitHub Embeds with Astro","Learn how to easily create MDX GitHub embeds using Astro in this step-by-step tutorial.",["Date","2023-08-10T12:00:00.000Z"],{"id":82,"collection":19},"development","01:36:15","__ASTRO_IMAGE_../../assets/posts/building-mdx-github-embeds-with-astro/building-mdx-github-embeds-with-astro-thumbnail.jpeg","https://www.youtube.com/embed/3o0gPmusT0Y?t=1m10s","Learn how to easily create MDX GitHub embeds using Astro in this step-by-step tutorial. Enhance your blog posts with dynamic GitHub content for a seamless and interactive reading experience. Here's how to build an MDX GitHub embed with Astro!\n\nHere's an outline of the steps needed to build an MDX GitHub embed with Astro:\n\n1. Create a `\u003CGhRepo />` Astro component\n2. Use the component in an MDX file\n3. Cache data to sqlite with Prisma and sqlite\n4. Deploy to Netlify\n\n## 1. Create a `\u003CGhRepo />` Astro component\n\nAstro components are a great way to create reusable components and share them across your application. In this case, we'll create a `\u003CGhRepo />` component that uses [Ocotokit](https://github.com/octokit/octokit.js) to pull repo datat from the GitHub API and display it in a card.\n\n```astro title=\"GhRepo.astro\"\n---\nimport { GitHubIcon } from \"./icons/index.astro\";\n\ninterface Props {\n  repo: string;\n}\nconst { repo } = Astro.props;\n\nasync function getRepoData(repo: string) {\n  const octokit = new Octokit({ auth: process.env.GH_TOKEN });\n  const repoSplit = repo.split(\"/\");\n  const { data } = await octokit.rest.repos.get({\n    owner: repoSplit[0],\n    repo: repoSplit[1],\n  });\n  return data;\n}\n\nconst {\n  full_name: fullName,\n  description,\n  stargazers_count: stargazersCount,\n  html_url: url,\n} = await getRepo(repo);\n---\n\n\u003Ca href={url} target=\"_blank\" class=\"not-prose mb-4 block no-underline\">\n  \u003Csection\n    class=\"flex flex-col gap-2 rounded bg-gh-light p-2 sm:flex-row sm:gap-4 sm:p-4\"\n  >\n    \u003CGitHubIcon class=\"w-8 text-gh-dark sm:w-16\" />\n    \u003Cdiv>\n      \u003Cstrong class=\"sm:text-lg\">{fullName}\u003C/strong>\n      \u003Cp class=\"sm:text-md text-sm leading-none text-gh-dark\">{description}\u003C/p>\n      \u003Cdiv class=\"text-gh-dark\">🔭 {stargazersCount.toLocaleString()}\u003C/div>\n    \u003C/div>\n  \u003C/section>\n\u003C/a>\n```\n\nIt will look something like this:\n\n\u003CGhRepo repo=\"octokit/octokit.js\" />\n\nNote, I'm using TailwindCSS, and emoji, and an SVG icon component that I created. You can use whatever you want to style your component.\n\n## 2. Use the component in an MDX file\n\nTo use the `\u003CGhRepo />` component in a MDX file, we will define it as a reusable component in the blog post layout's Astro file.\n\n```astro title=\"PostLayout.astro\"\n---\nimport { getCollection } from \"astro:content\";\nimport type { CollectionEntry } from \"astro:content\";\nimport { components } from \"../../components/MdxComponents\";\nimport GhRepo from \"./GhRepo.astro\";\n\nexport async function getStaticPaths() {\n  const posts = await getCollection(\"posts\");\n  return posts.map((post) => {\n    return {\n      params: { slug: post.slug },\n      props: { post },\n    };\n  });\n}\n\ninterface Props {\n  post: CollectionEntry\u003C\"posts\">;\n}\n\nconst { post } = Astro.props;\nconst { Content } = await post.render();\n---\n\n\u003CContent components={{ GhRepo }} />\n```\n\nThanks to Stefan Imhoff (@kogakure) for the [tip on twitter](https://twitter.com/kogakure/status/1689527906098114560)!\n\nI highly recommend you check out [Astro's content collections guide](https://docs.astro.build/en/guides/content-collections/) to learn more about how to build type-safe markdown content.\n\nNow, you can call the `\u003CGhRepo />` component in your markdown file, making sure to include the repo prop we defined.\n\n```mdx title=\"building-mdx-github-embeds-with-astro.mdx\"\n---\ntitle: Building MDX GitHub Embeds with Astro\n---\n\nIt will look something like this:\n\n\u003CGhRepo repo=\"octokit/octokit.js\" />\n```\n\n## 3. Cache data to sqlite with Prisma and sqlite\n\nNext, we'll want to create a Prisma model and service to cache the data from the GitHub API to sqlite. This will allow us to make fewer API calls and speed up our application.\n\n```prisma title=\"schema.prisma\"\nmodel GhRepo {\n  fullName        String   @unique\n  description     String?\n  stargazersCount Int      @default(0)\n  url             String   @unique\n  updatedAt       DateTime @updatedAt @map(\"updated_at\")\n}\n```\n\nYou can learn more about how to use Prisma with sqlite in [this guide](https://www.prisma.io/docs/concepts/database-connectors/sqlite).\n\nThen, we'll update the `GhRepo` component logic to handle the API calls and caching.\n\n```ts title=\"GhRepo.astro\"\nasync function addRepoToCache(repo: string) {\n  const data = await getRepoData(repo);\n  const dataToSave = {\n    fullName: data.full_name,\n    ...(data.description ? { description: data.description } : {}),\n    stargazersCount: data.stargazers_count,\n    url: data.html_url,\n  };\n  return await prisma.ghRepo.upsert({\n    where: { fullName: data.full_name },\n    update: dataToSave,\n    create: dataToSave,\n  });\n}\n\nasync function getRepo(repo: string) {\n  const cachedRepo = await prisma.ghRepo.findFirst({\n    where: { fullName: repo },\n  });\n\n  if (\n    !cachedRepo ||\n    cachedRepo.updatedAt \u003C\n      new Date(new Date().getTime() - 1000 * 60 * 60 * 24 * 7)\n  ) {\n    return await addRepoToCache(repo);\n  } else {\n    return cachedRepo;\n  }\n}\n\nconst { fullName, description, stargazersCount, url } = await getRepo(repo);\n```\n\nA couple of things to notice here:\n\n1. Using an `upsert` allows us to update the repo if it already exists, or create it if it doesn't.\n2. A simple conditional check allows us to only call the GitHub API if the repo doesn't exist in the database, or if it hasn't been updated in the last week.\n\n## 4. Deploy to Netlify\n\nFinally, we can deploy the application to Netlify. It's important to configure your Netlify configuration to run prisma's migrate command before building the Astro app.\n\n```toml title=\"netlify.toml\"\n\n[build.environment]\n  NPM_FLAGS = \"--version\" # prevent Netlify npm install\n\n[build]\n  command = 'npx pnpm i --store=node_modules/.pnpm-store && prisma migrate dev && npm run build'\n  publish = 'dist'\n```\n\n---\n\nThat's how you can build an MDX GitHub Embed with Astro, Prisma, and sqlite! We created a `\u003CGhRepo />` Astro component and styled it with TailwindCSS, pulled the data from the GitHu API using Octokit, cached it to local sqlite with Prisma, and deployed it to Netlify.\n\nAll the code can be found on the [pull request from the live stream](https://github.com/joshmedeski/joshmedeski.com/pull/19).\n\nThanks for reading! There are more Astro posts on the way, so make sure to subscribe to the newsletter to get notified when they're published.","src/data/posts/building-mdx-github-embeds-with-astro.mdx",[89],"../../assets/posts/building-mdx-github-embeds-with-astro/building-mdx-github-embeds-with-astro-thumbnail.jpeg","cbddc26f27ab6547","ai-in-neovim-neovimconf-2024",{"id":91,"data":93,"body":101,"filePath":102,"assetImports":103,"digest":105,"deferredRender":28},{"title":94,"description":95,"pubDate":96,"category":97,"duration":98,"heroImage":99,"youtubeUrl":100},"AI in Neovim (NeovimConf 2024)","Discover how AI plugins using LLMs are transforming Neovim into a cutting-edge tool for developers",["Date","2024-11-19T00:00:00.000Z"],{"id":18,"collection":19},"17:57","__ASTRO_IMAGE_../../assets/posts/ai-in-neovim-neovimconf-2024.jpeg","https://www.youtube.com/embed/GKQ9rJ12hjc?si=Wn_klpgsSU431AIL","Discover how AI plugins using LLMs are transforming Neovim into a cutting-edge tool for developers. This talk will explore the latest AI-powered plugins and integrations that enhance coding efficiency, streamline workflows, and elevate your development experience. Whether you're a seasoned Neovim user or new to the editor, learn how AI can revolutionize your coding practices and prepare you for the future of software development.\n\n## Completion\n\nCode completion is a feature in which the editor suggests completions for the current word\nor symbol. This can be helpful for writing code faster and with fewer errors. There are many\nplugins available for code completion in Neovim.\n\nMy Choice:\n\n\u003CGhRepo repo=\"github/copilot.vim\" />\n\nAlternatives:\n\n\u003CGhRepo repo=\"zbirenbaum/copilot-cmp\" />\n\u003CGhRepo repo=\"codota/tabnine-nvim\" />\n\u003CGhRepo repo=\"Exafunction/codeium.nvim\" />\n\u003CGhRepo repo=\"milanglacier/minuet-ai.nvim\" />\n\n```lua\nreturn {\n  \"github/copilot.vim\",\n  dependencies = { \"catppuccin/nvim\" },\n  event = \"VimEnter\",\n  init = function()\n    vim.g.copilot_no_tab_map = false\n    vim.g.copilot_workspace_folders = { vim.fn.getcwd() }\n  end,\n  keys = {},\n}\n```\n\n## Chat\n\nAI Chat in the editor is a feature that allows you to chat with an\nAI assistant directly in your editor. This can be helpful for generating\ncode snippets, writing documentation, or even just having a conversation.\n\nMy Choice:\n\n\u003CGhRepo repo=\"CopilotC-Nvim/CopilotChat.nvim\" />\n\nAlternatives:\n\n\u003CGhRepo repo=\"yetone/avante.nvim\" />\n\u003CGhRepo repo=\"jackMort/ChatGPT.nvim\" />\n\n```lua\nreturn {\n  \"CopilotC-Nvim/CopilotChat.nvim\",\n  -- NOTE: configured via LazyVim 💤\n  -- https://www.lazyvim.org/extras/ai/copilot-chat\n}\n```\n\n## Generation\n\nAI code generation is a feature that allows you to generate code snippets using AI models.\nThis can be helpful for\nwriting code faster and with fewer errors.\n\nMy Choice:\n\n\u003CGhRepo repo=\"robitx/gp.nvim\" />\n\nAlternatives:\n\n\u003CGhRepo repo=\"David-Kunz/gen.nvim\" />\n\u003CGhRepo repo=\"gsuuon/model.nvim\" />\n\n````lua\nreturn {\n  \"robitx/gp.nvim\",\n  name = \"gp\",\n  event = \"BufEnter\",\n  config = function()\n    require(\"gp\").setup({\n      openai_api_key = os.getenv(\"OPENAI_API_KEY\"),\n      providers = {\n        anthropic = {\n          endpoint = \"https://api.anthropic.com/v1/messages\",\n          secret = os.getenv(\"ANTHROPIC_API_KEY\"),\n        },\n        copilot = {\n          endpoint = \"https://api.githubcopilot.com/chat/completions\",\n          secret = {\n            \"bash\",\n            \"-c\",\n            \"cat ~/.config/github-copilot/hosts.json | sed -e 's/.*oauth_token...//;s/\\\".*//'\",\n          },\n        },\n        ollama = {\n          endpoint = \"http://localhost:11434/v1/chat/completions\",\n        },\n        openai = {\n          endpoint = \"https://api.openai.com/v1/chat/completions\",\n          secret = vim.fn.getenv(\"OPENAI_API_KEY\"),\n        },\n      },\n      whisper = {\n        -- you can disable whisper completely by whisper = {disable = true}\n        disable = false,\n\n        -- OpenAI audio/transcriptions api endpoint to transcribe audio to text\n        endpoint = \"https://api.openai.com/v1/audio/transcriptions\",\n        -- directory for storing whisper files\n        store_dir = (os.getenv(\"TMPDIR\") or os.getenv(\"TEMP\") or \"/tmp\") .. \"/gp_whisper\",\n        -- multiplier of RMS level dB for threshold used by sox to detect silence vs speech\n        -- decibels are negative, the recording is normalized to -3dB =>\n        -- increase this number to pick up more (weaker) sounds as possible speech\n        -- decrease this number to pick up only louder sounds as possible speech\n        -- you can disable silence trimming by setting this a very high number (like 1000.0)\n        silence = \"1.75\",\n        -- whisper tempo (1.0 is normal speed)\n        tempo = \"1.75\",\n        -- The language of the input audio, in ISO-639-1 format.\n        language = \"en\",\n        -- command to use for recording can be nil (unset) for automatic selection\n        -- string (\"sox\", \"arecord\", \"ffmpeg\") or table with command and arguments:\n        -- sox is the most universal, but can have start/end cropping issues caused by latency\n        -- arecord is linux only, but has no cropping issues and is faster\n        -- ffmpeg in the default configuration is macos only, but can be used on any platform\n        -- (see https://trac.ffmpeg.org/wiki/Capture/Desktop for more info)\n        -- below is the default configuration for all three commands:\n        -- whisper_rec_cmd = {\"sox\", \"-c\", \"1\", \"--buffer\", \"32\", \"-d\", \"rec.wav\", \"trim\", \"0\", \"60:00\"},\n        -- whisper_rec_cmd = {\"arecord\", \"-c\", \"1\", \"-f\", \"S16_LE\", \"-r\", \"48000\", \"-d\", \"3600\", \"rec.wav\"},\n        -- whisper_rec_cmd = {\"ffmpeg\", \"-y\", \"-f\", \"avfoundation\", \"-i\", \":0\", \"-t\", \"3600\", \"rec.wav\"},\n        rec_cmd = nil,\n      },\n      agents = {\n        {\n          name = \"Qwen2.5:32b\",\n          chat = true,\n          command = true,\n          provider = \"ollama\",\n          model = { model = \"qwen2.5:32b\" },\n          system_prompt = \"I am an AI meticulously crafted to provide programming guidance and code assistance. \"\n            .. \"To best serve you as a computer programmer, please provide detailed inquiries and code snippets when necessary, \"\n            .. \"and expect precise, technical responses tailored to your development needs.\\n\",\n        },\n        {\n          name = \"Codellama\",\n          chat = true,\n          command = true,\n          provider = \"ollama\",\n          model = { model = \"codellama\" },\n          system_prompt = \"I am an AI meticulously crafted to provide programming guidance and code assistance. \"\n            .. \"To best serve you as a computer programmer, please provide detailed inquiries and code snippets when necessary, \"\n            .. \"and expect precise, technical responses tailored to your development needs.\\n\",\n        },\n        {\n          name = \"ChatGPT4\",\n          chat = true,\n          command = false,\n          -- string with model name or table with model name and parameters\n          model = { model = \"gpt-4-1106-preview\", temperature = 1.1, top_p = 1 },\n          -- system prompt (use this to specify the persona/role of the AI)\n          system_prompt = \"You are a general AI assistant.\\n\\n\"\n            .. \"The user provided the additional info about how they would like you to respond:\\n\\n\"\n            .. \"- If you're unsure don't guess and say you don't know instead.\\n\"\n            .. \"- Ask question if you need clarification to provide better answer.\\n\"\n            .. \"- Think deeply and carefully from first principles step by step.\\n\"\n            .. \"- Zoom out first to see the big picture and then zoom in to details.\\n\"\n            .. \"- Use Socratic method to improve your thinking and coding skills.\\n\"\n            .. \"- Don't elide any code from your output if the answer requires coding.\\n\"\n            .. \"- Take a deep breath; You've got this!\\n\",\n        },\n        {\n          name = \"CodeGPT4\",\n          chat = false,\n          command = true,\n          -- string with model name or table with model name and parameters\n          model = { model = \"gpt-4-1106-preview\", temperature = 0.8, top_p = 1 },\n          -- system prompt (use this to specify the persona/role of the AI)\n          system_prompt = \"You are an AI working as a code editor.\\n\\n\"\n            .. \"Please AVOID COMMENTARY OUTSIDE OF THE SNIPPET RESPONSE.\\n\"\n            .. \"START AND END YOUR ANSWER WITH:\\n\\n```\",\n        },\n        {\n          name = \"Claude3Haiku\",\n          chat = true,\n          command = true,\n          provider = \"anthropic\",\n          model = { model = \"claude-3-haiku-20240307\" },\n          system_prompt = \"You are a general AI assistant.\\n\\n\"\n            .. \"The user provided the additional info about how they would like you to respond:\\n\\n\"\n            .. \"- If you're unsure don't guess and say you don't know instead.\\n\"\n            .. \"- Ask question if you need clarification to provide better answer.\\n\"\n            .. \"- Think deeply and carefully from first principles step by step.\\n\"\n            .. \"- Zoom out first to see the big picture and then zoom in to details.\\n\"\n            .. \"- Use Socratic method to improve your thinking and coding skills.\\n\"\n            .. \"- Don't elide any code from your output if the answer requires coding.\\n\"\n            .. \"- Take a deep breath; You've got this!\\n\",\n        },\n      },\n      hooks = {\n        -- example of usig enew as a function specifying type for the new buffer\n        CodeReview = function(gp, params)\n          local template = \"I have the following code from {{filename}}:\\n\\n\"\n            .. \"```{{filetype}}\\n{{selection}}\\n```\\n\\n\"\n            .. \"Please analyze for code smells and suggest improvements.\"\n          local agent = gp.get_chat_agent()\n          gp.Prompt(params, gp.Target.enew(\"markdown\"), agent, template)\n        end,\n        -- example of making :%GpChatNew a dedicated command which\n        -- opens new chat with the entire current buffer as a context\n        BufferChatNew = function(gp, _)\n          -- call GpChatNew command in range mode on whole buffer\n          vim.api.nvim_command(\"%\" .. gp.config.cmd_prefix .. \"ChatNew\")\n        end,\n        ReactIconSvg = function(gp, params)\n          local buf = vim.api.nvim_get_current_buf()\n          local lines = vim.api.nvim_buf_get_lines(buf, 0, -1, false)\n          local content = table.concat(lines, \"\\n\")\n          local template = \"The following SVG code needs to be converted into a valid React component:\\n\\n\"\n            .. \"INPUT:\\n\"\n            .. \"```tsx\\n\"\n            .. content\n            .. \"```\\n\\n\"\n            .. \"  - Remove the `width` and `height` props from the `\u003Csvg>` element\\n\"\n            .. \"  - Add `{...props}` to the bottom of the `\u003Csvg>` element\\n\"\n            .. \"  - Replace all `fill` values with `currentColor`\\n\"\n            .. \"  - Replace all props that are dash-separated (ex: `fill-rule`) with camelCase (ex: `fillRule`)\\n\"\n            .. \"  - Don't remove any other props or attributes\\n\"\n            .. \"  - Preserve the indentation rules\\n\"\n            .. \"  - Only include the code snippet, no additional context or explanation is needed.\"\n          local agent = gp.get_command_agent()\n          gp.logger.info(\"Updating React SVG: \" .. agent.name)\n          gp.Prompt(params, gp.Target.rewrite, agent, template, nil)\n        end,\n        UiIconExport = function(gp, params)\n          local template = \"The following React modules need to be refactored and properly exported:\\n\\n\"\n            .. \"```tsx\\n{{selection}}\\n```\\n\\n\"\n            .. \"  - Take the unused import at the bottom of the file and move it up to the other imports in the alphabetical orrder\\n\"\n            .. \"  - Export the unsed import in the `icons` array in alphabetical order\\n\"\n            .. \"  - Export the unsed import in the `export {` object in alphabetical order\\n\"\n            .. \"  - Only include the code snippet, no additional context or explanation is needed.\"\n          local agent = gp.get_command_agent()\n          gp.logger.info(\"Updating React SVG: \" .. agent.name)\n          gp.Prompt(params, gp.Target.rewrite, agent, template, nil)\n        end,\n      },\n    })\n  end,\n\n  keys = function()\n    require(\"which-key\").add({\n      -- VISUAL mode mappings\n      -- s, x, v modes are handled the same way by which_key\n      {\n        mode = { \"v\" },\n        nowait = true,\n        remap = false,\n        { \"\u003CC-g>\u003CC-t>\", \":\u003CC-u>'\u003C,'>GpChatNew tabnew\u003Ccr>\", desc = \"ChatNew tabnew\", icon = \"󰗋\" },\n        { \"\u003CC-g>\u003CC-v>\", \":\u003CC-u>'\u003C,'>GpChatNew vsplit\u003Ccr>\", desc = \"ChatNew vsplit\", icon = \"󰗋\" },\n        { \"\u003CC-g>\u003CC-x>\", \":\u003CC-u>'\u003C,'>GpChatNew split\u003Ccr>\", desc = \"ChatNew split\", icon = \"󰗋\" },\n        { \"\u003CC-g>a\", \":\u003CC-u>'\u003C,'>GpAppend\u003Ccr>\", desc = \"Visual Append (after)\", icon = \"󰗋\" },\n        { \"\u003CC-g>b\", \":\u003CC-u>'\u003C,'>GpPrepend\u003Ccr>\", desc = \"Visual Prepend (before)\", icon = \"󰗋\" },\n        { \"\u003CC-g>c\", \":\u003CC-u>'\u003C,'>GpChatNew\u003Ccr>\", desc = \"Visual Chat New\", icon = \"󰗋\" },\n        { \"\u003CC-g>g\", group = \"generate into new ..\", icon = \"󰗋\" },\n        { \"\u003CC-g>ge\", \":\u003CC-u>'\u003C,'>GpEnew\u003Ccr>\", desc = \"Visual GpEnew\", icon = \"󰗋\" },\n        { \"\u003CC-g>gn\", \":\u003CC-u>'\u003C,'>GpNew\u003Ccr>\", desc = \"Visual GpNew\", icon = \"󰗋\" },\n        { \"\u003CC-g>gp\", \":\u003CC-u>'\u003C,'>GpPopup\u003Ccr>\", desc = \"Visual Popup\", icon = \"󰗋\" },\n        { \"\u003CC-g>gt\", \":\u003CC-u>'\u003C,'>GpTabnew\u003Ccr>\", desc = \"Visual GpTabnew\", icon = \"󰗋\" },\n        { \"\u003CC-g>gv\", \":\u003CC-u>'\u003C,'>GpVnew\u003Ccr>\", desc = \"Visual GpVnew\", icon = \"󰗋\" },\n        { \"\u003CC-g>i\", \":\u003CC-u>'\u003C,'>GpImplement\u003Ccr>\", desc = \"Implement selection\", icon = \"󰗋\" },\n        { \"\u003CC-g>n\", \"\u003Ccmd>GpNextAgent\u003Ccr>\", desc = \"Next Agent\", icon = \"󰗋\" },\n        { \"\u003CC-g>p\", \":\u003CC-u>'\u003C,'>GpChatPaste\u003Ccr>\", desc = \"Visual Chat Paste\", icon = \"󰗋\" },\n        { \"\u003CC-g>r\", \":\u003CC-u>'\u003C,'>GpRewrite\u003Ccr>\", desc = \"Visual Rewrite\", icon = \"󰗋\" },\n        { \"\u003CC-g>s\", \"\u003Ccmd>GpStop\u003Ccr>\", desc = \"GpStop\", icon = \"󰗋\" },\n        { \"\u003CC-g>t\", \":\u003CC-u>'\u003C,'>GpChatToggle\u003Ccr>\", desc = \"Visual Toggle Chat\", icon = \"󰗋\" },\n        { \"\u003CC-g>w\", group = \"Whisper\", icon = \"󰗋\" },\n        { \"\u003CC-g>wa\", \":\u003CC-u>'\u003C,'>GpWhisperAppend\u003Ccr>\", desc = \"Whisper Append\", icon = \"󰗋\" },\n        { \"\u003CC-g>wb\", \":\u003CC-u>'\u003C,'>GpWhisperPrepend\u003Ccr>\", desc = \"Whisper Prepend\", icon = \"󰗋\" },\n        { \"\u003CC-g>we\", \":\u003CC-u>'\u003C,'>GpWhisperEnew\u003Ccr>\", desc = \"Whisper Enew\", icon = \"󰗋\" },\n        { \"\u003CC-g>wn\", \":\u003CC-u>'\u003C,'>GpWhisperNew\u003Ccr>\", desc = \"Whisper New\", icon = \"󰗋\" },\n        { \"\u003CC-g>wp\", \":\u003CC-u>'\u003C,'>GpWhisperPopup\u003Ccr>\", desc = \"Whisper Popup\", icon = \"󰗋\" },\n        { \"\u003CC-g>wr\", \":\u003CC-u>'\u003C,'>GpWhisperRewrite\u003Ccr>\", desc = \"Whisper Rewrite\", icon = \"󰗋\" },\n        { \"\u003CC-g>wt\", \":\u003CC-u>'\u003C,'>GpWhisperTabnew\u003Ccr>\", desc = \"Whisper Tabnew\", icon = \"󰗋\" },\n        { \"\u003CC-g>wv\", \":\u003CC-u>'\u003C,'>GpWhisperVnew\u003Ccr>\", desc = \"Whisper Vnew\", icon = \"󰗋\" },\n        { \"\u003CC-g>ww\", \":\u003CC-u>'\u003C,'>GpWhisper\u003Ccr>\", desc = \"Whisper\", icon = \"󰗋\" },\n        { \"\u003CC-g>x\", \":\u003CC-u>'\u003C,'>GpContext\u003Ccr>\", desc = \"Visual GpContext\", icon = \"󰗋\" },\n      },\n\n      -- NORMAL mode mappings\n      {\n        mode = { \"n\" },\n        nowait = true,\n        remap = false,\n        { \"\u003CC-g>\u003CC-t>\", \"\u003Ccmd>GpChatNew tabnew\u003Ccr>\", desc = \"New Chat tabnew\" },\n        { \"\u003CC-g>\u003CC-v>\", \"\u003Ccmd>GpChatNew vsplit\u003Ccr>\", desc = \"New Chat vsplit\" },\n        { \"\u003CC-g>\u003CC-x>\", \"\u003Ccmd>GpChatNew split\u003Ccr>\", desc = \"New Chat split\" },\n        { \"\u003CC-g>a\", \"\u003Ccmd>GpAppend\u003Ccr>\", desc = \"Append (after)\" },\n        { \"\u003CC-g>b\", \"\u003Ccmd>GpPrepend\u003Ccr>\", desc = \"Prepend (before)\" },\n        { \"\u003CC-g>c\", \"\u003Ccmd>GpChatNew\u003Ccr>\", desc = \"New Chat\" },\n        { \"\u003CC-g>f\", \"\u003Ccmd>GpChatFinder\u003Ccr>\", desc = \"Chat Finder\" },\n        { \"\u003CC-g>g\", group = \"generate into new ..\" },\n        { \"\u003CC-g>ge\", \"\u003Ccmd>GpEnew\u003Ccr>\", desc = \"GpEnew\" },\n        { \"\u003CC-g>gn\", \"\u003Ccmd>GpNew\u003Ccr>\", desc = \"GpNew\" },\n        { \"\u003CC-g>gp\", \"\u003Ccmd>GpPopup\u003Ccr>\", desc = \"Popup\" },\n        { \"\u003CC-g>gt\", \"\u003Ccmd>GpTabnew\u003Ccr>\", desc = \"GpTabnew\" },\n        { \"\u003CC-g>gv\", \"\u003Ccmd>GpVnew\u003Ccr>\", desc = \"GpVnew\" },\n        { \"\u003CC-g>n\", \"\u003Ccmd>GpNextAgent\u003Ccr>\", desc = \"Next Agent\" },\n        { \"\u003CC-g>r\", \"\u003Ccmd>GpRewrite\u003Ccr>\", desc = \"Inline Rewrite\" },\n        { \"\u003CC-g>s\", \"\u003Ccmd>GpStop\u003Ccr>\", desc = \"GpStop\" },\n        { \"\u003CC-g>t\", \"\u003Ccmd>GpChatToggle\u003Ccr>\", desc = \"Toggle Chat\" },\n        { \"\u003CC-g>w\", group = \"Whisper\", icon = \"󰗋\" },\n        { \"\u003CC-g>wa\", \"\u003Ccmd>GpWhisperAppend\u003Ccr>\", desc = \"[W]hisper [A]ppend\" },\n        { \"\u003CC-g>wb\", \"\u003Ccmd>GpWhisperPrepend\u003Ccr>\", desc = \"[W]hisper [P]repend\" },\n        { \"\u003CC-g>we\", \"\u003Ccmd>GpWhisperEnew\u003Ccr>\", desc = \"[W]hisper Enew\" },\n        { \"\u003CC-g>wn\", \"\u003Ccmd>GpWhisperNew\u003Ccr>\", desc = \"[W]hisper New\" },\n        { \"\u003CC-g>wp\", \"\u003Ccmd>GpWhisperPopup\u003Ccr>\", desc = \"[W]hisper Popup\" },\n        { \"\u003CC-g>wr\", \"\u003Ccmd>GpWhisperRewrite\u003Ccr>\", desc = \"[W]hisper Inline Rewrite\" },\n        { \"\u003CC-g>wt\", \"\u003Ccmd>GpWhisperTabnew\u003Ccr>\", desc = \"[W]hisper Tabnew\" },\n        { \"\u003CC-g>wv\", \"\u003Ccmd>GpWhisperVnew\u003Ccr>\", desc = \"[W]hisper Vnew\" },\n        { \"\u003CC-g>ww\", \"\u003Ccmd>GpWhisper\u003Ccr>\", desc = \"[W]hisper\" },\n        { \"\u003CC-g>x\", \"\u003Ccmd>GpContext\u003Ccr>\", desc = \"Toggle GpContext\" },\n      },\n\n      -- INSERT mode mappings\n      {\n        mode = { \"i\" },\n        nowait = true,\n        remap = false,\n        { \"\u003CC-g>\u003CC-t>\", \"\u003Ccmd>GpChatNew tabnew\u003Ccr>\", desc = \"New Chat tabnew\" },\n        { \"\u003CC-g>\u003CC-v>\", \"\u003Ccmd>GpChatNew vsplit\u003Ccr>\", desc = \"New Chat vsplit\" },\n        { \"\u003CC-g>\u003CC-x>\", \"\u003Ccmd>GpChatNew split\u003Ccr>\", desc = \"New Chat split\" },\n        { \"\u003CC-g>a\", \"\u003Ccmd>GpAppend\u003Ccr>\", desc = \"Append (after)\" },\n        { \"\u003CC-g>b\", \"\u003Ccmd>GpPrepend\u003Ccr>\", desc = \"Prepend (before)\" },\n        { \"\u003CC-g>c\", \"\u003Ccmd>GpChatNew\u003Ccr>\", desc = \"New Chat\" },\n        { \"\u003CC-g>f\", \"\u003Ccmd>GpChatFinder\u003Ccr>\", desc = \"Chat Finder\" },\n        { \"\u003CC-g>g\", group = \"generate into new ..\" },\n        { \"\u003CC-g>ge\", \"\u003Ccmd>GpEnew\u003Ccr>\", desc = \"GpEnew\" },\n        { \"\u003CC-g>gn\", \"\u003Ccmd>GpNew\u003Ccr>\", desc = \"GpNew\" },\n        { \"\u003CC-g>gp\", \"\u003Ccmd>GpPopup\u003Ccr>\", desc = \"Popup\" },\n        { \"\u003CC-g>gt\", \"\u003Ccmd>GpTabnew\u003Ccr>\", desc = \"GpTabnew\" },\n        { \"\u003CC-g>gv\", \"\u003Ccmd>GpVnew\u003Ccr>\", desc = \"GpVnew\" },\n        { \"\u003CC-g>n\", \"\u003Ccmd>GpNextAgent\u003Ccr>\", desc = \"Next Agent\" },\n        { \"\u003CC-g>r\", \"\u003Ccmd>GpRewrite\u003Ccr>\", desc = \"Inline Rewrite\" },\n        { \"\u003CC-g>s\", \"\u003Ccmd>GpStop\u003Ccr>\", desc = \"GpStop\" },\n        { \"\u003CC-g>t\", \"\u003Ccmd>GpChatToggle\u003Ccr>\", desc = \"Toggle Chat\" },\n        { \"\u003CC-g>w\", group = \"Whisper\" },\n        { \"\u003CC-g>wa\", \"\u003Ccmd>GpWhisperAppend\u003Ccr>\", desc = \"Whisper Append (after)\" },\n        { \"\u003CC-g>wb\", \"\u003Ccmd>GpWhisperPrepend\u003Ccr>\", desc = \"Whisper Prepend (before)\" },\n        { \"\u003CC-g>we\", \"\u003Ccmd>GpWhisperEnew\u003Ccr>\", desc = \"Whisper Enew\" },\n        { \"\u003CC-g>wn\", \"\u003Ccmd>GpWhisperNew\u003Ccr>\", desc = \"Whisper New\" },\n        { \"\u003CC-g>wp\", \"\u003Ccmd>GpWhisperPopup\u003Ccr>\", desc = \"Whisper Popup\" },\n        { \"\u003CC-g>wr\", \"\u003Ccmd>GpWhisperRewrite\u003Ccr>\", desc = \"Whisper Inline Rewrite\" },\n        { \"\u003CC-g>wt\", \"\u003Ccmd>GpWhisperTabnew\u003Ccr>\", desc = \"Whisper Tabnew\" },\n        { \"\u003CC-g>wv\", \"\u003Ccmd>GpWhisperVnew\u003Ccr>\", desc = \"Whisper Vnew\" },\n        { \"\u003CC-g>ww\", \"\u003Ccmd>GpWhisper\u003Ccr>\", desc = \"Whisper\" },\n        { \"\u003CC-g>x\", \"\u003Ccmd>GpContext\u003Ccr>\", desc = \"Toggle GpContext\" },\n      },\n    })\n  end,\n}\n````\n\n## Conclusion\n\nI hope you enjoyed this talk and learned something new about AI in Neovim. If you have any questions or comments, feel free to reach out to me on social media.","src/data/posts/ai-in-neovim-neovimconf-2024.mdx",[104],"../../assets/posts/ai-in-neovim-neovimconf-2024.jpeg","83f924a89a87d5e8","bullet-journal-didnt-work",{"id":106,"data":108,"body":115,"filePath":116,"assetImports":117,"digest":119,"deferredRender":28},{"title":109,"description":110,"pubDate":111,"category":112,"heroImage":114},"Bullet Journal Didn't Work for Me","The Bullet Journal is an analog productivity system used for capturing everything during your day (todos, appointments, notes).",["Date","2014-06-16T15:24:00.169Z"],{"id":113,"collection":19},"productivity","__ASTRO_IMAGE_../../assets/posts/bullet-journal-didnt-work/bullet-journal-didnt-work-thumb.jpeg","The Bullet Journal is an \u003Ca href=\"http://bulletjournal.com\" target=\"_blank\" rel=\"noopener\">analog productivity system\u003C/a> used for capturing everything during your day (todos, appointments, notes). Everything is written down in one chronological list. Each month you clean up your list and sort through whatever todos haven't been check off yet. The creator, Ryder Carroll, described it as...\n\n> ...an analog system for the digital age that will help you organize the present, record the past, and plan for the future.\n\nUsing this system for a couple weeks, I quickly learned the Bullet Journal is not for me. Here are a few reasons why.\n\n## Legibility\n\nMy handwriting isn't terrible, but it's also not great so having to figure out what I wrote tends to slow down my productive momentum. You could argue my handwriting would improve if I practiced using the Bullet Journal, but I'd rather separate handwriting skills from my productivity system, that's just me.\n\n## GTD\n\nThe #1 reason why the Bullet Journal didn't work for me is because I'm a avid Getting Things Done (GTD) user. In GTD, you collect any/every thought, idea, project, and reference material into an inbox. You then process the inbox and sort each item according to it's purpose and refining everything in the weekly review. With the Bullet Journal, everything goes into a single journal with no opportunity to sort the items. I found it really hard to differentiate next actions, appointments, projects, someday/maybes, waiting for items, etc...\n\nAn argument could be made against the GTD system, because people like the Bullet Journal's simplicity. I totally understand that, but I've been living by the GTD system for years, which makes transitioning to the Bullet Journal practices extremely difficult and not worth my time.\n\n## Search\n\nThe awesome thing about the productivity apps I currently use (Todoist, Trello, Evernote, Dropbox) is the power of search. I can quickly and easily write notes, add tags, attach images, and with Evernote I can scan in my handwritten notes and everything is searchable.\n\nWith the Bullet Journal, you create a table of contents and label every page for \"easy\" access. It felt like I was in middle school again trying to review for a test by constantly referencing the table of content and skimming the journal to find what I wanted.\n\nAgain, some people love analog systems and the ability to flip through pages and see their life in action. Before my Bullet Journal experiment, I created a Done Journal, writing down the day's accomplishments and meaningful events. It was fun being able to flip though pages and remember the past, but I stopped the done journal after a couple months because it sucked up time and energy I thought could be better spent on my digital journal. The Bullet Journal is a similar situation because it sucks up a lot of time and energy but I don't feel it is the best use of my time and energy.\n\n## Speed\n\nI can type 100 word per minute. So you can imagine that physically writing on paper can slows me down. Bullet Journal users claim that having to write things down intentionally slows them down so they have time to evaluate if the task is worth their efforts. For me, GTD has taught me how to properly write a good todo item. It doesn't matter if I write it down on paper or type it into a todo app.\n\n## Revisions\n\n50% of my thoughts that get collected don't go in my todo app, and even the remaining 50% of tasks get revised for more clarity. It would take me forever to write a task 2-3 times on a piece of paper which usually happens digitally.\n\nIt's possible I'm not great at writing todos, and the Bullet Journal could help me improve, but I don't think that's the case. It's not a matter of being good or bad at assembling todo items, it's about revising todos as clarity and purpose for a project evolves.  The GTD practice of daily and weekly evaluation helps me stay on top of my todos with a far greater degree of productivity than the Bullet Journal did.\n\n---\n\nWell that's my thoughts on why the Bullet Journal didn't work for me. I'm a strong GTD user and really like the workflow David Allen created, which I have not found to be benefitted by Bullet Journal practices.\n\nI find the power of search with digital solutions extremely helpful, I prefer typing to hand writing, I want to bring revisions to my todos more frequently and I want to be able to easily read, and understand my tasks at a glance. All of these things are unfortunately not compatible with the Bullet Journal.\n\nHave you tried the Bullet Journal? Did/does it work for you? Let me know in the comments!","src/data/posts/bullet-journal-didnt-work.mdx",[118],"../../assets/posts/bullet-journal-didnt-work/bullet-journal-didnt-work-thumb.jpeg","0428fc4c30d44ce6","carlos-beckers-dev-workflow",{"id":120,"data":122,"body":130,"filePath":131,"assetImports":132,"digest":134,"deferredRender":28},{"title":123,"description":124,"pubDate":125,"category":126,"duration":127,"heroImage":128,"youtubeUrl":129},"Carlos Beckers's Dev Workflow","In this interview I talk with Carlos, creator of Go Releaser, about his workflow",["Date","2024-08-24T10:00:00.000Z"],{"id":51,"collection":19},"37:33","__ASTRO_IMAGE_../../assets/posts/carlos-beckers-dev-workflow.jpeg","https://www.youtube.com/embed/_QTejJ4O-n4","In this interview I talk with Carlos, creator of Go Releaser, about his developer workflow including tmux, neovim, nix, and more on macOS.\n\n- Uses (hardware and software): [carlosbecker.com/uses](https://carlosbecker.com/uses/)\n- Creator of Go Releaser: [goreleaser.com](https://goreleaser.com/)\n- Works for Charm: [charm.sh](https://charm.sh/)\n- [Moonlander keyboard config](https://configure.zsa.io/moonlander/layouts/KZdRz/latest/0)","src/data/posts/carlos-beckers-dev-workflow.mdx",[133],"../../assets/posts/carlos-beckers-dev-workflow.jpeg","8cf712bf5ba5b9c2","create-a-neovim-ide-with-lazyvim",{"id":135,"data":137,"body":149,"filePath":150,"assetImports":151,"digest":154,"deferredRender":28},{"title":138,"description":139,"pubDate":140,"category":141,"heroImage":142,"thumbnail":143,"guide":144},"Create a Neovim IDE with LazyVim","LazyVim allows you to quickly setup an IDE for Neovim.",["Date","2023-06-26T12:00:00.000Z"],{"id":18,"collection":19},"__ASTRO_IMAGE_../../assets/posts/create-a-neovim-ide-with-lazyvim.jpeg","__ASTRO_IMAGE_../../assets/posts/create-a-neovim-ide-with-lazyvim-thumb.jpeg",{"ref":145,"position":148},{"id":146,"collection":147},"dev-workflow-intro","guides",6,"[LazyVim](https://www.lazyvim.org/) is a Neovim setup powered by [💤 lazy.nvim]() to make it easy to customize and extend your config. It turns Neovim into a IDE with very little effort and offers a simple and flexible structure to modify and extend it to your liking.\n\n## Install\n\nFirst, you need to install neovim.\n\n```sh\nbrew install neovim\n```\n\nI recommend going to the [LazyVim installation page](https://www.lazyvim.org/installation) to get the complete and up-to-date instructions, but here's a quick overview of how to set it up. You have to clone the starter repo, remove the `.git` folder, then run neovim with the `nvim` command.\n\n```sh\ngit clone https://github.com/LazyVim/starter ~/.config/nvim # clone\nrm -rf ~/.config/nvim/.git # remove .git folder\nnvim # start neovim\n```\n\nLazyVim will automatically begin to install all it's plugins and boot up.\n\n## Configure\n\nLazyVim is configured with the following structure.\n\n- `~/.config/nvim/lua/config/lazy.lua` is the entry file to setup LazyVim and default options.\n- `~/.config/nvim/lua/config/*` holds other files that help setup basic configurations for Neovim.\n- `~/.config/nvim/lua/plugins/*` holds files that can automatically be read by LazyVim to manage plugins.\n\n### Catppuccin Theme\n\nThe default theme that ships with LazyVim doesn't work well with Alacritty's semi-transparent styling that we [set up previously](/posts/setting-up-alacritty-for-a-fast-minimal-terminal-emulator). I recommend the popular scheme [catppuccin](https://github.com/catppuccin/nvim) which offers great transparency support. You'll also learn some basics for overwriting the LazyVim configuration and adding new plugins.\n\nFirst, you have to install the catppuccin plugin by adding the following content to a new `catppuccin.lua` file in the `plugins` folder.\n\n```lua title=\"~/.config/nvim/lua/plugins/catppuchin.lua\"\nreturn {\n  \"catppuccin/nvim\",\n  name = \"catppuccin\",\n  priority = 1000,\n  ---@class CatppuccinOptions\n  opts = {\n    transparent_background = true,\n  },\n}\n```\n\nThen, you need to overwrite the default colorscheme defined by LazyVim by adding the following plugin file.\n\n```lua title=\"~/.config/nvim/lua/plugins/lazyvim.lua\"\nreturn {\n  \"LazyVim/LazyVim\",\n  opts = {\n    colorscheme = \"catppuccin\",\n  },\n}\n```\n\nRestart Neovim and you should now have the catppuccin theme enabled with transparency support. You can learn more about how to configure catppuccin, including adding additional integration support, on it's [GitHub page](https://github.com/catppuccin/nvim).\n\n## Deep Dive\n\nThere is so much to cover with LazyVim, if you want to get a solid overview of all the features it offers, I recommend my friend Elijah Manor's video.\n\n\u003Ciframe\n  width=\"560\"\n  height=\"315\"\n  class=\"aspect-video w-full\"\n  src=\"https://www.youtube.com/embed/N93cTbtLCIM\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n  allowfullscreen\n>\u003C/iframe>\n\n## Conclusion\n\nLazyVim allows you to quickly setup an IDE for Neovim. It's a great starting point for beginners and offers a simple and flexible structure to modify and extend it to your liking. We covered how to install it and overwrite the theme with Catppuccin. If you want to learn more about LazyVim, I recommend checking the following resources.\n\n- [LazyVim documentation](https://www.lazyvim.org/).\n- [My Neovim config](https://github.com/joshmedeski/dotfiles/tree/main/.config/nvim)","src/data/posts/create-a-neovim-ide-with-lazyvim.mdx",[152,153],"../../assets/posts/create-a-neovim-ide-with-lazyvim.jpeg","../../assets/posts/create-a-neovim-ide-with-lazyvim-thumb.jpeg","19c159c26a2c7377","clutter-free-macos",{"id":155,"data":157,"body":165,"filePath":166,"assetImports":167,"digest":169,"deferredRender":28},{"title":158,"description":159,"pubDate":160,"category":161,"duration":162,"heroImage":163,"youtubeUrl":164},"Clutter Free macOS","I've set up a clutter free environment for myself on macOS. I'll show you a few tips on how.",["Date","2022-12-14T18:00:00.000Z"],{"id":18,"collection":19},"3:29","__ASTRO_IMAGE_../../assets/posts/clutter-free-macos/clutter-free-macos.jpeg","https://www.youtube.com/embed/-44ll9mDaag","I have a minimal, clutter-free, setup on my macOS environment, using tools like tmux and Vim. I have customized my settings to hide the dock and menu bar, and I prefer to use keyboard shortcuts rather than menu items. I also use a window manager and a transparent border for my terminal. I find this setup to be peaceful and conducive to focus, as it removes distractions and allows me to be more productive.\n\nThe two most helpful settings for making macOS clutter free are in the \"Desktop & Dock\" settings in macOS Ventura.\n\n![macOS setting screenshot](../../assets/posts/clutter-free-macos/clutter-free-macos-settings.png)","src/data/posts/clutter-free-macos.mdx",[168],"../../assets/posts/clutter-free-macos/clutter-free-macos.jpeg","e50bde0545cb3885","deleting-mac-apps",{"id":170,"data":172,"body":178,"filePath":179,"assetImports":180,"digest":182,"deferredRender":28},{"title":173,"description":174,"pubDate":175,"category":176,"heroImage":177},"Deleting Mac Apps in Record Time","Here's a quick and simple solution for deleting Mac apps in record time! It uses Alfred, my favorite productivity app",["Date","2014-04-11T08:00:00.169Z"],{"id":113,"collection":19},"__ASTRO_IMAGE_../../assets/posts/deleting-mac-apps/deleting-mac-apps-thumb.jpeg","Here's a quick solution for deleting Mac apps in record time! It uses Alfred, my favorite productivity app, and a handy little app that scans your system for related files for a thorough uninstall.\n\n## AppCleaner\n\n> ...a small application which allows you to thoroughly uninstall unwanted apps.\n\nAppCleaner is a powerful little app that scans your system for all the files and folders related to an application so you can thoroughly remove an app from your system.\n\n\u003Ca\n  title=\"Download AppCleaner\"\n  href=\"http://www.freemacsoft.net/appcleaner/\"\n  target=\"_blank\"\n  rel=\"noopener\"\n>\n  Download AppCleaner\n\u003C/a>\n\n## Alfred Workflow\n\nJonas Eriksen (aiyodk) has created a Alfred workflow that implements Alfred's powerful search feature with AppCleaner. Type \"un\" and search for the app you want to uninstall.\n\n\u003Ca\n  title=\"AppCleaner.alfredworkflow\"\n  href=\"https://github.com/aiyodk/Alfred-Extensions/raw/master/AlfredApp_2.x/AppCleaner/AppCleaner.alfredworkflow\"\n>\n  Download the workflow\n\u003C/a>\n\n## Instructions\n\nOnce you've installed AppCleaner and the Alfred workflow, follow these 2 steps.\n\n### 1. Use Alfred to locate the app\n\nType \"un\" then the name of the app you want to delete (in my case it's Candybar)\n\n![Alfred uninstall action](../../assets/posts/deleting-mac-apps/alfred-uninstall-action.png)\n\n### 2. Delete the files in AppCleaner\n\nimport candybarScreenshot from \"../../assets/posts/deleting-mac-apps/app-cleaner-candybar-screenshot.png\";\n\n\u003CImage\n  src={candybarScreenshot}\n  alt=\"App cleaning candybar screenshot\"\n  class=\"mb-2 mr-4 sm:float-left\"\n  width={320}\n  height=\"auto\"\n/>\n\nNext, AppCleaner will display all the necessary files to delete to remove the app. Click the \"delete\" button and your all done!\n\nThat's it! You could use AppCleaner by itself but with the help of Alfred it's extremely quick to delete mac apps from your system.\n\nDid you find this helpful? Is there something missing in this workflow that I should know about deleting mac apps? Let me know in the comments below.","src/data/posts/deleting-mac-apps.mdx",[181],"../../assets/posts/deleting-mac-apps/deleting-mac-apps-thumb.jpeg","613c1862eaae86e3","eisenhower-matrix-todoist",{"id":183,"data":185,"body":191,"filePath":192,"assetImports":193,"digest":195,"deferredRender":28},{"title":186,"description":187,"pubDate":188,"category":189,"heroImage":190},"The Eisenhower Matrix and Todoist","The Eisenhower matrix is a productivity method to help you evaluate your work and decide what needs done in a more efficient manner.",["Date","2014-10-22T09:20:00.169Z"],{"id":113,"collection":19},"__ASTRO_IMAGE_../../assets/posts/eisenhower-matrix-todoist/eisenhower-matrix-todoist-thumb.jpeg","The 34th president of United States, Dwight Eisenhower, was considered a time management expert and had the ability to get everything done when it needed to be done.\n\n> The most urgent decisions are rarely the most important ones.\n>\n> \u003Ccite>\n>   \u003Ca\n>     href=\"http://en.wikipedia.org/wiki/Dwight_D._Eisenhower\"\n>     target=\"_blank\"\n>     r=\"noopener\"\n>   >\n>     Dwight D Eisenhower\n>   \u003C/a>\n> \u003C/cite>\n\n![The Eisenhower Matrix diagram](../../assets/posts/eisenhower-matrix-todoist/the-eisenhower-matrix-diagram.png)\n\nThe Eisenhower matrix is a productivity method to help you evaluate your work and decide what needs done in a more efficient manner. It focuses on urgency and importance. This matrix allows you to set priorities by urgency and importance to help you decide what work should be done first, and what work should be handed off to someone else.\n\nThere are two pieces of information to record: importance and urgency. To get started you can write out this matrix on a piece of paper and start filling in your tasks where appropriate. You'll notice the top half of the chart shows what tasks you can do, and the bottom half shows what tasks you can delegate.\n\nIt's a simple approach to understanding what tasks need done now, what can be put off to later and what should be delegated to someone else.\n\n## Entering Todoist\n\nI've implemented these concepts into the worlds best to do list, Todoist. It only takes a couple steps in the built-in features of this high-powered productivity app.\n\n**Note:** This workflow requires Todoist Premium\n\n## Adding Labels\n\nThe first step is to add four labels:\n\n- **@urgent**\n- **@not-urgent**\n- **@important**\n- **@not-important**\n\nI have found it useful for all labels to have the same color.\n\n## Adding the Filter\n\nThe power behind Todoist premium is it's ability to create complex filters. Using the labels, create the following filter by copying and pasting the following line into the Query field:\n\n**@urgent &amp; @important, @urgent &amp; @not-important, @important &amp; @not-urgent, @not-important &amp; @not-urgent**\n\nEven though we can't get a square graph diagram in the traditional Eisenhower matrix, this filter gives us a top-down approach for setting priorities and working efficiently.\n\nUrgent and important tasks have to be done immediately so they are on top, important but not urgent tasks can be place in the order of priority to complete, urgent but trifling tasks need to be delegated to someone else as quick as possible, and finally tasks that are trifling and not urgent should be done at a later time after everything else.\n\nThis simple model helps shift your thinking to long-term strategic planning and productivity. The goal of having a successful Eisenhower matrix is to begin to take on tasks that are important but not urgent; that's the sweet spot. You'll find that urgency robs you of your time and even take you from the things most important to you. Using the Eisenhower matrix you can better reflect and understand what you consider urgent, how often you were doing important tasks, and how often you might be doing work that should be delegated to someone else.\n\nI hope this matrix helps you; remember to add labels to each new item you put into Todoist, and regularly check your filter to make sure you're getting your priorities straight.\n\nHave you use the Eisenhower matrix before? What works for you and what doesn't? Please let me know by jotting down your tips and tricks about this productivity method in the comments below.\n\n---\n\n**Update:** David Stephens adapted this idea using Todoist priority levels, take a look in the picture below!\n\nimport colorCoatedDiagram from \"../../assets/posts/eisenhower-matrix-todoist/the-eisenhower-matrix-diagram-color-coated.jpg\";\n\n\u003CImage\n  src={colorCoatedDiagram}\n  alt=\"Diagram of Eisenhower Matrix\"\n  class=\"rounded-lg shadow-md\"\n/>","src/data/posts/eisenhower-matrix-todoist.mdx",[194],"../../assets/posts/eisenhower-matrix-todoist/eisenhower-matrix-todoist-thumb.jpeg","19686c2b1625d7cc","dolev-hadars-dev-workflow",{"id":196,"data":198,"body":206,"filePath":207,"assetImports":208,"digest":210,"deferredRender":28},{"title":199,"description":200,"pubDate":201,"category":202,"duration":203,"heroImage":204,"youtubeUrl":205},"Dolev Hadar's Dev Workflow","Learn about Dolev's, creator of gh-dash, tmux and neovim setup on macOS.",["Date","2023-08-18T12:30:00.000Z"],{"id":51,"collection":19},"29:14","__ASTRO_IMAGE_../../assets/posts/dolev-hadars-dev-workflow.jpeg","https://www.youtube.com/embed/CHV0TWO-b4A","Learn about Dolev's, creator of gh-dash, tmux and neovim setup on macOS.\n\n\u003CGhRepo repo=\"dlvhdr/dotfiles\" />\n\n## Terminal Emulator\n\n\u003CGhRepo repo=\"kovidgoyal/kitty\" />\n\n## Shell\n\n\u003CGhRepo repo=\"fish-shell/fish-shell\" />\n\n## Prompt\n\n\u003CGhRepo repo=\"starship/starship\" />\n\n## Multiplexer\n\n\u003CGhRepo repo=\"tmux/tmux\" />\n\n### Tmux Plugins\n\n\u003CGhRepo repo=\"joshmedeski/t-smart-tmux-session-manager\" />\n\u003CGhRepo repo=\"joshmedeski/tmux-nerd-font-window-name\" />\n\n## Code Editor\n\n\u003CGhRepo repo=\"neovim/neovim\" />\n\n### Neovim Plugins\n\n\u003CGhRepo repo=\"folke/lazy.nvim\" />\n\n\u003CGhRepo repo=\"DNLHC/glance.nvim\" />\n\u003CGhRepo repo=\"ggandor/leap.nvim\" />\n\u003CGhRepo repo=\"prochri/telescope-all-recent.nvim\" />\n\u003CGhRepo repo=\"aaronhallaert/advanced-git-search.nvim\" />\n\u003CGhRepo repo=\"pwntester/octo.nvim\" />\n\n\u003CGhRepo repo=\"dlvhdr/gh-dash\" />\n\u003CGhRepo repo=\"extrawurst/gitui\" />\n\n## Keyboard Layout\n\n\u003Cdiv style=\"padding-top: 60%; position: relative;\">\n  \u003Ciframe\n    src=\"https://configure.zsa.io/embed/moonlander/layouts/KYro7/latest/0\"\n    style=\"border: 0; height: 100%; left: 0; position: absolute; top: 0; width: 100%\"\n  >\u003C/iframe>\n\u003C/div>\n\n## Additional Resources\n\n- [https://arc.net/](https://arc.net/)\n- [https://www.raycast.com/](https://www.raycast.com/)\n- [https://www.youtube.com/ThePrimeagen](https://www.youtube.com/ThePrimeagen)\n\nIt was great being able to talk to Dolev and learn more about how he gets things done with his terminal emulator. You can check out [his website](https://www.dlvhdr.me/) to learn more about him and connect with him.","src/data/posts/dolev-hadars-dev-workflow.mdx",[209],"../../assets/posts/dolev-hadars-dev-workflow.jpeg","5c80f56cdffdf05e","how-i-set-up-prettier",{"id":211,"data":213,"body":220,"filePath":221,"assetImports":222,"digest":224,"deferredRender":28},{"title":214,"description":215,"pubDate":216,"category":217,"heroImage":218,"heroClasses":219},"How I Set Up Prettier","Prettier is a opinionated code formatter that makes it easy to create more consistent code automatically",["Date","2021-12-28T00:00:00.000Z"],{"id":82,"collection":19},"__ASTRO_IMAGE_../../assets/posts/how-i-set-up-prettier/prettier.jpeg","md:rounded-3xl shadow-md","Prettier is a opinionated code formatter that allows you to create more consistent code automatically.\n\nIn this post, we are going to install, configure, and test Prettier on a TypeScript project.\n\n## Install Prettier\n\nFirst, install the prettier package:\n\n```bash\nnpm install -D prettier\n```\n\n## Install plugin to sort imports\n\nNext, install the sort imports Prettier plugin. I have found that being consistent with the order in which imports are imported goes a long way in a project.\n\n```bash\nnpm install -D @trivago/prettier-plugin-sort-imports\n```\n\n## Configure Prettier\n\nCreate a `.prettierrc.json` file in the root of your project\n\n```json title=\".prettierrc.json\"\n{\n  \"importOrder\": [\"^@/(.*)$\", \"^[./]\"],\n  \"importOrderSeparation\": true,\n  \"importOrderSortSpecifiers\": true,\n  \"printWidth\": 80,\n  \"proseWrap\": \"always\",\n  \"semi\": false,\n  \"singleQuote\": true,\n  \"tabWidth\": 2,\n  \"trailingComma\": \"none\"\n}\n```\n\nA few points about the rules I like to use:\n\n80 characters as the print width works great for split screen windows and general legibility.\n2 spaces as the tab width is enough to get the job done without sacrificing width space.\nThe sort import plugin has ^@/(.\\*)$ in the first position of the array. You can map the root of your project to @/ by adding the following path to your `tsconfig.json`:\n\n```json title=\"tsconfig.json\"\n{\n  \"baseUrl\": \".\",\n  \"paths\": {\n    \"@/_\": [\"./_\"]\n  }\n}\n```\n\n## Add Prettier Ignore\n\nThe quickest and safest way to have Prettier ignore files is by copying your .gitignore file:\n\n```bash\ncp .gitignore .prettierignore\n```\n\n## Format all files\n\nTo format all files using Prettier, you can run the following CLI command. I highly recommend committing the work you've done so far to version control since this command will most likely change most of the files in your project.\n\n```bash\nnpx prettier --write .\n```\n\n## Final Thoughts\n\nPrettier is an amazing solution for keeping your files formatted. I often don't write my code in a prettier way, and have Prettier setup to run on save to auto format my files for me. You don't have to deal with bad spacing, extra line breaks, and even the order of imports in your TypeScript files. This has been a huge time-saving tool for me over the last 5+ years and I now install Prettier in this way on all my projects.","src/data/posts/how-i-set-up-prettier.mdx",[223],"../../assets/posts/how-i-set-up-prettier/prettier.jpeg","91f2ce1dd0295bcf","customizing-yabai-with-lua",{"id":225,"data":227,"body":233,"filePath":234,"assetImports":235,"digest":237,"deferredRender":28},{"title":228,"description":229,"pubDate":230,"category":231,"heroImage":232},"Customize Yabai with Lua","Easily create custom keyboard shortcuts to control yabai with Hammerspoon and the Lua programming language",["Date","2023-05-06T22:00:00.000Z"],{"id":18,"collection":19},"__ASTRO_IMAGE_../../assets/posts/customizing-yabai-with-lua.jpeg","If you're a macOS user who enjoys using the [yabai window manager](https://duckduckgo.com/?q=yabai&ia=web), you may find yourself wanting to customize your keyboard bindings to better suit your workflow. Luckily, with the help of [Hammerspoon](https://www.hammerspoon.org/) and the [Lua programming language](https://www.lua.org/), you can easily create custom keyboard shortcuts to control yabai.\n\n## What is yabai?\n\n[yabai](https://github.com/koekeishiya/yabai) is a window management utility for macOS that allows you to organize your windows in a customizable and efficient way. It provides a range of features, including:\n\n- Expanding windows to fill all the available space on the screen, automatically\n- Splitting windows into multiple panes, automatically\n- Stacking windows on top of each other\n- Moving windows between different desktops\n- Resizing and positioning windows with precision\n\nI have a video on\n\nyabai is controlled through a command-line interface and can be customized using a configuration file, there is a common solution for yabai users called [skhd](https://github.com/koekeishiya/skhd). I used it for years but recently discovered a new tool that allows me to write the configuration in a proper programming language and offer some improvements and additional features called Hammerspoon.\n\n## What is Hammerspoon?\n\nHammerspoon is a powerful automation tool for macOS that allows you to write Lua scripts to control various aspects of your system. With Hammerspoon, you can create custom keyboard shortcuts, automate repetitive tasks, and even control other applications. I will show you how to use Lua to write simple reusable functions, as well as leverage loops to make configuring yabai easier and more fun!\n\n## Setting up Hammerspoon\n\nTo get started with Hammerspoon, can download and install it from the official website, or run the following command if you have [homebrew](https://brew.sh/) installed on your machine.\n\n```sh\nbrew install hammerspoon --cask\n```\n\nOnce you've installed Hammerspoon, you can open the Hammerspoon console by pressing `Command + Option + Control + H`.\n\n## Setting up the Hammerspoon Configuration File\n\nTo set up the Hammerspoon Configuration File:\n\n1. Open or create a file named ﻿`~/.hammerspoon/init.lua` in your Hammerspoon configuration directory. You can find the directory by opening Hammerspoon and selecting “Open Config” from the menu bar.\n2. Add your desired configuration code to the ﻿init.lua file. This can include defining hotkeys, creating window management functions, and more. You can find examples and documentation on the Hammerspoon website. We will be adding yabai hotkeys in the next step.\n3. Save the ﻿init.lua file and reload your Hammerspoon configuration by selecting “Reload Config” from the Hammerspoon menu bar. Your changes should now take effect.\n4. Optionally, you can also use a third-party tool like Spoons to manage your Hammerspoon configuration more easily. Spoons are modular extensions that can be loaded into Hammerspoon to provide additional functionality. For now, I will show you how to create your own keybindings with Lua.\n\n## Defining configuration file for yabai\n\nSince hammerspoon can be used to configure more than just yabai keybindings, I prefer separating it. Thankfully, Lua offers a `require` function to import a separate file. Add this to your `~/.hammerspoon` file:\n\n```lua title=\"~/.hammerspoon/keyboard/init.lua\"\nrequire(\"keyboard.yabai\")\n```\n\n## Creating reusable functions for configuration\n\nNow, you can create a directory in your `~/.hammerspoon` directory called `keyboard`, then create a file called `~/.hammerspoon/keyboard/yabai.lua` .\n\n### Sending Yabai Messages\n\nIn the `yabai.lua` config, create a reusable function called `yabai` that will execute the binary and run a message, make sure to run `which yabai` to confirm the path to your binary is `/opt/homebrew/bin/yabai`. Replace it if you get a different value.\n\n```lua title=\"~/.hammerspoon/keyboard/yabai.lua\"\n-- Send message(s) to a running instance of yabai.\nlocal function yabai(commands)\n\tfor _, cmd in ipairs(commands) do\n\t\tos.execute(\"/opt/homebrew/bin/yabai -m \" .. cmd)\n\tend\nend\n```\n\nThe `for` loop is being used so we can pass multiple messages in one function. For example, moving windows to a new desktop and focusing the desktop at the same time.\n\n### Configure `alt+{key}` Keybindings\n\nI prefer using the `alt` key to drive all of my yabai commands, here is a reusable function for binding to `alt+{key}` and an argument to pass the yabai commands.\n\n```lua title=\"~/.hammerspoon/keyboard/yabai.lua\"\nlocal function alt(key, commands)\n\ths.hotkey.bind({ \"alt\" }, key, function()\n\t\tyabai(commands)\n\tend)\nend\n\n-- alpha\nalt(\"f\", { \"window --toggle zoom-fullscreen\" })\nalt(\"l\", { \"space --focus recent\" })\nalt(\"m\", { \"space --toggle mission-control\" })\nalt(\"p\", { \"window --toggle pip\" })\nalt(\"g\", { \"space --toggle padding\", \"space --toggle gap\" })\nalt(\"r\", { \"space --rotate 90\" })\nalt(\"t\", { \"window --toggle float\", \"window --grid 4:4:1:1:2:2\" })\n\n-- special characters\nalt(\"'\", { \"space --layout stack\" })\nalt(\";\", { \"space --layout bsp\" })\nalt(\"tab\", { \"space --focus recent\" })\n```\n\n## Configure `alt+{number}` Keybindings for Spaces\n\nIn order to configure numbers 1-9 with keybindings, we will add a `altShift` function and `altShiftNumber` then loop through those numbers with a `for` loop turn each number into a string and enable the configurations to focus a desktop space with `alt+{number}` and move the current window in focus to another desktop space and then focus on the new space the window is now on. This second function, triggered by `alt+shift+{number}`.\n\n**Note:** System Integrity Protection needs to be disable in order for yabai to focus a different desktop space. It is a helpful use-case but I realize some people can't disable this feature. Please be aware of the security risks involved when disabling this feature.\n\n```lua title=\"~/.hammerspoon/keyboard/yabai.lua\"\nlocal function altShift(key, commands)\n\ths.hotkey.bind({ \"alt\", \"shift\" }, key, function()\n\t\tyabai(commands)\n\tend)\nend\n\nlocal function altShiftNumber(number)\n\taltShift(number, { \"window --space \" .. number, \"space --focus \" .. number })\nend\n\nfor i = 1, 9 do\n\tlocal num = tostring(i)\n\talt(num, { \"space --focus \" .. num })\n\taltShiftNumber(num)\nend\n```\n\n## Configure `alt+{hjkl}` Keybindings as Arrow Keys\n\nFinally, use `hjkl` to focus on or move to a different window on your desktop. Holding `alt+shift` will swap the window instead.\n\n```lua title=\"~/.hammerspoon/keyboard/yabai.lua\"\nlocal homeRow = { h = \"west\", j = \"south\", k = \"north\", l = \"east\" }\n\nfor key, direction in pairs(homeRow) do\n\talt(key, { \"window --focus \" .. direction })\n\taltShift(key, { \"window --swap \" .. direction })\nend\n```\n\nSave the ` init.lua` and `yabai.lua` files and reload your Hammerspoon configuration by selecting “Reload Config” from the Hammerspoon menu bar. Your changes should now take effect.\n\n## Conclusion\n\nYou can customize this script to create your own keyboard bindings for yabai. For example, you could bind a key combination to change the size of a window or toggle between layouts. `man yabai` can be run in your terminal to read more about the available messages that are supported.\n\nCustomizing your keyboard bindings for yabai using Hammerspoon and the Lua programming language improves my workflow productivity, making it easy to use reusable functions and loops to quickly create and update my keybindings.\n\nYou can check out the [whole `yabai.lua` config here](https://github.com/joshmedeski/dotfiles/blob/a1713162226f770fdd27178947fefbdefc6fff2f/.hammerspoon/keyboard/yabai.lua#L12) or checkout my [latest config here](https://github.com/joshmedeski/dotfiles/blob/main/.hammerspoon/keyboard/yabai.lua).\n\nWith Hammerspoon, you can create custom keyboard shortcuts to control yabai in any way you see fit, I recommend making it your own and adding and removing whatever works best for your workflow.\n\nThanks for getting to the end, I recommend checking out my introduction to yabai and how I use it in: [Blazing Fast Window Management on macOS](/posts/blazing-fast-window-management-on-macos/).","src/data/posts/customizing-yabai-with-lua.mdx",[236],"../../assets/posts/customizing-yabai-with-lua.jpeg","a9ae4c03b6c43780","four-letter-word-kills-productivity",{"id":238,"data":240,"body":246,"filePath":247,"assetImports":248,"digest":250,"deferredRender":28},{"title":241,"description":242,"pubDate":243,"category":244,"heroImage":245},"This Four Letter Word Kills Productivity","Let's face it, there are a lot of things that can kill productivity; meetings, email, urgent matters given by co-workers",["Date","2015-01-08T16:18:00.169Z"],{"id":113,"collection":19},"__ASTRO_IMAGE_../../assets/posts/four-letter-word-kills-productivity/four-letter-word-kills-productivity-thumb.jpeg","Let's face it, there are a lot of things that can kill productivity: meetings, email, urgent matters given by co-workers and bosses. But the biggest killer in productivity is caused by your own bad habits and daily expectations. The four letter word that kills productivity is \"busy\".\n\nBeing “busy” is a mindset for getting through each day completing as many tasks and meetings as possible. At some point you will realize the email inbox can’t be emptied and there are more action items on your to-do list than the number of hours each day. This sour news leaves you tired and frustrated. So your natural response to someone asking how things are going is “oh, I’m just busy.”\n\nDo you really want to be busy for the rest of your career only to find a light at the end of the tunnel called retirement? Is there a way to get the word “busy” out of your vocabulary and start doing meaningful work everyday that leaves you energized and ready for Monday?\n\nI’m going to show you how to get rid of busy work, focus on the real work and set yourself up for continued success. Let’s get to it!\n\n## Define “Busy Work”\n\nYou haven’t been doing busywork your whole life (even though it might feel like it) and there is a way to remove the majority of the busy work that’s getting in the way of your real work.\n\nThe truth is responding to email four hours of the day is probably not part of your job description (for some people it might be). The first step to getting rid of busyness is to define what tasks are causing your busy symptoms. Here is a list of common tasks that can turn into busy work:\n\nimport laptopOnDesk from \"../../assets/posts/four-letter-word-kills-productivity/photo-of-laptop-on-desk.jpg\";\n\n\u003CImage\n  src={laptopOnDesk}\n  alt=\"Closed latop sitting on hotel desk\"\n  width={300}\n  height=\"auto\"\n  class=\"mb-2 ml-4 mt-0 sm:float-right\"\n/>\n\n- Responding to Email\n- Sorting Paperwork\n- Attending Meetings\n- Making Phone Calls\n- Checking Social Media\n\n**Action:** Take a few minutes and write down what tasks have turned into busy work for you, include a estimated time per day you spend on those items.\n\n## Define “Real Work”\n\nNow that you have a list of tasks that are considered busy work, it’s time to start focusing on the “real work” that fits your job description and makes you feel fulfilled and accomplished.\n\nDefining this work can be a challenge, because most of your productive and fulfilling work has been mixed with the mundane. The 80/20 Rule (also known as the \u003Ca href=\"http://en.wikipedia.org/wiki/Pareto_principle\" target=\"_blank\">Parento Principle\u003C/a>) states that “roughly 80% of the effects come from 20% of the causes”. Meaning 20% of the tasks you do every day make up 80% of your desired outcomes.\n\nIn order to figure out your real work, answer the following questions:\n\n- What is your job description?\n- What tasks get you the biggest results?\n- What do you feel is real work?\n- When do you feel most alive at work? What are you doing during those times?\n\nIf your job description has become unclear, it’s important to rethink your daily strategy.  You might need to have a conversation with your boss (even if you are your own boss!). The answer to the questions above should help guide the conversation.\n\nDefining real work will make all the difference. Knowing what you are _supposed_ to do and what you're _not supposed_ to do can transform what happens on a daily basis.\n\n## Limit Yourself\n\nThere is only so much you can do in a day, and too often you try and do as much as possible until the work day is over. According to \u003Ca href=\"http://en.wikipedia.org/wiki/Parkinson%27s_law\" target=\"_blank\">Parkinson’s law\u003C/a>, \"work expands so as to fill the time available for its completion.\"\n\nimport steeringWheel from \"../../assets/posts/four-letter-word-kills-productivity/photo-of-hand-on-steering-wheel-wearing-a-watch.jpg\";\n\n\u003CImage\n  src={steeringWheel}\n  alt=\"Hand on steering wheel\"\n  width={350}\n  height=\"auto\"\n  class=\"mb-2 mr-4 mt-2 sm:float-left\"\n/>\n\nSo when you decide your entire to-do list, email inbox, and project list are available for you to try and complete each day, it will be impossible to define what work will get done, and when. Trying to mark everything by priorities and hoping the items with deadlines get noticed today is dangerous territory. If you ever decide to build priorities into your day, pick \u003Ca href=\"http://productivityist.com/priority/\" target=\"_blank\">one priority\u003C/a> and work on it.\n\nOtherwise, limiting yourself to a few (2-4) major tasks and projects each day can take you from always trying to play catchup, to staying ahead of schedule.\n\n## Get Laser Focused\n\nIn order to limit yourself to a handful of projects each day, you have to get laser focused.\n\nBack to Parkinson’s law. I recommend setting aside meaningful time for each of your daily projects. The goal here is to define how long (you think) each project will take so Parkinson’s law can come into effect. If you say this report will take thirty minutes to complete, set a timer for thirty minutes and get to work. Try to avoid distractions and outside interruptions. If you want to learn more about properly using a timer, check out the \u003Ca href=\"http://pomodorotechnique.com/\" target=\"_blank\" rel=\"noopener\">Pomodoro Technique\u003C/a>.\n\n## Eat the Frog\n\nNow that you have defined your real work, limited yourself to a small number of projects each day, and getting laser focused: you have to eat the frog.\n\nimport frog from \"../../assets/posts/four-letter-word-kills-productivity/photo-of-green-frog.jpg\";\n\n\u003CImage\n  src={frog}\n  alt=\"Green Frog\"\n  width={300}\n  height=\"auto\"\n  class=\"mb-2 ml-4 mt-0 sm:float-right\"\n/>\n\n“Eat the frog” is a phrase made popular by \u003Ca href=\"http://www.amazon.com/Eat-That-Frog-Great-Procrastinating/dp/1576754227\">Bryan Tracy\u003C/a>. Think about the most difficult task or project you need to complete today and \u003Cem>do it first\u003C/em>: eat the frog. No one likes eating the frog, but if you do it first thing in your day, you can overcome procrastination and boost your mental stamina.\n\nToo often the hardest work is held off until Friday afternoon, but doing the hardest work first will leave your day and week feeling fulfilled and gratifying. It’s not easy to “eat the frog”, but it’s worth it.\n\nBuilding the practice of realizing your \"frog\" and successfully completing that task as soon as possible every day is a unique skill that will transform your workday.\n\n## Build a Routine\n\nStaying in a constant state of being busy comes from blurred lines and lack of consistency in your day. Email is checked periodically throughout the day, reports are sent to your boss sporadically, some days you work through your lunch break, while other days you come home late (or both). The final step in this equation will help bring consistency to your week.\n\nCreating a routine can significantly decrease your busyness and increase your productivity. Setting up a schedule for your day will increase your chances of becoming laser focused, give you the courage to eat the frog and keep yourself in check to do the work that matters most.\n\nHere is a sample of a daily work routine:\n\n- **08-11:** Work on one internal project (eat the frog)\n- **11-12:** Email\n- **12-01:** Lunch break in the park\n- **01-04:** Work on one external project\n- **04-05:** Clean up desk, talk with co-workers, decide on projects for tomorrow\n\nA simple routine like this defines what type of work gets done at what time during the day. When you keep a routine like this, you set realistic expectations for the amount of work you can get done in a day. You also let others around you know when you are available to talk, take emails, or just catch up. Building a routine is a great way to bring everything together and get a handle on this label of being busy.\n\nA solid routine helps you work on real work on a consistent basis while helping you avoid the busy work. Creating a routine also helps you get laser focused at different periods throughout the day.\n\n---\n\nInstead of trying to run a marathon, think of your work in sprints, and set up your schedule accordingly. You can also build the confidence and mental energy to successfully eat your frogs day in and day out with the proper routine. Overall, a routine will help you do your best work on an ongoing basis.\n\nSo the next time someone asks “how have you been?”, instead of say “oh, just busy”, you can say “I’ve been so productive!” Instead of letting “busy” be a four letter word that kills productivity, kill  busy and start being productive!","src/data/posts/four-letter-word-kills-productivity.mdx",[249],"../../assets/posts/four-letter-word-kills-productivity/four-letter-word-kills-productivity-thumb.jpeg","a1d8ee9847fd6a2d","github-in-the-terminal",{"id":251,"data":253,"body":261,"filePath":262,"assetImports":263,"digest":265,"deferredRender":28},{"title":254,"description":255,"pubDate":256,"category":257,"duration":258,"heroImage":259,"youtubeUrl":260},"GitHub In The Terminal","Let's integrate GitHub into the terminal using the GitHub CLI, gh-dash, and the Octo Neovim plugin.",["Date","2023-08-16T21:00:00.000Z"],{"id":18,"collection":19},"1:20:07","__ASTRO_IMAGE_../../assets/posts/github-in-the-terminal.jpeg","https://www.youtube.com/embed/TzAi3IcltkY","Let's integrate GitHub into the terminal using the GitHub CLI, gh-dash, and the Octo Neovim plugin. In this live stream I experiment with adding new features to my tools to improve my experience with using GitHub on the command line.\n\n## gh-dash\n\n\u003CGhRepo repo=\"dlvhdr/gh-dash\" />\n\nHere are a couple of features I added to gh-dash:\n\n```yaml title=\"~/.config/gh-dash/config.yml\"\nkeybindings:\n  issues:\n    - key: e\n      command: >\n        tmux display-popup -d {{.RepoPath}} -w 80% -h 90% -E 'nvim -c \":Octo issue edit {{.IssueNumber}}\"'\n    - key: i\n      command: >\n        tmux display-popup -d {{.RepoPath}} -w 80% -h 90% -E 'nvim -c \":Octo issue create\"'\n  prs:\n    - key: O\n      command: >\n        tmux new-window -c {{.RepoPath}} 'nvim -c \":Octo pr edit {{.PrNumber}}\"'\n```\n\nAlso, in order to keep gh dash up-to-date, run the following command:\n\n```sh\ngh extension upgrade --all\n```\n\n## Octo.nvim\n\n\u003CGhRepo repo=\"pwntester/octo.nvim\" />\n\nHere is how I configure Octo.nvim using the Lazy.nvim plugin manager:\n\n```lua title=\"~/.config/nvim/lua/plugins/octo.lua\"\nreturn {\n  \"pwntester/octo.nvim\",\n  cmd = \"Octo\",\n  dependencies = {\n    \"nvim-lua/plenary.nvim\",\n    \"nvim-telescope/telescope.nvim\",\n    \"nvim-tree/nvim-web-devicons\",\n  },\n  config = function()\n    require(\"octo\").setup({ enable_builtin = true })\n    vim.cmd([[hi OctoEditable guibg=none]])\n  end,\n  keys = {\n    { \"\u003Cleader>o\", \"\u003Ccmd>Octo\u003Ccr>\", desc = \"Octo\" },\n  },\n}\n```\n\nI had previously created many custom leader key bindings but found I wasn't using them. So, thanks to [this issue I opened](https://github.com/pwntester/octo.nvim/issues/377), I can simplify it down to `\u003Cleader>o` which opens Telescope with all the potential Octo commands.\n\n## gitlinker.nvim\n\n\u003CGhRepo repo=\"ruifm/gitlinker.nvim\" />\n\nThis plugin makes it easy to get a unique GitHub URL to a line of code in a repo. You can use the following lines to install it with lazy.nvim:\n\n```lua title=\"~/.config/nvim/lua/plugins/gitlinker.lua\"\nreturn {\n  \"ruifm/gitlinker.nvim\",\n  dependencies = \"nvim-lua/plenary.nvim\",\n  opts = {},\n}\n```\n\nNow, you can press `\u003Cleader>gy` and it will automatically detect the line your cursor is on and copy a unique GitHub URL to that source code to your clipboard.\n\n## gitsigns.nvim\n\n\u003CGhRepo repo=\"lewis6991/gitsigns.nvim\" />\n\nThis is my favorite git plugin for Neovim. It has many features, primarily showing git diff status in the sign column. Here is how I configure it using lazy.nvim:\n\n```lua title=\"~/.config/nvim/lua/plugins/gitsigns.lua\nreturn {\n  \"lewis6991/gitsigns.nvim\",\n  event = \"BufReadPre\",\n  opts = function()\n    local icons = require(\"config.icons\")\n    --- @type Gitsigns.Config\n    local C = {\n      on_attach = function(buffer)\n        local gs = package.loaded.gitsigns\n\n        local function map(mode, l, r, desc)\n          vim.keymap.set(mode, l, r, { buffer = buffer, desc = desc })\n        end\n\n        map(\"n\", \"]g\", gs.next_hunk, \"Next Hunk\")\n        map(\"n\", \"[g\", gs.prev_hunk, \"Prev Hunk\")\n        map({ \"n\", \"v\" }, \"\u003Cleader>gg\", \":Gitsigns stage_hunk\u003CCR>\", \"Stage Hunk\")\n        map({ \"n\", \"v\" }, \"\u003Cleader>gx\", \":Gitsigns reset_hunk\u003CCR>\", \"Reset Hunk\")\n        map(\"n\", \"\u003Cleader>gG\", gs.stage_buffer, \"Stage Buffer\")\n        map(\"n\", \"\u003Cleader>gu\", gs.undo_stage_hunk, \"Undo Stage Hunk\")\n        map(\"n\", \"\u003Cleader>gX\", gs.reset_buffer, \"Reset Buffer\")\n        map(\"n\", \"\u003Cleader>gp\", gs.preview_hunk, \"Preview Hunk\")\n        map(\"n\", \"\u003Cleader>gb\", function()\n          gs.blame_line({ full = true })\n        end, \"Blame Line\")\n        map(\"n\", \"\u003Cleader>gd\", gs.diffthis, \"Diff This\")\n        map(\"n\", \"\u003Cleader>gD\", function()\n          gs.diffthis(\"~\")\n        end, \"Diff This ~\")\n        map({ \"o\", \"x\" }, \"ih\", \":\u003CC-U>Gitsigns select_hunk\u003CCR>\", \"GitSigns Select Hunk\")\n      end,\n    }\n    return C\n  end,\n}\n```\n\nThe commands I hightlight in the live stream are `]g` and `[g` to navigate between hunks, `\u003Cleader>gg` and `\u003Cleader>gx` to stage and reset hunks, and `\u003Cleader>gG` to stage the entire buffer.\n\n## lazygit\n\n\u003CGhRepo repo=\"jesseduffield/lazygit\" />\n\nLastly, I integrated Octo more into my favorite git CLI tool, lazygit, by overwritting the \"o\" command with a custom command and setting the origional command to \"O\".\n\n```yaml title=\"~/Library/Application Support/lazygit/config.yml\ncustomCommands:\n  - key: \"o\"\n    command: \"nvim -c ':Octo pr create'\"\n    context: \"localBranches\"\n    loadingText: \"Loading Octo\"\n    description: \"Open pull request with Octo\"\n    subprocess: true\nkeybinding:\n  branches:\n    createPullRequest: \"O\"\n```\n\n---\n\nOverall this was fun exploring these tools on the live stream. Each of the tools explored have different features to offer and I can see myself replacing a lot of my time on github.com with gh-dash, octo.nvim, and lazygit.","src/data/posts/github-in-the-terminal.mdx",[264],"../../assets/posts/github-in-the-terminal.jpeg","b86359e9bfb46a12","how-to-make-an-ikea-hack-standing-desk",{"id":266,"data":268,"body":275,"filePath":276,"assetImports":277,"digest":279,"deferredRender":28},{"title":269,"description":270,"pubDate":271,"category":272,"heroImage":274},"How to Make an IKEA Hack Standing Desk","Standing desks have gained a lot of popularity in the last few years. At a previous job, I had a nice standing desk from",["Date","2021-05-19T12:00:00.000Z"],{"id":273,"collection":19},"tech","__ASTRO_IMAGE_../../assets/posts/how-to-make-an-ikea-hack-standing-desk/how-to-make-an-ikea-hack-standing-desk-thumb.jpeg","Standing desks have gained a lot of popularity in the last few years. At a previous job, I had a nice standing desk from [Herman Miller](https://www.hermanmiller.com). Unfortunately, it was very expensive which is something I couldn't afford for my home. So, I built an IKEA hack standing desk.\n\nThe office at my previous house was recently featured on [ZSA's people blog](https://people.zsa.io/josh-medeski/). Since then, I took it one step further and converted it into a standing desk. After lots of research, including helping a friend set up a standing desk of her own, I chose what would work best for me.\n\nThankfully, [IKEA](https://www.ikea.com/) offers quality products at an affordable rate and people all over the internet have found [clever ways](https://www.ikeahackers.net) to mix and match IKEA's products to build custom, unique, solutions.\n\nHere were my criteria for how to make an IKEA hack standing desk:\n\nimport joshSittingAtDesk from \"../../assets/posts/how-to-make-an-ikea-hack-standing-desk/josh-sitting-at-desk.jpg\";\n\n\u003CImage\n  src={joshSittingAtDesk}\n  alt=\"Josh sitting at desk\"\n  class=\"rounded-xl sm:float-right sm:mb-2 sm:ml-2 sm:mt-0\"\n  width={300}\n  height={225}\n/>\n\n1. Lots of counter space\n2. Lots of storage\n3. Doesn't break the bank\n4. Looks good\n5. Can be customized in the future\n\nI'll go through each piece of my setup, give you some tips, and explain how to make an IKEA hack standing desk.\n\n## The Countertop\n\nimport countertop from \"../../assets/posts/how-to-make-an-ikea-hack-standing-desk/karlby-countertop-walnut-veneer.jpg\";\n\n\u003CImage\n  src={countertop}\n  alt=\"Karlby Countertop\"\n  class=\"sm:float-left sm:mb-16 sm:mr-4 sm:mt-0\"\n  width={240}\n  height={132}\n/>\n\nThe countertop is the most important element of a desk. It's the foundation for a good desk. That's why so many companies charge a lot for their desks: good quality material is expensive. Thankfully, a wood veneer is a great alternative. I got IKEA's [KARLBY Countertop](https://www.ikea.com/us/en/p/karlby-countertop-walnut-veneer-70335212/). It's 98 inches which is plenty wide enough space for my needs.\n\n## Storage\n\nimport alexDrawer from \"../../assets/posts/how-to-make-an-ikea-hack-standing-desk/alex-drawer-unit-white.jpg\";\n\n\u003CImage\n  src={alexDrawer}\n  alt=\"Alex Drawer unit in white\"\n  class=\"rounded-xl sm:float-right sm:mb-2 sm:ml-2 sm:mt-0\"\n  width={137}\n  height={200}\n/>\n\nThe next step for a great desk is its support. When I first built it I didn't have the budget for a standing desk. I know IKEA sells [basic furniture legs](https://www.ikea.com/us/en/p/torsklint-leg-light-neutral-90365458/) but, as someone who lives in apartments, I wanted good storage. I got two [ALEX Drawer units](https://www.ikea.com/us/en/p/alex-drawer-unit-white-00473546/). My long desk had plenty of room to give me comfortable legroom in the middle.\n\n## Cable Management\n\nimport signum from \"../../assets/posts/how-to-make-an-ikea-hack-standing-desk/signum-cable-management-horizontal.jpg\";\n\n\u003CImage\n  src={signum}\n  alt=\"Karlby Countertop\"\n  class=\"rounded-xl sm:float-right sm:mb-2 sm:ml-2 sm:mt-0\"\n  width={200}\n  height={65}\n/>\n\nCable management is hard. There are lots of potential solutions, but I got the [SIGNUM cable management tool](https://www.ikea.com/us/en/p/signum-cable-management-horizontal-silver-color-30200253/) and a [power strip](https://www.amazon.com/dp/B08FCDWYJ1/) that I could mount to the bottom of the countertop. With some time, patience, and attention to detail, I was able to tuck everything out of sight.\n\nimport cableManagement from \"../../assets/posts/how-to-make-an-ikea-hack-standing-desk/cable-management-example.jpg\";\n\n\u003CImage src={cableManagement} alt=\"Karlby Countertop\" width={820} height={349} />\n\nAll the items above make a great desk, the Alex units do a good job holding the countertop and if you're on a budget I'd recommend you stop there. I had this setup for years before I decided to upgrade to a standing desk.\n\n## Standing Desk\n\nimport frameOnly from \"../../assets/posts/how-to-make-an-ikea-hack-standing-desk/fully-jarvis-frame-only.jpg\";\n\n\u003CImage\n  src={frameOnly}\n  alt=\"Fully Jarvin Standing desk frame\"\n  class=\"h-auto w-[200px] rounded-xl sm:float-right sm:mb-2 sm:ml-2 sm:mt-0\"\n  width={400}\n  height={400}\n/>\n\nI thought about getting rid of my IKEA hack and upgrading to a standing desk. I realized getting something similar (without the storage) was going to cost me almost $1000! Because everything was still in good shape, and I already liked the look of the desk, I got [Fully's Jarvis frame only](https://www.fully.com/jarvis-frame-only.html). The white frame with the Alex units made it match the setup perfectly! I'm glad I went in this direction because it was easy to install myself. I made sure to install the frame so the Alex units could still fit perfectly on the edges of the countertop.\n\n## Accessories\n\nimport screenbar from \"../../assets/posts/how-to-make-an-ikea-hack-standing-desk/screenbar.jpg\";\n\n\u003CImage\n  src={screenbar}\n  alt=\"BenQ screenbar plus\"\n  class=\"rounded-xl sm:float-right sm:mb-2 sm:ml-2 sm:mt-0\"\n  width={140}\n  height={200}\n/>\n\nThere are a few accessories I recommend for lighting and comfort:\n\n- [BenQ's Computer Monitor Light ScreenBar Plus](https://www.benq.com/en-us/lamps/computer-desklamp/screenbar-plus.html) goes on top of your monitor and gives you a bright counter space without creating a glare.\n- [Steelseries's XXL mouse pad](https://steelseries.com/gaming-mousepads/qck-heavy-series?size=xxl) provides a soft surface for your mouse and keyboard.\n\n## Tips\n\n- I highly recommend getting the programmable memory unit so you don't have to deal with accidentally hitting the Alex drawers with the countertop.\n- I also highly recommend taking the time to do cable management, for years I always had cluttered cables that were under my feet. But now that it's perfect I'm enjoying my office space even more.\n- A 98\" desk is a lot! You may have a hard time making it work for your floorplan. You can go with a smaller countertop and use one or no Alex units to gain extra real estate in your room.\n- I chose [Fully](https://www.fully.com) over [IKEA's standing desk options](https://www.ikea.com/us/en/search/products/?q=standing%20desk) because I had multiple friends with Fully models and were very happy with it. Also, I hadn't heard anything good about IKEA's standing desk options and figured quality over cost was important for the standing desk motor.\n- If I had more money, I would buy a real wood countertop. The veneer looks nice, but my parents are woodworkers and I've always appreciated the real thing. Maybe one day I'll upgrade.\n- I don't recommend a permanently standing desk. I like being able to switch between sitting and standing throughout the day, it helps my brain work in different ways and sometimes I get tired of standing.\n- I purposefully didn't mention what chair I use. It's just a basic kitchen table chair. If you have any suggestions please leave them in the comments.\n- If there's something in the pictures you want to more about but I haven't talked about checking out my [uses page](/uses) where I discuss computers, audio equipment, and more.\n\n### How to make an IKEA hack standing desk\n\n- [KARLBY - Countertop (98\")](https://www.ikea.com/us/en/p/karlby-countertop-walnut-veneer-70335212/)\n- [ALEX - Drawer unit (x2)](https://www.ikea.com/us/en/p/alex-drawer-unit-white-00473546/)\n- [Fully - Jarvis (Frame Only)](https://www.fully.com/jarvis-frame-only.html)\n- [SIGNUM - Cable management](https://www.ikea.com/us/en/p/signum-cable-management-horizontal-silver-color-30200253/)\n- [Amazon - Power Strip](https://www.amazon.com/dp/B08FCDWYJ1/)\n\nimport desk from \"../../assets/posts/how-to-make-an-ikea-hack-standing-desk/ikea-hack-standing-desk-sitting.jpg\";\n\n\u003CImage\n  src={desk}\n  alt=\"Standing desk\"\n  class=\"m-0 rounded-xl\"\n  width={400}\n  height={298}\n/>\n\n## Conclusion\n\nI'm very happy with how I made an IKEA hack standing desk. It took years of iteration before I finally got to this state and I may make more changes in the future. Hopefully, this guide was helpful and now you can make an IKEA hack standing desk of your own.\n\nHave you built your desk? Have questions about my setup? Let me know in the comments below.","src/data/posts/how-to-make-an-ikea-hack-standing-desk.mdx",[278],"../../assets/posts/how-to-make-an-ikea-hack-standing-desk/how-to-make-an-ikea-hack-standing-desk-thumb.jpeg","c55ea1205b5f15e4","make-your-yearly-review-easier-with-ai",{"id":280,"data":282,"body":291,"filePath":292,"assetImports":293,"digest":295,"deferredRender":28},{"title":283,"description":284,"pubDate":285,"category":286,"duration":288,"heroImage":289,"youtubeUrl":290},"Make Your Yearly Review Easier with AI","AI tools like ChatGPT can make the process of doing a yearly review much easier! I'll go over the AI prompt and process that I used this year for my yearly review.",["Date","2024-01-08T09:00:00.000Z"],{"id":287,"collection":19},"personal-development","05:52","__ASTRO_IMAGE_../../assets/posts/make-your-yearly-review-easier-with-ai.jpeg","https://www.youtube.com/embed/7TNGf11x6Tc","AI tools like ChatGPT can make the process of doing a yearly review much easier! I'll go over the AI prompt and process that I used this year for my yearly review.\n\nAI has made my life a lot easier and I'm excited to share with you how I used it to make my yearly review easier.\n\n## The Tools\n\nI use [Obsidian](https://obsidian.md/) for all my note-taking, including journaling my yearly review, and [Raycast AI](https://www.raycast.com/pro) for ChatGPT integration on macOS.\n\n## Prompt\n\nThe following prompt will generate questions for your yearly review:\n\n```\nYou are a productivity coach, you will help me align\nmy life with what's most important to me. I am doing\na yearly review and I will be reflecting on the last\nyear and thinking about the year ahead. Give me a\ngroup of questions that will help me with each area\nof my life. Wait until I give you an area then give\nme the questions as bullet points in markdown.\n```\n\nThen provide it with an area of your life, such as: \"health\", \"fitness\", or \"hobbies\" and it will generate a list of questions for you to answer.\n\n## Areas\n\nAli Abdaal's video discussing his wheel of life:\n\n\u003Ciframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/c_DOG_mXz5w?si=DwEhS3fIhHb3yvlu&amp;start=136\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n  allowfullscreen\n>\u003C/iframe>\n\nAlso check out Tiago Forte's [Building A Second Brain](https://www.buildingasecondbrain.com/) to learn more about the PARA method and how to organize your life, including creating areas of responsibility.\n\n## Bonus prompt formula\n\nCreating a prompt forumla will help your results be more consistent and focused on your needs. Here is the formula I use to generate better results.\n\n```\n{role} {purpose} {context} {instructions} {conditions}\n```\n\n## Conclusion","src/data/posts/make-your-yearly-review-easier-with-ai.mdx",[294],"../../assets/posts/make-your-yearly-review-easier-with-ai.jpeg","51eaae727edd67ac","macos-keyboard-shortcuts-for-tmux",{"id":296,"data":298,"body":306,"filePath":307,"assetImports":308,"digest":310,"deferredRender":28},{"title":299,"description":300,"pubDate":301,"category":302,"duration":303,"heroImage":304,"youtubeUrl":305},"macOS Keyboard Shortcuts for tmux","It's easy to create custom macOS keyboard shortcuts with tmux key bindings using hex codes and Alacritty.",["Date","2021-07-16T17:55:00.000Z"],{"id":18,"collection":19},"17:49","__ASTRO_IMAGE_../../assets/posts/macos-keyboard-shortcuts-for-tmux/macos-keyboard-shortcuts-for-tmux-thumbnail.jpeg","https://www.youtube.com/embed/BLp61-Lq0kQ","As a longtime macOS user, I am used to using the command key to get a lot done. You're probably familiar with `cmd+c` for copying to the clipboard, and `cmd+t` to create a new tab in Safari. Most power users agree that staying away from the mouse and keeping your hands on the keyboard for as long as possible will help you be faster and more efficient while working.\n\nUnfortunately, tmux is a tool used in the terminal that doesn't leverage the command key at all, but rather all of it's commands are prefixed with the keystroke `ctrl+b` followed by a letter (ex: new window is `ctrl+b c`). I spent months building the muscle memory for the tmux keybindings, but it always felt slow compared to the macOS keyboard shortcuts.\n\nSo, using the [Alacritty terminal emulator](https://github.com/alacritty/alacritty), I found a way to customize tmux with my own macOS style keyboard shortcuts using the command key.\n\nIn this article, I'm going to show you how to create your own keyboard shortcut for tmux. We will go through the following steps:\n\n1. Decide the keyboard shortcut\n2. Get the hex code\n3. Assign it to Alacritty\n\n## 1. Decide the keyboard shortcut\n\nBefore you can assign the keyboard shortcut you have to decide what you want it to do. tmux uses a prefix (default: `control+b`) followed by a key to run a key binding. In macOS, keyboard shortcuts are driven by the command key plus an additional key.\n\nAs an example, you can create a new tmux window with `prefix+c`. tmux windows share the same UI pattern as tabs in macOS (ex: Safari tabs or Finder tabs). New tabs in macOS are created with the `cmd+t` keyboard shortcut.\n\nSo let's bind new tmux window to `cmd+t`.\n\n## 2. Get the hex code\n\nIn order to simulate a keystroke, Alacritty uses hex codes, which is simply a combination of characters.\n\nFor our example, we need to get the hex code values for `\u003Cctrl+b> c`. We will use `xxd` to record our keystrokes and dump the hex codes we need.\n\nFirst run the following command (outside of tmux):\n\n```sh\nxxd -psd\n```\n\nThen type `ctrl+b`, `c`, then press the return key (aka `enter`). You will see the following data output in your terminal:\n\n```\n^Bc\n02630a\n```\n\nPress `ctrl+c` to escape the xxd listener. You now have the hex code `02630a`, which stands for `ctrl+b c return`.\n\n## 3. Assign it to Alacritty\n\nKeystroke hex codes are bound to two character at a time. So from our code `02630a`, `02` stands for `ctrl+b`, `63` stands for `c`, and `0a` stands for `return`. Since we don't need the return key, we can drop it. Alacritty also wants us to escape each code with `\\x{hex}` so the `chars` we want to use for `\u003Cprefix-b> c` will be `\\x02\\x63`.\n\nFinally, we will use the `key` and `mods` keys to define the custom key binding. Add the following code to your `~/.config/alacritty/alacritty.yml` config file.\n\n```yaml title=\"~/.config/alacritty/alacritty.yml\"\nkey_bindings:\n  - { key: T, mods: Command, chars: \"\\x02\\x63\" }\n```\n\nNow, while inside tmux, you can hit `cmd+t` to create a new window! The principles learned here can be applied to any key binding with any keystroke combination you can think of.\n\n## Bonus: Additional Shortcuts\n\nHere are some of the tmux keybindings I have set up with Alacritty to create more macOS like keyboard shortcuts:\n\n```yaml title=\"~/.config/alacritty/alacritty.yml\"\nkey_bindings:\n  - { key: E, mods: Command, chars: \"\\x02\\\"\" } # split tmux window vertically\n  - { key: E, mods: Command|Shift, chars: \"\\x02%\" } # split tmux window horizontally\n  - { key: F, mods: Command, chars: \"lfcd\\n\" } # open file manager 'gokcehan/lf'\n  - { key: F, mods: Command|Shift, chars: \"\\x02\\x5b\\x2f\" } # start tmux search mode\n  - { key: G, mods: Command, chars: \"\\x02g\" } # open git manager 'jesseduffield/lazygit'\n  - { key: J, mods: Command, chars: \"\\x02\\x54\" } # open t - tmux smart session manager\n  - { key: K, mods: Command, chars: \"\\x02s\" } # open interactive tmux session client\n  - { key: L, mods: Command, chars: \"\\x02L\" } # switch to the last tmux session\n  - { key: O, mods: Command, chars: \"\\x02u\" } # open URLs 'joshmedeski/tmux-fzf-url'\n  - { key: P, mods: Command, chars: \":GoToFile\\n\" } # files\n  - { key: P, mods: Command|Shift, chars: \":GoToCommand\\n\" } # commands\n  - { key: Q, mods: Command, chars: \":q\\n\" } # quit vim\n  - { key: S, mods: Command, chars: \"\\x1b\\x3a\\x77\\x0a\" } # save vim buffer\n  - { key: T, mods: Command, chars: \"\\x02c\" } # create a new tmux window\n  - { key: W, mods: Command, chars: \"\\x02x\" } # kill the current pane\n  - { key: Z, mods: Command, chars: \"\\x02z\" } # toggle zoom state of the current tmux pane\n  - { key: Tab, mods: Control, chars: \"\\x02n\" } # switch to next tmux window\n  - { key: Grave, mods: Control, chars: \"\\x02p\" } # switch to previous tmux window\n  - { key: Comma, mods: Command, chars: \"\\x02,\" } # rename the current tmux window\n  - { key: LBracket, mods: Command, chars: \"\\x0f\" } # navigate back in vim (ctrl+o)\n  - { key: LBracket, mods: Command|Shift, chars: \"\\x02p\" } # switch to next tmux window\n  - { key: RBracket, mods: Command, chars: \"\\x09\" } # navigate forward in vim (ctrl+i)\n  - { key: RBracket, mods: Command|Shift, chars: \"\\x02n\" } # switch to previous tmux window\n  - { key: Semicolon, mods: Command, chars: \"\\x02:\" } # enter the tmux command prompt\n  - { key: Key1, mods: Command, chars: \"\\x021\" } # select tmux window 1\n  - { key: Key2, mods: Command, chars: \"\\x022\" } #                ... 2\n  - { key: Key3, mods: Command, chars: \"\\x023\" } #                ... 3\n  - { key: Key4, mods: Command, chars: \"\\x024\" } #                ... 4\n  - { key: Key5, mods: Command, chars: \"\\x025\" } #                ... 5\n  - { key: Key6, mods: Command, chars: \"\\x026\" } #                ... 6\n  - { key: Key7, mods: Command, chars: \"\\x027\" } #                ... 7\n  - { key: Key8, mods: Command, chars: \"\\x028\" } #                ... 8\n  - { key: Key9, mods: Command, chars: \"\\x029\" } #                ... 9\n```\n\nTo see my latest keybindings, check out my full [`alacritty.yml` file on GitHub](https://github.com/joshmedeski/dotfiles/blob/main/.config/alacritty/alacritty.yml)","src/data/posts/macos-keyboard-shortcuts-for-tmux.mdx",[309],"../../assets/posts/macos-keyboard-shortcuts-for-tmux/macos-keyboard-shortcuts-for-tmux-thumbnail.jpeg","c90c3d06d413bd38","manage-files-with-lf",{"id":311,"data":313,"body":322,"filePath":323,"assetImports":324,"digest":327,"deferredRender":28},{"title":314,"description":139,"pubDate":315,"category":316,"heroImage":317,"thumbnail":318,"guide":319},"Manage Files with lf",["Date","2023-06-26T12:00:00.000Z"],{"id":18,"collection":19},"__ASTRO_IMAGE_../../assets/posts/manage-files-with-lf.jpeg","__ASTRO_IMAGE_../../assets/posts/manage-files-with-lf-thumb.jpeg",{"ref":320,"position":321},{"id":146,"collection":147},8,"[`lf`](https://pkg.go.dev/github.com/gokcehan/lf) is a terminal file manager. Having to constantly change directories with the `cd` command and preview files with `cat` can be slow and repetitive. `lf` allows you to quickly navigate your filesystem and preview files with a single vim-like commands.\n\n## Install\n\nInstall it homebrew with the following command.\n\n```sh\nbrew install lf\n```\n\n## Using\n\nUsing `lf` is as simple as running the `lf` command which will pull up the file manager. You can use `hjkl` as arrow keys to navigate the files. You can also press `o` to open up a file in your editor.\n\n## Configuration\n\n`lf` is configured with a file located at `~/.config/lf`. Here are some simple default options that I like to set.\n\n```sh title=\"~/.config/lf/lfrc\"\nset hidden\nset icons\nset number\nset relativenumber\nset shell fish\nset promptfmt \"\\033[34;1m%d\\033[0m\\033[1m%f\\033[0m\"\n```\n\nYou can add icon support by install my fish plugin:\n\n```sh\nfisher install joshmedeski/fish-lf-icons\n```\n\nHere's a preview of what it looks like:\n\n![lf preview](../../assets/posts/manage-files-with-lf/lf-preview.png)\n\nI also like to have access to lf while inside neovim, so you can add the following plugin to your LazyVim setup.\n\n```lua\nreturn {\n  \"lmburns/lf.nvim\",\n  cmd = \"Lf\",\n  dependencies = { \"nvim-lua/plenary.nvim\", \"akinsho/toggleterm.nvim\" },\n  opts = {\n    winblend = 0,\n    highlights = { NormalFloat = { guibg = \"NONE\" } },\n    border = \"single\",\n    escape_quit = true,\n  },\n  keys = {\n    { \"\u003Cleader>ff\", \"\u003Ccmd>Lf\u003Ccr>\", desc = \"NeoTree\" },\n  },\n}\n```\n\nYou'll have to restart LazyVim, but after that you can press `\u003Cspace>+f+f` to open lf as a floating window in the directory of the file you have open.\n\n![lf preview](../../assets/posts/manage-files-with-lf/lf-preview-in-neovim.png)\n\n## Conclusion\n\nI prefer `lf` over sidebar style file mangers and it is infinitely customizable for your needs. We discussed install it with homebrew, configuring it to show icons, and how to use it in Neovim. Check out the [lf wiki](https://github.com/gokcehan/lf/wiki) to learn how to customize it more.","src/data/posts/manage-files-with-lf.mdx",[325,326],"../../assets/posts/manage-files-with-lf.jpeg","../../assets/posts/manage-files-with-lf-thumb.jpeg","5bbcb37d473a2541","manage-terminal-sessions-with-tmux",{"id":328,"data":330,"body":340,"filePath":341,"assetImports":342,"digest":345,"deferredRender":28},{"title":331,"description":332,"pubDate":333,"category":334,"heroImage":335,"thumbnail":336,"guide":337},"Manage Terminal Sessions with tmux","tmux is a terminal multiplexer with lets you create multiple terminal session.",["Date","2023-06-26T12:00:00.000Z"],{"id":18,"collection":19},"__ASTRO_IMAGE_../../assets/posts/manage-terminal-sessions-with-tmux.jpeg","__ASTRO_IMAGE_../../assets/posts/manage-terminal-sessions-with-tmux-thumb.jpeg",{"ref":338,"position":339},{"id":146,"collection":147},5,"[tmux](https://github.com/tmux/tmux/wiki) is a terminal multiplexer that allows you to create and manage multiple terminal sessions within a single window. It enables you to run multiple programs or shell sessions simultaneously, switch between them easily, and detach and reattach sessions, even if you disconnect from the terminal.\n\n## Install\n\nTo install tmux, run the following brew command.\n\n```sh\nbrew install tmux\n```\n\n## Creating sessions\n\ntmux works by creating sessions, you can create your first session by running the following command.\n\n```sh\ntmux new -s \"hello-world\"\n```\n\nYou'll notice a green bar at the bottom of your terminal with the words `hello-world` to the far right, this is the tmux status bar!\n\nTo detach from tmux, run the detach command.\n\n```sh\ntmux detach-client\n```\n\nYou'll notice the green bar at the bottom disappears, but tmux is still running in the background! To reattach, you can run the attach command.\n\n```sh\ntmux attach\n```\n\nAnd just like that, you will end up back where you were before. Detaching from tmux sessions becomes very powerful as you create multiple sessions at the same time. Unlike graphical applications, like VSCode, tmux runs like a server and allows you to switch between different sessions quickly and easily with very little overhead on your computer. We'll get more into that later.\n\n## Window commands\n\n`tmux` commands are driven by the prefix key binding which is `ctrl+b`. Press `ctrl+b` (aka `\u003Cprefix>`) and then `c` to \"create\" a tmux window. Think of these as macOS tabs that are common in browsers and file managers.\n\nWindows can then be split into panes with `\u003Cprefix>%` and killed with `\u003Cprefix>x`. Note, when there are multiple panes the kill command will close the active pane, if there is only one pane the kill command will close the window entirely and switch to the previous window in the session, if there are no windows left it will kill the entire session.\n\nThe prefix key is my least favorite feature of tmux. Thankfully, Alacritty allows us to create custom keybindings to recreate common macOS-style shortcuts to make tmux much easier to use. Add the following to your `alacritty.yml`.\n\n```yaml title=\"~/.config/alacritty/alacritty.yml\"\nkey_bindings:\n  - { key: E, mods: Command, chars: \"\\x02\\\"\" } # split tmux window vertically\n  - { key: E, mods: Command|Shift, chars: \"\\x02%\" } # split tmux window horizontally\n  - { key: T, mods: Command, chars: \"\\x02c\" } # create a new tmux window\n  - { key: W, mods: Command, chars: \"\\x02x\" } # kill the current pane\n  - { key: Tab, mods: Control, chars: \"\\x02n\" } # switch to next tmux window\n  - { key: LBracket, mods: Command|Shift, chars: \"\\x02p\" } # switch to next tmux window\n  - { key: RBracket, mods: Command|Shift, chars: \"\\x02n\" } # switch to previous tmux window\n```\n\nGive these a try! These familiar shortcuts, like `cmd+t` will create a new tmux window and `ctrl+w` will close it. I have a whole video explaining all my [macOS Keyboard Shortcuts for tmux](/posts/macos-keyboard-shortcuts-for-tmux) if you want to learn more about how this works.\n\n## Configuration\n\nI think tmux isn't very pretty by default, and there are multiple options I prefer to change. All of tmux's configuration is stored in a `~/.config/tmux/tmux.conf` file. Create it and add the following options.\n\n```sh title=\"~/.config/tmux/tmux.conf\"\nset -g base-index 1          # start indexing windows at 1 instead of 0\nset -g detach-on-destroy off # don't exit from tmux when closing a session\nset -g escape-time 0         # zero-out escape time delay\nset -g history-limit 1000000 # increase history size (from 2,000)\nset -g mouse on              # enable mouse support\nset -g renumber-windows on   # renumber all windows when any window is closed\nset -g set-clipboard on      # use system clipboard\nset -g status-interval 3     # update the status bar every 3 seconds\nbind-key x kill-pane         # skip \"kill-pane 1? (y/n)\" prompt\n```\n\nTo style the tmux status bar, I prefer a transparent, top-aligned bar, with minimal items display.\n\n```sh title=\"~/.config/tmux/tmux.conf\"\nset -g status-left \"#[fg=blue,bold]#S\" # session name\nset -g status-left-length 200          # increase length (from 10)\nset -g status-position top             # macOS / darwin style\nset -g status-right ''                 # blank\nset -g status-style 'bg=default'       # transparent\n```\n\nThe session name is style using `#[fg=blue,bold]` to make it blue and bolded to match our [starship](/posts/shell-customization-with-starship) configuration and create a more consistent look.\n\n### Plugins\n\n`tmux` plugins can be managed by [tpm, the tmux plugin manager](https://github.com/tmux-plugins/tpm). To install it you first have to clone tpm to your machine.\n\n```sh\ngit clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\n```\n\nAdd the following to your tmux config file.\n\n```sh title=\"~/.config/tmux/tmux.conf\"\n# List of plugins\nset -g @plugin 'tmux-plugins/tpm'\nset -g @plugin 'joshmedeski/tmux-fzf-url'\n\n# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)\nrun '~/.tmux/plugins/tpm/tpm'\n```\n\nSave the file and run `\u003Cprefix>I` to install the tmux plugins.\n\n### Open URLs\n\nNotice in the snippet above a `joshmedeski/tmux-fzf-url` plugin was added. This plugin allows you to open URLS visible in your tmux buffer. Once installed, you will need fzf installed to use it.\n\n```sh\nbrew install fzf\n```\n\n`\u003Cprefix>u` will open a fzf window that lists all available URLs that can be opened. Including GitHub style strings (\"username/repo\")! But as mentioned earlier, you can add an Alacritty keybinding to map this command to `cmd+o`.\n\n```yaml title=\"~/.config/alacritty/alacritty.yml\"\nkey_bindings:\n  # ... existing keybindings\n  - { key: O, mods: Command, chars: \"\\x02u\" } # open URLs 'joshmedeski/tmux-fzf-url'\n```\n\n### Conclusion\n\n`tmux` is extremely powerful. We covered the basic commands for creating sessions, configuring options, setting up macOS shortcuts with Alacritty, and adding your first plugin. There is much more to cover so I recommend checking out my other content on tmux, like [Smart tmux sessions with zoxide and fzf ](/posts/smart-tmux-sessions-with-zoxide-and-fzf). You can also run `man tmux` in the terminal to open the tmux manual and dive deep into everything tmux has to offer.","src/data/posts/manage-terminal-sessions-with-tmux.mdx",[343,344],"../../assets/posts/manage-terminal-sessions-with-tmux.jpeg","../../assets/posts/manage-terminal-sessions-with-tmux-thumb.jpeg","1fce4fec45c4ccea","more-fun-in-the-terminal-with-wezterm",{"id":346,"data":348,"body":356,"filePath":357,"assetImports":358,"digest":360,"deferredRender":28},{"title":349,"description":350,"pubDate":351,"category":352,"duration":353,"heroImage":354,"youtubeUrl":355},"More fun in the terminal with Wezterm!","Wezterm is a my new favorite terminal emulator. It's been fun to create",["Date","2023-12-14T16:00:00.000Z"],{"id":18,"collection":19},"05:13","__ASTRO_IMAGE_../../assets/posts/more-fun-in-the-terminal-with-wezterm.jpeg","https://www.youtube.com/embed/hqP0XdB7VcA","Wezterm is a my new favorite terminal emulator. It's been fun to create some customizations for it using the lua programming language. In this video, I'll show you how I swap out background images, fonts, and color schemes using lua. I'll also show you a tip for how to get rid of the notch if you have a MacBook.\n\nHere's the helper function I created to get a random entry from a table:\n\n```lua title=\".config/wezterm/utils/helpers.lua\"\nlocal wezterm = require(\"wezterm\")\nlocal M = {}\n\nM.get_random_entry = function(tbl)\n  local keys = {}\n  for key, _ in ipairs(tbl) do\n    table.insert(keys, key)\n  end\n  local randomKey = keys[math.random(1, #keys)]\n  return tbl[randomKey]\nend\n\nreturn M\n```\n\nYou can view all of my Wezterm configure here:\n[github.com/joshmedeski/dotfiles/.config/wezterm](https://github.com/joshmedeski/dotfiles/tree/main/.config/wezterm)\n\nIf you want to learn more about Wezterm, check out the official docs:\n[wezfurlong.org/wezterm](https://wezfurlong.org/wezterm/)","src/data/posts/more-fun-in-the-terminal-with-wezterm.mdx",[359],"../../assets/posts/more-fun-in-the-terminal-with-wezterm.jpeg","3083b37002d3cb91","mark-huggins-dev-workflow",{"id":361,"data":363,"body":371,"filePath":372,"assetImports":373,"digest":375,"deferredRender":28},{"title":364,"description":365,"pubDate":366,"category":367,"duration":368,"heroImage":369,"youtubeUrl":370},"Mark Huggins' Dev Workflow","Mark shares his Neovim and tmux dev workflow and Moonlander keyboard layout. I share my dev workflow as well.",["Date","2023-05-20T16:00:00.000Z"],{"id":51,"collection":19},"50:13","__ASTRO_IMAGE_../../assets/posts/mark-huggins-dev-workflow.jpeg","https://www.youtube.com/embed/9Zq3pyufesI","Mark and I talk about our Moonlander keyboard layouts and developer workflows using tmux and neovim including plugins and shortcuts we used for coding and navigating our environments. We mention various tools and plugins that we had use to customize our workflows, such as LazyVim, gitmux, and fzf. We also discuss how we use copilot in Neovim, and why we prefer minimal setups. Our conversation emphasize the importance of continually experimenting with and adapting our workflows to find what works best for us.\n\n## Mark's Stuff\n\n\n\u003CGhRepo repo=\"mhuggins7278/dotfiles\" />\n\n\u003Cdiv style=\"padding-top: 60%; position: relative;\">\n  \u003Ciframe\n    src=\"https://configure.zsa.io/embed/moonlander/layouts/9qQGW/latest/0\"\n    style=\"border: 0; height: 100%; left: 0; position: absolute; top: 0; width: 100%\"\n  >\u003C/iframe>\n\u003C/div>\n\n## Josh's Stuff\n\n\u003CGhRepo repo=\"joshmedeski/dotfiles\" />\n\n\u003Cdiv style=\"padding-top: 60%; position: relative;\">\n  \u003Ciframe\n    src=\"https://configure.zsa.io/embed/moonlander/layouts/3qe37/latest/0\"\n    style=\"border: 0; height: 100%; left: 0; position: absolute; top: 0; width: 100%\"\n  >\u003C/iframe>\n\u003C/div>\n\n## neovim\n\n- [LazyVim - neovim setup](https://www.lazyvim.org/)\n- [LunarVim](https://www.lunarvim.org/)\n\u003CGhRepo repo=\"nvim-lua/kickstart.nvim\" />\n\n\u003CGhRepo repo=\"ThePrimeagen/harpoon\" />\n\u003CGhRepo repo=\"zbirenbaum/copilot-cmp\" />\n\n## tmux\n\n- [macOS Keyboard Shortcuts for tmux - video](https://www.joshmedeski.com/posts/macos-keyboard-shortcuts-for-tmux/)\n- [Smart tmux sessions with zoxide and fzf - video](https://www.joshmedeski.com/posts/smart-tmux-sessions-with-zoxide-and-fzf/)\n- [t-smart-tmux-session-manager - tmux plugin](https://github.com/joshmedeski/t-smart-tmux-session-manager)\n- [gitmux - git for tmux status bar](https://github.com/arl/gitmux)\n- [tmux-fzf-url - tmux plugin](https://github.com/joshmedeski/tmux-fzf-url)\n- [tmux Nerd Font window name plugin](https://www.joshmedeski.com/posts/tmux-nerd-font-window-name-plugin/)\n- [Popup history with tmux and fzf - popup](https://www.joshmedeski.com/posts/popup-history-with-tmux-and-fzf/)\n\n## Terminal\n\n- [starship - shell prompt](https://starship.rs/)\n- [A Pretty Terminal in 5 minutes! - video](https://www.youtube.com/watch?v=Mu4frtvHPOY)\n- [lazygit - git terminal user interface (TUI)](https://github.com/jesseduffield/lazygit)","src/data/posts/mark-huggins-dev-workflow.mdx",[374],"../../assets/posts/mark-huggins-dev-workflow.jpeg","08727d4cd0ad687e","manage-macos-packages-with-homebrew",{"id":376,"data":378,"body":388,"filePath":389,"assetImports":390,"digest":393,"deferredRender":28},{"title":379,"description":380,"pubDate":381,"category":382,"heroImage":383,"thumbnail":384,"guide":385},"Manage macOS packages with Homebrew","Homebrew is a package manager for macOS that allows users to easily install and manage packages and libraries.",["Date","2023-06-26T12:00:00.000Z"],{"id":18,"collection":19},"__ASTRO_IMAGE_../../assets/posts/manage-macos-packages-with-homebrew.jpeg","__ASTRO_IMAGE_../../assets/posts/manage-macos-packages-with-homebrew-thumb.jpeg",{"ref":386,"position":387},{"id":146,"collection":147},1,"[Homebrew](https://brew.sh/) is a package manager for macOS that allows users to easily install and manage software packages and libraries. It uses a command-line interface and a simple formula system to download and install packages from pre-configured sources, making it easy to keep software up to date and manage dependencies. To install Homebrew, open Terminal and run the following command:\n\n```sh\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nThis will download and run the Homebrew installation script. Once installed, you can use Homebrew to install packages by running commands like `brew install \u003Cpackage>`. For example, to install the `wget` package, you would run:\n\n```sh\nbrew install wget\n```\n\nIf you're unsure of the name of the package, or if it is available from homebrew, you can search for it using `brew search \u003Cpackage>`, including applications like Google Chrome.\n\n```sh\nbrew search chrome\n# returns the following results\n==> Formulae\nchrome-cli   chrome-export    chroma     rome  chrony\n==> Casks\nchrome-devtools    chromedriver      epichrome   mkchromecast\nchrome-remote-desktop-host      chromium     google-chrome\n\n```\n\n`google-chrome` is listed under the `Casks` section, which means it is a graphical application. To install it, you run the install command with the cask flag:\n\n```sh\nbrew install --cask google-chrome\n```\n\n## Adding a custom tap\n\nA Homebrew tap is a repository of additional formulae that are not included in the main Homebrew repository. Adding a custom Homebrew tap allows you to install software that is not available in the main repository. Here's how to add a custom Homebrew tap:\n\n```sh\nbrew install arl/arl/gitmux # owner/tap/formulae\n```\n\nYou can also create your own tap to add homebrew support to your favorite packages and applications.\n\n## Keeping Homebrew up-to-date\n\nTo keep your packages and libraries up-to-date, Homebrew offers multiple commands. I recommend running the following commands in this order to ensure you have the latest versions of your packages and libraries.\n\n1. `brew update` updates the local Homebrew repository with the latest version of package information from the remote repository. This ensures that you have the latest versions and dependencies of packages available to install or upgrade on your system.\n2. `brew outdated` lists all installed packages that have a newer version available in the remote repository. This command helps you identify which packages are outdated and need to be updated. This is optional but provides a preview of how many packages are going to update when running the next command.\n3. `brew upgrade` upgrades all outdated packages installed on your system to their latest versions available in the remote repository. This command updates the packages to their latest versions, including all their dependencies, and ensures that your system has the most up-to-date software.\n4. `brew cleanup --prune=all` removes old versions of installed packages and their associated files, freeing up disk space. The `--prune=all` option removes all packages and their associated files, including those that are currently installed and those that are no longer needed. This command is useful when you want to reclaim disk space on your system by removing old and unused packages. However, it is recommended to use this command with caution, as it can potentially remove files that are still needed by other packages or applications.\n5. `brew doctor` diagnoses potential issues with your Homebrew installation. This command checks your Homebrew installation for common issues, such as outdated packages, broken symlinks, and other configuration problems. It also provides suggestions on how to fix any issues that it finds.\n\n## Update script\n\nI have wrapped everything you need to keep homebrew up-to-date. I will typically run this script a few times per week. Here's how to create it.\n\nThe only dependency is a CLI tool called gum, which is a tool for glamorous shell scripts. Install it running the following command.\n\n```sh\nbrew install gum\n```\n\nThen, create a file name `b` in the `~/.config/bin` directory. I find this to be a useful place to create custom scripts to automate repetitive tasks.\n\n```sh\nmkdir -p ~/.config/bin && touch ~/.config/bin/b\n```\n\nThen, add the following content to the file.\n\n```sh title=\"~/.config/bin/b\"\n#!/usr/bin/env bash\n\ngum style \\\n  --foreground 12 --border-foreground 12 --border double \\\n  --align center --width 50 --margin \"1 0\" --padding \"1 2\" \\\n  '██████╗ ██████╗ ███████╗██╗    ██╗\n██╔══██╗██╔══██╗██╔════╝██║    ██║\n██████╔╝██████╔╝█████╗  ██║ █╗ ██║\n██╔══██╗██╔══██╗██╔══╝  ██║███╗██║\n██████╔╝██║  ██║███████╗╚███╔███╔╝\n╚═════╝ ╚═╝  ╚═╝╚══════╝ ╚══╝╚══╝'\n\ngum spin --show-output --spinner minidot --title \"Updating brew...\" -- brew update\nprintf \"\\n\"\n\nOUTDATED=$(gum spin --show-output --spinner minidot --title \"Checking for outdated brew packages\" -- brew outdated)\n\nif [[ -n \"$OUTDATED\" ]]; then\n  echo \"$OUTDATED\"\n  gum confirm --selected.background=2 --selected.foreground=0 \"Upgrade the outdated formulae above?\" && brew upgrade\n  printf \"\\n\"\n  brew cleanup --prune=all\n  printf \"\\n\"\nelse\n  echo \"All brew packages are up to date.\"\n  printf \"\\n\"\nfi\n\ngum spin --show-output --spinner minidot --title \"Checking for brew issues...\" -- brew doctor\n```\n\nYou need to make the `b` script executable, add the `~/.config/bin` directory to your path, on the default macOS shell, then source the zshrc for the PATH to reflect the new directory.\n\n```sh\nchmod +x ~/.config/bin/b\necho 'export PATH=\"~/.config/bin:$PATH\"' >> ~/.zshrc\nsource ~/.zshrc\n```\n\nFinally, you can run the `b` command in your terminal to ensure you have the latest versions of my favorite packages and applications which includes bug fixes, security updates, and new features. But be careful, if there are breaking changes to a package, you may need to update your configuration to support the new version. You can visit the package's release notes to see what has changed.\n\n## Summary\n\nIn summary, Homebrew is a package manager for macOS that simplifies the installation and management of software packages and libraries. It uses a command-line interface and a simple formula system to download and install packages from pre-configured sources using `brew install`, making it easy to keep software up-to-date and manage dependencies. To add a custom tap, you can use the `brew tap` command to add a repository of additional formulae that are not included in the main Homebrew repository. To keep Homebrew up-to-date, you can use `brew update`, `brew outdated`, `brew upgrade`, `brew cleanup`, and `brew doctor` commands. I also showed you a simple `b` script that automates these commands for an easy way to stay up-to-date.","src/data/posts/manage-macos-packages-with-homebrew.mdx",[391,392],"../../assets/posts/manage-macos-packages-with-homebrew.jpeg","../../assets/posts/manage-macos-packages-with-homebrew-thumb.jpeg","b4116b0bee421a16","navigate-the-web-with-vim",{"id":394,"data":396,"body":402,"filePath":403,"assetImports":404,"digest":406,"deferredRender":28},{"title":397,"description":398,"pubDate":399,"category":400,"heroImage":401},"Navigate the Web with Vim Keybindings","I've been using a tool for probably over a year now that helps let's me navigate the web with Vim. It's a chrome extension",["Date","2016-03-06T23:59:00.169Z"],{"id":113,"collection":19},"__ASTRO_IMAGE_../../assets/posts/navigate-the-web-with-vim/navigate-the-web-with-vim.jpeg","I have been using a tool for probably over a year now that helps let's me navigate the web with Vim. It's a simple chrome extension called \u003Ca href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en\" target=\"_blank\" rel=\"noopener\">Vimium\u003C/a>, it can also be found be installed on \u003Ca href=\"https://addons.mozilla.org/en-US/firefox/addon/vimium/\" target=\"_blank\" rel=\"noopener\">Firefox\u003C/a> or \u003Ca href=\"https://github.com/guyht/vimari\" target=\"_blank\" rel=\"noopener\">Safari\u003C/a>. The tools makes my transition from my code editor (which is currently \u003Ca href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">vscode\u003C/a>) and the web a breeze. I'm able to open and close tabs, navigation through a website, and more using Vim's single keyboard commands.\n\n## Vimium Commands\n\nHere are all of the commands:\n\nimport help from \"../../assets/posts/navigate-the-web-with-vim/vimium-help-screen.jpg\";\n\n\u003CImage src={help} alt=\"Vimium help screen\" width={828} height={605} />\n\nHere are some of the commands I use the most everyday:\n\n- **gg/G** - the quickest way to get to the top and bottom of any page.\n- **x** - close a tab with one keystroke.\n- **t** - create a new tab.\n- **d/u** - go up and down the page. You'll find this similar to the ctrl-d and ctrl-u in Vim (just without a modifier key!)\n\n## Opening Links\n\nOne of my favorite features is the \"f\" commands for opening links, it gives you a visual buffer for all of the visible links on the page:\n\nimport fCommand from \"../../assets/posts/navigate-the-web-with-vim/vimium-f-command.jpg\";\n\n\u003CImage src={fCommand} alt=\"Vimium f command\" width={815} height={611} />\n\nI used to use a similar plugin in my old code editor called \u003Ca href=\"https://atom.io/packages/jumpy\" target=\"_blank\" rel=\"noopener\">Jumpy\u003C/a>. For me, it's a really easy way to keep from having to use the mouse so much on the web.\n\n## Final Thoughts\n\nOverall I feel lost if Vimium is missing. It's just so easy to run around the browser. I'd definitely recommend it to a skilled Vim user and if you're up for the challenge I think non-vim users would find it useful as well.\n\nOf course like any tool, it took me awhile to get used to some of the commands (as they differ from standard Vim), but once I got used to them, I found this tool a great way to navigate the web with vim.\n\nHere are some final points I'd give about using this tool:\n\n- Don't try to learn all the commands at once.\n- Start with just a couple of commands.\n- Regularly review the help panel (by typing \"?\") to refresh your memory.\n- Disable Vimium on websites that have their own keyboard shortcuts (Trello is a good example).\n- Practice your Vim! I think Vim is a great tool that is helpful on and off the web.\n- Mix and match shorcuts - I personally still use \u003Cem>cmd-t\u003C/em> and \u003Cem>cmd-shift-]\u003C/em> all the time. I don't think Vimium needs to replace those shortcuts, it just gives you more options and opportunities to move around quicker on Chrome.\n- Do what feels right - if you don't like Vimium or find it killing your productivity, drop it.\n\nI hope this tool to navigate the web with Vim can help you in some of the ways it's helped me.\n\n\u003Ca\n  href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en\"\n  target=\"_blank\"\n  rel=\"noopener\"\n>\n  Download the Chrome Extension - Vimium\n\u003C/a>","src/data/posts/navigate-the-web-with-vim.mdx",[405],"../../assets/posts/navigate-the-web-with-vim/navigate-the-web-with-vim.jpeg","d10e4533bd03f7f6","moving-from-mackup-to-stow",{"id":407,"data":409,"body":415,"filePath":416,"assetImports":417,"digest":419,"deferredRender":28},{"title":410,"description":411,"pubDate":412,"category":413,"heroImage":414},"Switching from Mackup to Stow Dotfiles Manager","My journey to a new, simpler, dotfiles manager from Mackup to GNU Stow.",["Date","2024-04-15T09:00:00.000Z"],{"id":18,"collection":19},"__ASTRO_IMAGE_../../assets/posts/switching-from-mackup-to-stow-dotfiles-manager.jpeg","For many years, I used mackup to manage my dotfiles. However, its opinionated and complicated system started feeling more burdensome than beneficial. Craving simplicity, I switched gears towards GNU Stow. This article chronicles my transition from Mackup to the minimalist environment of Stow, demonstrating how simplicity can streamline your workflow.\n\nAs someone who spends all of their time in the terminal. It is important for me to able to manage my dotfiles. Symbolic links are the easiest way to achieve this so it can commit and push changes to a single repository.\n\n## The Challenge with Mackup\n\nMackup is a popular dotfiles manager that allows users to synchronize application settings across multiple devices. It is a powerful tool that can back up and restore your dotfiles to cloud storage services like Dropbox and Google Drive. However, as I delved deeper into Mackup, I found its complexity and opinionated nature to be a hindrance.\n\nAt a high level, Mackup would copy the file in the application's configuration directory to a backup directory. It would then create a symbolic link to the backup file in the application's configuration directory. This process was repeated for each application, using a configuration file to determine which files to back up. This approach was effective but came with its own set of challenges. Especially when something went wrong, it was difficult to troubleshoot and fix.\n\nOver the years, I saw many people complain about Mackup's complexity which often caused confusion. I also saw community members suggest features and improvements to Mackup, which were never implemented. This led me to question the sustainability of using Mackup as my dotfiles manager. I even reached out the moderator of the Mackup repository to see if I could help maintain the project. However, I never received a response.\n\nThis left me wanting more from my dotfiles manager. There are many choices out there but I craved something simple, strait-forward, and easy to use. Which is when I discovered GNU Stow.\n\n## Introducing GNU Stow\n\nGNU Stow is a symlink farm manager which takes dotfiles from my git repository and symlink them to the correct location. It is a simple and lightweight tool that allows me to manage my dotfiles with ease. This requires that I have my dotfiles in a specific directory structure, but this is a small price to pay for the simplicity that Stow provides. Plus after a decade of being used to dotfiles, the idea of starting from a repo and sending my dotfiles to the correct location was all I needed.\n\nStow works as one step for me. I can clone my dotfiles repo and run `stow -t ~` and all my dotfiles will be symlinked to the correct location. This is a much simpler process than Mackup and has been a game changer for me.\n\nStow is also unopinionated (unlike Mackup). I have control to symlink what I want and where to place them. This has been a huge benefit for me as I can now manage my dotfiles the way I want to and no longer have to work against the tool, or add boilerplate configuration logic to extend it to my needs (like I did with Mackup).\n\n## Moving Dotfiles from Mackup to Stow\n\nSince I had already moved all my dotfiles to a git repository, the transition from Mackup to Stow was relatively straightforward. I followed these steps to migrate my dotfiles. Which only took a few minutes.\n\n1. Run `mackup uninstall` to remove all the symlinks created by Mackup\n2. Remove all the config files and directories in my home diretory\n3. Install stow (`brew install stow`)\n4. Run `stow -t ~` in my dotfiles directory\n\nThat's it! Because Mackup and Stow both use symlinks and store files in the same structure, the transition was seamless. I was able to maintain my existing dotfiles structure and continue managing them with Stow. The added bonus was that I could now manage my dotfiles with greater flexibility and control.\n\n## Conclusion\n\nI spent many weeks researching, contemplating, and asking for advice for which tool to transition to. There are many interesting and powerful tools out there for managing dotfiles. I was unhappy with Mackup's complexity and stale development, so I decided to switch to Stow. The transition was smooth, and I am now enjoying the simplicity and flexibility that Stow provides which has made my workflow more efficient.\n\nStow is a great tool for managing dotfiles. It is simple, lightweight, and unopinionated. It allows me to manage my dotfiles the way I want to, without any unnecessary complexity. I am happy with my decision to switch to Stow and would recommend it to anyone looking for a simple and efficient way to manage their dotfiles.\n\n- [Check out GNU Stow](https://www.gnu.org/software/stow/)\n\nCheck out my dotfiles:\n\n\u003CGhRepo repo=\"joshmedeski/dotfiles\" />","src/data/posts/moving-from-mackup-to-stow.mdx",[418],"../../assets/posts/switching-from-mackup-to-stow-dotfiles-manager.jpeg","dc966ac34a5d76c2","optimizing-obsidian-for-content-creation",{"id":420,"data":422,"body":430,"filePath":431,"assetImports":432,"digest":434,"deferredRender":28},{"title":423,"description":424,"pubDate":425,"category":426,"duration":427,"heroImage":428,"youtubeUrl":429},"Optimizing Obsidian for Content Creation","A bunch of tips and best practices for getting the most out of Obsidian for content creation and digital gardening",["Date","2023-04-14T12:00:00.000Z"],{"id":51,"collection":19},"49:18","__ASTRO_IMAGE_../../assets/posts/optimizing-obsidian-for-content-creation.jpeg","https://www.youtube.com/embed/rm_BDdEPR8w","My friend, [Brandon Boswell](https://brandonkboswell.com/), recently sat down again with me. I'm in the process of adopting [Obsidian](https://obsidian.md/). We cover what Brandon has learned over the last 2 years of using Obsidian and some tips he’s found for finishing the creative process to actually deliver more content. We also cover a bunch of tips and best practices for getting the most out of Obsidian.","src/data/posts/optimizing-obsidian-for-content-creation.mdx",[433],"../../assets/posts/optimizing-obsidian-for-content-creation.jpeg","94fff6f8d6740a76","overcome-perfectionism",{"id":435,"data":437,"body":443,"filePath":444,"assetImports":445,"digest":447,"deferredRender":28},{"title":438,"description":439,"pubDate":440,"category":441,"heroImage":442},"3 Tips to Overcome Perfectionism","Perfectionism is stopping you from growing your business, building your cause, and doing what you love.",["Date","2014-04-20T08:00:00.169Z"],{"id":287,"collection":19},"__ASTRO_IMAGE_../../assets/posts/overcome-perfectionism/overcome-perfectionism-thumb.jpeg","Perfectionism is stopping you from growing your business, building your cause, and doing what you love. It's important to face this problem head on. Here are 3 tips to overcome perfectionism.\n\n## Get yourself out there\n\nMy advice to overcome perfectionism is remind yourself that nothing's perfect the first time around. You just have to get your product, opt-in, blog post, podcast, video, newsletter, book, performance out there and see what happens. Getting yourself out there is the first step.\n\n## People don't like perfect (be authentic instead)\n\nI've been working on a personal project for over 6 months now and I realize that people don't like perfect. In fact, authenticity is more important than perfection. It something is too \"perfect\" it comes off as too-good-to-be-true and unauthentic (or even sleazy). You have to do you best work and allow your flaws to show in order to win people's trust.\n\n## There is no \"RIGHT\" way\n\nThere is always more than one way to do something, and your never going to know which way is best for you until you make mistakes and learn the wrong way to do it.\n\n> I have not failed. I've just found 10,000 ways that won't work.\n>\n> \u003Ccite>Thomas Edison\u003C/cite>\n\nWell that's just a few ways for you to overcome perfectionism. Do you have any advice on this subject? Let me know in the comments below.","src/data/posts/overcome-perfectionism.mdx",[446],"../../assets/posts/overcome-perfectionism/overcome-perfectionism-thumb.jpeg","095386d7607c9148","popup-history-with-tmux-and-fzf",{"id":448,"data":450,"body":456,"filePath":457,"assetImports":458,"digest":460,"deferredRender":28},{"title":451,"description":452,"pubDate":453,"category":454,"heroImage":455},"Popup history with tmux and fzf","ctrl-r is a great keyboard shortcut for viewing your terminal history and rerun commands.",["Date","2020-12-30T12:00:00.000Z"],{"id":18,"collection":19},"__ASTRO_IMAGE_../../assets/posts/popup-history-with-tmux-and-fzf/popup-history-with-tmux-and-fzf.jpeg","Many times a minute I use the `ctrl-r` keyboard shortcut in my terminal to pull up my history. The [80/20 rule](https://en.wikipedia.org/wiki/Pareto_principle) states that 80% of the input comes from 20% of the output. Applying that principle to my activity in the terminal means the majority of commands I want to run I\n\nThankfully fzf wrote a [fzf-tmux script](https://github.com/junegunn/fzf/blob/master/bin/fzf-tmux) that makes it easy to integrate fzf with tmux.\n\nMake sure you have installed the keybindings for your shell (you'll run something like `/usr/local/opt/fzf/install` in macOS). After running that command your `\u003Cctrl-r>` command will be bound to your history.\n\nGoing one step further, tmux has [floating window support](https://github.com/tmux/tmux/issues/1842). To set your history to popup, add the following variables to your shell.\n\nHere's how to configure it depending on your shell:\n\n**Fish**\n\n```fish title=\"~/.config/fish/config.fish\"\nset -U FZF_CTRL_R_OPTS \"--reverse\"\nset -U FZF_TMUX_OPTS \"-p\"\n```\n\n**Bash/Zsh**\n\n```sh title=\"~/.bashrc or ~/.zshrc\"\nexport FZF_CTRL_R_OPTS=\"--reverse\"\nexport FZF_TMUX_OPTS=\"-p\"\n```\n\nThe `-p` flag will now change all `fzf_tmux` behavior to pop up instead of creating a separate pane.\n\nI chose to use `--reverse` on the `ctrl-r` options because I like the way it looks. I also added an optional preview flag bound to `?` as described in the [fzf key binding wiki](https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings#ctrl-r).\n\nI hope you like it! `fzf-tmux` with popup support has been a game-changer. I had some hesitations moving away from Visual Studio Code, mostly that tmux and neovim felt outdated when it came to visuals. But now, I'm liking this setup MORE than vscode and am excited to continue to tweak the system to be even more stylish and functional than any other IDE out there.\n\nThis is a simple change, but having a polish balanced screen makes all the difference for me, here it is one more time:\n\nimport image from \"../../assets/posts/popup-history-with-tmux-and-fzf/popup-history-with-tmux-and-fzf.jpeg\";\n\n\u003CImage\n  src={image}\n  alt=\"preview of history using fzf\"\n  class=\"overflow-hidden rounded-md shadow-md\"\n/>\n\nThanks for reading, I will continue to post tips and tricks for how to be more productive in the terminal and macOS.","src/data/posts/popup-history-with-tmux-and-fzf.mdx",[459],"../../assets/posts/popup-history-with-tmux-and-fzf/popup-history-with-tmux-and-fzf.jpeg","f5e09d9cccbf1558","quick-git-management-with-lazygit",{"id":461,"data":463,"body":473,"filePath":474,"assetImports":475,"digest":478,"deferredRender":28},{"title":464,"description":465,"pubDate":466,"category":467,"heroImage":468,"thumbnail":469,"guide":470},"Quick Git Management with Lazygit","Lazygit makes it quick to run git commands.",["Date","2023-06-26T12:00:00.000Z"],{"id":18,"collection":19},"__ASTRO_IMAGE_../../assets/posts/quick-git-management-with-lazygit.jpeg","__ASTRO_IMAGE_../../assets/posts/quick-git-management-with-lazygit-thumb.jpeg",{"ref":471,"position":472},{"id":146,"collection":147},7,"Git is a central part of the development workflow. It's important to have a good understanding of how it works and how to use it. [`lazygit`](https://github.com/jesseduffield/lazygit) is a terminal UI for git that makes it easy to run common git commands efficiently and with ease.\n\n\u003CGhRepo repo=\"jesseduffield/lazygit\" />\n\n## Install\n\nTo install lazygit, you guessed it, run the following homebrew command.\n\n```sh\nbrew install lazygit\n```\n\nIt can be opened by moving to a in your teriminal to a git repository and run the `lazygit` command. It will open a terminal UI that offers a lot of useful git commands. You can view the available commands by pressing `?`.\n\n![lazygit preview](../../assets/posts/quick-git-management-with-lazygit/lazygit-preview.png)\n\n### Custom shortcut\n\nAs mentioned in the [tmux intro](/posts/manage-terminal-sessions-with-tmux), we can setup lazygit to a custom macOS style shortcut `cmd+g`. This can be done by adding the following to your `~/.tmux.conf` file.\n\n```sh title=\"~/.config/tmux/tmux.conf\"\nbind g new-window -n 'lazygit' lazygit\n```\n\nThis will bind lazygit to `\u003Cprefix>g` in tmux. To map that to `cmd+g` add the following to your alacritty config file in the `key_bindings` section.\n\n```yaml title=\"~/.config/alacritty/alacritty.yml\"\nkey_bindings:\n  # ... existing keybindings\n  - { key: G, mods: Command, chars: \"\\x02g\" } # open git manager 'jesseduffield/lazygit'\n```\n\nNow, you can press `cmd+g` to open lazygit from anywhere in your terminal. You can press `q` while in lazygit to close it and return to wherever you where previously.\n\n## Configure\n\nFor macOS, the configuration is located in the user application support file. Here are a few basic configuration options.\n\n```yaml title=\"/Users/josh/Library/Application Support/lazygit/config.yml\"\ngui:\n  showIcons: true\n  theme:\n    activeBorderColor:\n      - magenta\n      - bold\n    inactiveBorderColor:\n      - black\n  showFileTree: true # for rendering changes files in a tree format\nos:\n  editCommand: \"nvim\"\n  editCommandTemplate: \"{{editor}} {{filename}}\"\nkeybinding:\n  universal:\n    quit: \"q\"\n```\n\n## How to use\n\nUsing lazygit is pretty straight forward. Here are a few common commands that I use often.\n\n- `space` toggles the selected file to the staging area\n- `c` opens the commit window, which lets you write a commit message and commit the staged changes\n- `P` pushes the current branch to the remote\n\nThere are many more commands including branch management, interacting with history, and more.\n\n## Conclusion\n\n`lazygit` is the quickest and easier way to manage git repositories. It's a great tool to have in your toolbelt and I highly recommend it. Binding to `cmd+g` makes it very quick to open and close. I recommend looking through the [lazygit wiki](https://github.com/jesseduffield/lazygit/wiki) to learn more about creating custom commands and more.","src/data/posts/quick-git-management-with-lazygit.mdx",[476,477],"../../assets/posts/quick-git-management-with-lazygit.jpeg","../../assets/posts/quick-git-management-with-lazygit-thumb.jpeg","d1d7296eae687a2c","setting-up-alacritty-for-a-fast-minimal-terminal-emulator",{"id":479,"data":481,"body":491,"filePath":492,"assetImports":493,"digest":496,"deferredRender":28},{"title":482,"description":483,"pubDate":484,"category":485,"heroImage":486,"thumbnail":487,"guide":488},"Set up Alacritty for a fast, minimal, terminal emulator","Alacritty is a terminal emulator for macOS that is fast, and can be configured to a minimal look.",["Date","2023-06-26T12:00:00.000Z"],{"id":18,"collection":19},"__ASTRO_IMAGE_../../assets/posts/set-up-alacritty-for-a-fast-minimal-terminal-emulator.jpeg","__ASTRO_IMAGE_../../assets/posts/set-up-alacritty-for-a-fast-minimal-terminal-emulator-thumb.jpeg",{"ref":489,"position":490},{"id":146,"collection":147},2,"Choosing a good terminal emulator is important because it serves as the foundation for a productive and efficient workflow in a command-line environment. A good terminal emulator should provide a fast and responsive interface, support for various customization options, and compatibility with a wide range of programs and tools. It should also have features such as keyboard shortcuts to help users streamline their tasks and navigate the command-line interface with ease. Overall, a good terminal emulator can greatly enhance the user's experience and make working in a command-line environment more efficient and enjoyable.\n\nI have experimented with many terminal emulators over the years, and have ultimately decided Alacritty to be the best choice for me. It is a GPU-accelerated terminal emulator which means it is incredibly fast and efficient. It also allows you to customize fonts and spacing, as well as a semi-transparent and borderless visual which providers a minimalist look which is the biggest selling point for me.\n\n## How to install\n\nThe easiest way to add the Alacritty terminal emulator is to your computer is to install it with Homebrew by running the following command.\n\n```sh\nbrew install --cask alacritty\n```\n\nIf you're not familiar with Homebrew check out [manage macOS packages with Homebrew](/posts/manage-macos-packages-with-homebrew).\n\n## How to configure\n\nThe Alacritty terminal emulator can be configured by a hidden TOML file in your home directory. Create a `~/.config/alacritty/alacritty.toml` file using the following command.\n\n```sh\nmkdir -p ~/.config/alacritty && touch ~/.config/alacritty/alacritty.toml\n```\n\nThis command first creates the `~/.config/alacritty` directory with the `-p` option, which creates any parent directories that do not exist. Then it creates the `alacritty.conf` file inside the `~/.config/alacritty` directory using the `touch` command.\n\nAlacritty can automatically reload the configuration file when the file is changed by setting the `live_config_reload`.\n\n```toml title=\"~/.config/alacritty/alacritty.toml\"\nlive_config_reload = true\n```\n\nThe `TERM` shell environmental variable specifies the type of terminal emulator that is being used to interact with the shell. It tells Alacritty what features and capabilities are available. I recommend using `xterm-256color`. `xterm` supports a wide range of terminal features, including color, mouse support, and support for multiple fonts and character sets. It also supports many of the standard terminal control sequences used by Unix-like systems. `256color` supports 256 colors by using an extended color palette, which allows for a greater range of colors to be displayed than the standard 16 colors supported by many terminals. This is achieved by using escape sequences to set the foreground and background colors of text.\n\nThe `TERM` variable is put under the `env` key which sets environment variables that are passed to the shell when Alacritty is launched.\n\n```toml title=\"~/.config/alacritty/alacritty.toml\"\n[env]\nTERM = \"xterm-256color\"\n```\n\nBy default, Alacritty looks the same as any other terminal emulators for macOS. But there are a handful of options that give it a semi-transparent minimalist look that I find aesthetically pleasing and unique.\n\n```toml title=\"~/.config/alacritty/alacritty.toml\"\n[window]\ndecorations = \"buttonless\"\ndynamic_padding = false\nopacity = 0.9\n\n[window.padding]\nx = 25\ny = 20\n```\n\nThe `buttonless` decorations key removes the macOS title bar and border, giving it a minimal and distraction-free look. The `opacity` key takes a value between `0-1` and makes the window semi-transparent. I've found that this value will vary based on your wallpaper. The `dynamic_padding` and `padding` keys offer hard-coded spacing between the end of the window and the content. I use predictable spacing with the values above.\n\n## Using a custom font\n\nOne of the most important customization features for any terminal emulator is picking and setting up a custom font! I'm a big fan of [Nerd Fonts](https://www.nerdfonts.com/) and I use lots of icons throughout my development environment. There are dozens of Nerd Fonts to choose from but as a macOS user I've prefer Apple's San Francisco font which is a neutral, flexible, sans-serif typeface used as the system font for all Apple devices. Thankfully, Aditya has patched the [SF Mono font with Nerd Font](https://github.com/epk/SF-Mono-Nerd-Font). You can download it via homebrew.\n\n```sh\nbrew install epk/epk/font-sf-mono-nerd-font\n```\n\nYou can download the \"JetBrainsMono Nerd Font\" font from the [Nerd Fonts website](https://www.nerdfonts.com/font-downloads).\n\nOnce the font is downloaded and installed, add the following to your config file:\n\n```toml title=\"~/.config/alacritty/alacritty.toml\"\n[font]\nsize = 20.0\n\n[font.bold]\nfamily = \"JetBrainsMono Nerd Font\"\nstyle = \"Heavy\"\n\n[font.bold_italic]\nfamily = \"JetBrainsMono Nerd Font\"\nstyle = \"Heavy Italic\"\n\n[font.italic]\nfamily = \"JetBrainsMono Nerd Font\"\nstyle = \"Medium Italic\"\n\n[font.normal]\nfamily = \"JetBrainsMono Nerd Font\"\nstyle = \"Medium\"\n```\n\nI prefer the font styles of `Medium` and `Heavy` to add more weight to the font, I find this helps with the make it more legible with the semi-transparent window. As well as a font size of `20`. These values can be adjusted that best fit your monitor and workflow.\n\n## Colorizing\n\nAnother important area to customize your development environment is choosing a color palette. A popular color pallet is [Catppuccin](https://github.com/catppuccin/alacritty), which is \"a community-driven pastel theme that aims to be the middle ground between low and high contrast themes\".\n\nTo get the Catppuccin themes, you can clone the TOML files to your Alacritty config directory.\n\n```sh\ngit clone https://github.com/catppuccin/alacritty.git ~/.config/alacritty/catppuccin\n```\n\nNext, Alacritty's `TOML` configuration supports the ability to import other `TOML` files to extend customization. You can add entries to a `import` key:\n\n```toml title=\"~/.config/alacritty/alacritty.toml\"\nimport = [\"~/.config/alacritty/catppuccin/catppuccin-mocha.toml\"]\n```\n\nIf you want to explore more color schemes, check out the [Alacritty Theme repository](https://github.com/alacritty/alacritty-theme).\n\n## Summary\n\nChoosing a good terminal emulator is important for productivity in a command-line environment. A good terminal emulator should be fast, customizable, and compatible with a variety of programs. Alacritty is a GPU-accelerated terminal emulator that allows for customization of fonts, spacing, and visual appearance. We have installed Alacritty, customized it's appearance with a `yaml` file including the terminal environment, window style, fonts, and colors.\n\nThis is just the starting point for customizing Alacrity. If you want to explore all of the features Alacritty has to offer, check out the [GitHub repository](https://github.com/alacritty/alacritty) for more info. You can also view my full Alacritty configuration [here](https://github.com/joshmedeski/dotfiles/blob/main/.config/alacritty/alacritty.toml).","src/data/posts/setting-up-alacritty-for-a-fast-minimal-terminal-emulator.mdx",[494,495],"../../assets/posts/set-up-alacritty-for-a-fast-minimal-terminal-emulator.jpeg","../../assets/posts/set-up-alacritty-for-a-fast-minimal-terminal-emulator-thumb.jpeg","e9f33c1053a5427e","setup-prisma-on-astro",{"id":497,"data":499,"body":505,"filePath":506,"assetImports":507,"digest":509,"deferredRender":28},{"title":500,"description":501,"pubDate":502,"category":503,"heroImage":504,"draft":28},"How to add Prisma to an Astro site","",["Date","2022-10-07T00:00:00.000Z"],{"id":82,"collection":19},"__ASTRO_IMAGE_../../assets/posts/setup-prisma-on-astro/setup-prisma-on-astro-thumbnail.jpeg","Intro\n\nWhy Sqlite is great for local development\n\n```astro\n---\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\nconst publishers = await prisma.publisher.findMany({\n  where: { imageUrl: { not: null } },\n  select: { imageUrl: true, name: true },\n});\n---\n\n\u003Csection class=\"bg-slate-300 px-4 py-8\">\n  \u003Cdiv class=\"mx-auto max-w-screen-lg text-center\">\n    \u003Ch2 class=\"mb-4 text-3xl font-bold\">As Seen On\u003C/h2>\n    \u003Csection class=\"flex flex-wrap items-center justify-center space-x-6\">\n      {\n        publishers.map(({ imageUrl, name }) => (\n          \u003CImage src={imageUrl} alt={name} class=\"max-h-[70px] max-w-[200px]\" />\n        ))\n      }\n    \u003C/section>\n    \u003Ca href=\"/appearances\" class=\"text-blue-500 hover:text-blue-700\">\n      View Appearances\n    \u003C/a>\n  \u003C/div>\n\u003C/section>\n```\n\n## Deploying with Netlify\n\nThe `binaryTargets` will make sure that the Netlify environment installs the proper dependencies to generate the Prisma client for the build. Make sure add them to your `schema.prisma` configuration.\n\n```prisma title=\"prism/schema.prisma\"\ngenerator client {\n  provider      = \"prisma-client-js\"\n  binaryTargets = [\"native\",\"darwin\",\"debian-openssl-1.1.x\"]\n}\n```\n\n```toml {4}\n[build.environment]\n  NPM_FLAGS = \"--version\" # prevent Netlify npm install\n[build]\n  command = 'npx pnpm i --store=node_modules/.pnpm-store && prisma migrate dev && npm run build'\n  publish = 'dist'\n```\n\nYou'll notice `prisma migrate dev` has been added after pnpm has installed the dependencies but before the site gets built. This will generate the Prisma client which is needed to build the site.\n\nI recommend pushing your site's code to GitHub and connecting the repository to Netlify so when you push to the `main` branch your site gets automatically deployed! You can also open pull requests and get preview URLs before you site goes live.\n\n## Summary\n\nSo that's it! We've gone over how to setup and use Prisma an Astro using a SQlite database for easier development and quick deployments through Netlify.","src/data/posts/setup-prisma-on-astro.mdx",[508],"../../assets/posts/setup-prisma-on-astro/setup-prisma-on-astro-thumbnail.jpeg","c03c38af4d22f9dd","set-up-fish-the-user-friendly-interactive-shell",{"id":510,"data":512,"body":522,"filePath":523,"assetImports":524,"digest":527,"deferredRender":28},{"title":513,"description":514,"pubDate":515,"category":516,"heroImage":517,"thumbnail":518,"guide":519},"Set up fish, the user-friendly interactive shell","Fish (Friendly Interactive SHell) is a Unix shell designed to be user-friendly and interactive. It features syntax highlighting, autosuggestions",["Date","2023-06-26T12:00:00.000Z"],{"id":18,"collection":19},"__ASTRO_IMAGE_../../assets/posts/get-started-with-fish-the-smart-and-user-friendly-shell.jpeg","__ASTRO_IMAGE_../../assets/posts/get-started-with-fish-the-smart-and-user-friendly-shell-thumb.jpeg",{"ref":520,"position":521},{"id":146,"collection":147},3,"Fish (Friendly Interactive SHell) is a Unix shell designed to be user-friendly and interactive. It features syntax highlighting, autosuggestions, and a built-in help system, among other features. Fish aims to be more intuitive and easier to use than traditional Unix shells like Bash, while still providing powerful scripting capabilities. Modern macOS computers ship with zsh as the default shell, you can check out [Why I Switched from zsh to fish](/posts/why-i-switched-from-zsh-to-fish) but the main reasons are the speed, simplicity, autosuggestions and vim mode that the fish shell offers.\n\n## Installing fish\n\nFish does not come pre-installed on macOS, you have to install it with Homebrew by running the following command in the terminal.\n\n```sh\nbrew install fish\n```\n\nIf you're not familiar with Homebrew, check out [Managing macOS packages with Homebrew](/posts/manage-macos-packages-with-homebrew).\n\n## Making fish your default shell\n\nNow that the fish shell is installed, you have to manually change the default shell by completing the following steps.\n\nFirst, you will need to get the path to the fish shell executable. If you're unfamiliar with how executables in the terminal work, I recommend checking out [What is the terminal?](/posts/what-is-the-terminal). Run the following `which` command.\n\n```sh\nwhich fish\n```\n\nThe command will output something similar to `/opt/homebrew/bin/fish`. Copy the value from your terminal and add it to the `/etc/shells` file. You'll want to edit the file using the `sudo` command, since this is an system-level file that lists valid login shells for user accounts. Here is how to update it using `vi`.\n\n```sh\nsudo vi /etc/shells\n```\n\nEnter your user password to open the file then add the fish shell's path as an new line in the file and save it.\n\n```sh title=\"/etc/shells\"\n# List of acceptable shells for chpass(1).\n# Ftpd will not allow users to connect who are not using\n# one of these shells.\n\n/opt/homebrew/bin/fish # use output from `which fish`\n/bin/bash\n/bin/csh\n/bin/dash\n/bin/ksh\n/bin/sh\n/bin/tcsh\n/bin/zsh\n```\n\nIf you're unfamiliar with `vi`, I recommend running `vimtutor` in your terminal which will guide you through the basics of how to edit text from inside the terminal.\n\nNow that you've added fish as a valid login shell for macOS, you can run the `chsh` (change shell) command to change the default login shell.\n\nCopy the command below and run all three commands at once to quickly change your default shell to fish.\n\n```sh\ncd ~\nbasename $(pwd) | pbcopy\nchsh -s /opt/homebrew/bin/fish $(pbpaste)\n```\n\nYou may be prompted, again, to enter your user password and when the command is completed your login shell is now switched to fish. In order for your changes to take effect, you'll need to log out and log back in to your user account. I recommend you **restart your computer** for good measure. When you log back in fish will be your default shell, congrats!\n\n## Configuring fish\n\nFish configuration is written in [its own scripting language](https://fishshell.com/docs/current/language.html#language). The entry point for configuring the fish shell is the `config.fish` file which can be created with the following command.\n\n```sh\nmkdir -p ~/.config/fish && touch ~/.config/fish/config.fish\n```\n\nThis command first creates the `~/.config/fish` directory with the `-p` option, which creates any parent directories that do not exist. Then it creates the `config.fish` file inside the `~/.config/fish` directory using the `touch` command. Note: all of fish's configuration files are stored in `~/.config/fish` more of which will explore later.\n\n### Configure homebrew\n\nI highly recommend you [Manage macOS packages with Homebrew](/posts/manage-macos-packages-with-homebrew). Add the following eval code to your config file to configure homebrew with the fish shell.\n\n```fish title=\"~/.config/fish/config.fish\"\neval (/opt/homebrew/bin/brew shellenv)\n```\n\n**Note:** Evaluating a command in the shell is typically done with `$(cmd)` but fish uses `(/cmd)` instead, dropping in the `$`. Some developers I've talked have chosen not to use fish because of the subtle syntax differences from more traditional shells, but I think it's worth it.\n\n### Add directories to `PATH`\n\nIn fish, the `fish_add_path` function is used to add directories to the `PATH` environment variable. Adding directories to your system's `PATH` environment variable allows you to run programs located in those directories from anywhere on your system without specifying the full path. By doing so, you extend the list of directories that the shell searches for executables, making it more convenient to run programs and execute commands.\n\nTo add support for Homebrew executables to the fish shell, add the following lines to your `~/.config.fish` file.\n\n```fish title=\"~/.config/fish/config.fish\"\nfish_add_path ~/.config/bin\n```\n\nI recommend creating a `~/.config/bin` directory to store any custom scripts you make come up to improve your workflow or automate tasks.\n\n### Setting environment variables\n\nIn the Fish shell, the `set` command is used to create and modify shell variables. Shell variables are used to store values that can be referenced and reused throughout a shell session or script. Here are some common variables that are helpful.\n\n```fish title=\"~/.config/fish/config.fish\"\nset -U fish_greeting # disable fish greeting\nset -U fish_key_bindings fish_vi_key_bindings\n```\n\nThe `-U` flag is used with the `set` command to create or modify a universal variable. Universal variables are similar to regular variables, but they have a global scope and can be accessed from any shell session or script.\n\nThe `fish_greeting` variable is used to customize the greeting message that is displayed when a new shell session is started. By default, the greeting message includes the Fish version number and a welcome message. Since I am constantly spinning up new shells in my development workflow, I prefer to disable the fish greeting by setting it with not value.\n\nThe `fish_vi_key_bindings` variable allows you to hit escape while writing a command in fish to switch to a vi-mode to easily manipulate your command before running it. Just like vi, you can hit `i` to get back to insert mode.\nThere are many other variables you can set to customize your shell, check out [the fish documentation](https://fishshell.com/docs/current/index.html#variables) for more information.\nThe next most common variable to change is the default editor for your shell. This is set with the `EDITOR` variable.\n\n```fish title=\"~/.config/fish/config.fish\"\nset -Ux EDITOR nvim\n```\n\nNote the `-x` flag is used with the `set` command to export a variable as an environment variable. When a variable is exported, it becomes available to child processes and can be accessed by programs and utilities that use environment variables. This is helpful as you extend your development environment with other tools that can generate sub processes\n\n## Abbreviations\n\nOne of my favorite features of fish is the ability to create abbreviations. This works similar to a shell aliasm but the main difference is the abbreviation will expand when ran.\n\nYou can create abbreviations with the `abbr` command in your `config.fish` file. Let's add a few helpful ones for homebrew.\n\n```fish title=\"~/.config/fish/config.fish\"\nabbr bi \"brew install\"\nabbr bic \"brew install --cask\"\nabbr bin \"brew info\"\nabbr binc \"brew info --cask\"\nabbr bs \"brew search\"\n```\n\nYou'll have to source your `config.fish` file for the change to be reflected in your shell.\n\n```sh\nsource ~/.config/fish/config.fish\n```\n\nNow, you type `bs\u003Cspace>` and you'll see the prompt quickly expand to `brew search ` to allow you to create commands quickly using a simple mnemonic-style abbreviations. Abbreviations speed up my dev workflow significantly and are one of my favorite features of the fish shell.\n\n## Plugins\n\nThere is a large community of plugins for the fish shell. I recommend using [fisher](https://github.com/jorgebucaran/fisher) to manage them.\n\n```sh\ncurl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install jorgebucaran/fisher\n```\n\nA great starter plugin for fish is [sponge](https://github.com/meaningful-ooo/sponge), which cleans your fish history from typos automatically. It can be installed with the fisher command.\n\n```sh\nfisher install meaningful-ooo/sponge\n```\n\nYou'll notice two things.\n\n1. A `~/.config/fish/fish_plugins` file was created and added sponge as a plugin. This is how fisher manages plugins.\n2. A `~/.config/fish/functions` directory was created and multiple `_sponge_*.fish` files were added to it. This is the plugin code which fish will automatically read to extend the shell. This folder will contain more files as you add more plugins, you can even create your own!\n\n## Summary\n\nThe fish shell is a simple, fast, and intuitive shell alternative for macOS. In this post we installed fish, set it as your default user shell, configured homebrew, added a directory to your path, customized some of fish's options, create abbreviations, and installed your first plugin.","src/data/posts/set-up-fish-the-user-friendly-interactive-shell.mdx",[525,526],"../../assets/posts/get-started-with-fish-the-smart-and-user-friendly-shell.jpeg","../../assets/posts/get-started-with-fish-the-smart-and-user-friendly-shell-thumb.jpeg","7c59a2498805d62b","shell-customization-with-starship",{"id":528,"data":530,"body":540,"filePath":541,"assetImports":542,"digest":545,"deferredRender":28},{"title":531,"description":532,"pubDate":533,"category":534,"heroImage":535,"thumbnail":536,"guide":537},"Customized Shell Prompt with Starship","Starship is a minimal, blazing-fast, and infinitely customizable prompt for any shell.",["Date","2023-06-26T12:00:00.000Z"],{"id":18,"collection":19},"__ASTRO_IMAGE_../../assets/posts/customized-shell-prompt-with-starship.jpeg","__ASTRO_IMAGE_../../assets/posts/customized-shell-prompt-with-starship-thumb.jpeg",{"ref":538,"position":539},{"id":146,"collection":147},4,"[Starship](https://starship.rs/) is a minimal, blazing-fast, and infinitely customizable prompt for any shell. I've been [interviewing developers](https://www.youtube.com/playlist?list=PLdtuRouvdurxRCLs_PnVBVxd9pc2po1em) recently and the majority of them are using Starship! It's easy to setup and configure. Here's how to get started.\n\n## Install\n\nInstall starship by running the following brew command.\n\n```sh\nbrew install starship\n```\n\nNow that starship is installed, you have to source it in your `config.fish` by adding the following line.\n\n```sh title=\"~/.config/fish/config.fish\"\nstarship init fish | source\n```\n\n## Configuration\n\nTo configure starship, create a `~/.config/starship.toml` and add the following content.\n\nFirst, swap out some of the characters with custom Nerd Font options. You can find more on [Nerd Font's website](https://www.nerdfonts.com/cheat-sheet).\n\n```toml title=\"~/.config/starship.toml\"\n[character]\nsuccess_symbol = \"[\\uf054](white)\" # \nvicmd_symbol = \"[\\ue62b](white)\" # \nerror_symbol = \"[\\uf467](red)\" # \n```\n\nNext, I prefer changing the directory name to blue, since we'll be updating tmux in a future post to the same color as well, creating a consistent style.\n\n```toml title=\"~/.config/starship.toml\"\n[directory]\nstyle = \"blue bold\"\n```\n\nFinally, I prefer a more minimal approach to my prompt, so I prefer disabling many of the built in modules.\n\n```toml title=\"~/.config/starship.toml\"\n[package]\ndisabled = true\n\n[username]\ndisabled = true\n\n[hostname]\ndisabled = true\n\n[aws]\ndisabled = true\n\n[docker_context]\ndisabled = true\n\n[git_branch]\ndisabled = true\n\n[git_commit]\ndisabled = true\n\n[git_state]\ndisabled = true\n\n[git_metrics]\ndisabled = true\n\n[git_status]\ndisabled = true\n```\n\nCheck out all the [configuration options](https://starship.rs/config/) to figure out which modules you can configure or customize to your liking.\n\n## Summary\n\nThat's it! Starship works great out-of-the-box and has a low learning-curve. It is smart and will provide contextual information related to where you are in the terminal. With a few customizations it has a minimal and consistent look making it a great addition to my dev workflow.","src/data/posts/shell-customization-with-starship.mdx",[543,544],"../../assets/posts/customized-shell-prompt-with-starship.jpeg","../../assets/posts/customized-shell-prompt-with-starship-thumb.jpeg","0f66c2bbef6db17a","smart-tmux-sessions-with-zoxide-and-fzf",{"id":546,"data":548,"body":556,"filePath":557,"assetImports":558,"digest":560,"deferredRender":28},{"title":549,"description":550,"pubDate":551,"category":552,"duration":553,"heroImage":554,"youtubeUrl":555},"Smart tmux sessions with zoxide and fzf","Create and manage tmux sessions automatically with a custom script",["Date","2022-08-12T12:00:00.000Z"],{"id":18,"collection":19},"14:55","__ASTRO_IMAGE_../../assets/posts/smart-tmux-sessions-with-zoxide-and-fzf.jpeg","https://www.youtube.com/embed/l_TTxc0AcCw","Create and manage tmux sessions automatically with a custom script that uses zoxide and fzf.\n\n**Update:** I've created an official tmux plugin called to make it easy to set this up in your workflow. [View \"t - smart tmux session manager\" tmux plugin](https://github.com/joshmedeski/t-smart-tmux-session-manager)\n\n# zoxide\n\n```sh\nbrew install zoxide\n```\n\n[View zoxide on GitHub](https://github.com/ajeetdsouza/zoxide)\n\n# tmux\n\n```bash\nbrew install tmux\n```\n\n[View tmux on GitHub](https://github.com/tmux/tmux)\n\n```fish title=\"~/.config/fish/config.fish\"\nabbr tn \"tmux new -s (pwd | sed 's/.*\\///g')\"\n```\n\nYou can turn off the detach-on-destroy option in your `tmux.conf` to allow tmux to switch to an existing session when you close the final window on a session.\n\n```sh title=\"~/.tmux.conf\"\nset-option -g detach-on-destroy off\n```\n\n# macOS Binding\n\nThis is the macOS binding I use (cmd+j) to open the session manager popup.\n\n```yaml title=\"~/.config/alacritty/alacritty.yaml\"\nkey_bindings:\n  - { key: K, mods: Command, chars: \"\\x02\\x54\" }\n```\n\n[Watch \"macOS Keyboard Shortcuts for tmux\"](/posts/macos-keyboard-shortcuts-for-tmux) for more details.","src/data/posts/smart-tmux-sessions-with-zoxide-and-fzf.mdx",[559],"../../assets/posts/smart-tmux-sessions-with-zoxide-and-fzf.jpeg","f46207c72cc2af62","tmux-nerd-font-window-name-plugin",{"id":561,"data":563,"body":571,"filePath":572,"assetImports":573,"digest":575,"deferredRender":28},{"title":564,"description":565,"pubDate":566,"category":567,"duration":568,"heroImage":569,"youtubeUrl":570},"tmux Nerd Font window name plugin","Automatically rename your tmux windows to Nerd Font icons. It is a tmux plugin that you can install in minutes",["Date","2023-03-01T18:00:00.000Z"],{"id":18,"collection":19},"3:47","__ASTRO_IMAGE_../../assets/posts/tmux-nerd-font-window-name-thumb.jpeg","https://www.youtube.com/embed/nFYidbeT264","Automatically rename your tmux windows to Nerd Font icons.\n\n[View on GitHub](https://github.com/joshmedeski/tmux-nerd-font-window-name)\n\n## Prerequisites\n\n- [tmux](https://github.com/tmux/tmux)\n- [tpm](https://github.com/tmux-plugins/tpm)\n- [Nerd Font](https://www.nerdfonts.com/)\n\n## How to install\n\n### 1. Install tpm plugin\n\nThis script can be installed with the [Tmux Plugin Manager (tpm)](https://github.com/tmux-plugins/tpm).\n\nAdd the following line to your `~/.tmux.conf` file:\n\n```sh title=\"~/.tmux.conf\"\nset -g @plugin 'joshmedeski/tmux-nerd-font-window-name'\n```\n\n## How it works\n\nWhen installed, your window names will automatically update to a Nerd Font that matches the activity (ex: vim, bash, node, ect...).\n\n## Contributing\n\nI encourage contributors! I want to make this plugin the best it can be. Feel free to fork it and submit pull requests with any new ideas or improvements you have.\n\n[View on GitHub](https://github.com/joshmedeski/tmux-nerd-font-window-name)","src/data/posts/tmux-nerd-font-window-name-plugin.mdx",[574],"../../assets/posts/tmux-nerd-font-window-name-thumb.jpeg","b1385a12aa0d08f5","top-4-fuzzy-clis",{"id":576,"data":578,"body":586,"filePath":587,"assetImports":588,"digest":590,"deferredRender":28},{"title":579,"description":580,"pubDate":581,"category":582,"duration":583,"heroImage":584,"youtubeUrl":585},"Top 4 Fuzzy CLIs","My list of the top 4 fuzzy command-line interfaces that I've used and like.",["Date","2024-01-22T09:00:00.000Z"],{"id":18,"collection":19},"04:31","__ASTRO_IMAGE_../../assets/posts/top-4-fuzzy-clis.jpeg","https://www.youtube.com/embed/T0O2qrOhauY","Command-line interfaces (CLIs) are great for productivity, but they often Fuzzy CLIs make it easier to use the command line by providing a fuzzy search interface that allows you to find commands quickly and easily.\n\nThankfully, there are many to choose from, some standing out more than others. Here is my list of the top 5 fuzzy CLIs that I've used.\n\n## Installation\n\nAll of these CLIs can be installed with homebrew. So they all pass my first test of being easy to install.\n\n## 4. zf\n\n\u003CGhRepo repo=\"natecraddock/zf\" />\n\nWritten in Zig, zf is fast and simple. It's a little more minimal than the others, but it gets the job done. It is the least popular on this list, but has a focus on file paths and I discovered it while looking for a way to improve the fuzzy results for Neovim's Telescope plugin.\n\n\u003CGhRepo repo=\"natecraddock/telescope-zf-native.nvim\" />\n\nOverall this is bottom of the list because you can't do much to change the look of it and the configuration options are pretty limited as a CLI. But in Telescope, it's great.\n\n## 3. gum\n\n\u003CGhRepo repo=\"charmbracelet/gum\" />\n\nGum is the most feature-filled CLI that I use, but as a fuzzy CLI it ranks 3rd on my list. It's written in Go and is apart of the Charmbracelet suite of CLI tools. The fuzzy feature is a subcommand called \"filter\" and most of the configuration options are focused on the way it looks.\n\nI think the fuzzy algorithm and the visuals make it one of my favorites, personally, but it's lack of configuration options compared to the next two put it in 3rd place.\n\n## 2. skim\n\n\u003CGhRepo repo=\"lotabout/skim\" />\n\nSkim is a one I recently discovered and it is written in Rust, a fan favorite language for terminal tools. It offers many great features and is fast.\n\n## 1. fzf\n\n\u003CGhRepo repo=\"junegunn/fzf\" />\n\nfzf is the most popular (by a lot) in the fuzzy CLI space, I have been using it for many years and it's very feature rich including keybindings to update the list and execute commands. It's written in Go and is a crowd favorite.","src/data/posts/top-4-fuzzy-clis.mdx",[589],"../../assets/posts/top-4-fuzzy-clis.jpeg","ffa92939eeae80f0","smart-tmux-sessions-with-sesh",{"id":591,"data":593,"body":601,"filePath":602,"assetImports":603,"digest":605,"deferredRender":28},{"title":594,"description":595,"pubDate":596,"category":597,"duration":598,"heroImage":599,"youtubeUrl":600},"Smart tmux sessions with sesh","Make your tmux workflow smarter and faster with the sesh session manager.",["Date","2024-05-10T11:00:00.000Z"],{"id":18,"collection":19},"9:27","__ASTRO_IMAGE_../../assets/posts/smart-tmux-sessions-with-sesh.jpeg","https://www.youtube.com/embed/-yX3GjZfb5Y","The way I use Tmux has changed a lot in the last year, so let's talk about it.\n\n## Intro\n\nI rewrote my [tmux plugin called 't'](https://github.com/joshmedeski/t-smart-tmux-session-manager?tab=readme-ov-file) in early 2024 into a new cli called [sesh](https://github.com/joshmedeski/sesh), written in Go. It offers more features and performance boosts compared to the original bash version.\n\nHere's the video that started it all, breaking down the idea of combining zoxide and fzf for a more efficient workflow:\n\n\u003Ciframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/l_TTxc0AcCw?si=l45yI5udbkD0pY8I\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n  referrerpolicy=\"strict-origin-when-cross-origin\"\n  allowfullscreen\n>\u003C/iframe>\n\n## How to install\n\nInstead of using [tpm](https://github.com/tmux-plugins/tpm) to install it as a tmux plugin, [sesh](https://github.com/joshmedeski/sesh) is a binary that you install on your machine using Homebrew or Nix.\n\nRun the following command to install it via [homebrew](https://brew.sh/):\n\n```bash\nbrew install joshmedeski/sesh/sesh\n```\n\nOther installation methods are available on the [sesh GitHub page](https://github.com/joshmedeski/sesh?tab=readme-ov-file#how-to-install).\n\n## How it works\n\nSesh combines [zoxide](https://github.com/ajeetdsouza/zoxide) and [tmux sessions](https://github.com/tmux/tmux) to create a powerful and efficient workflow. The two main commands are `sesh list` to list zoxide records, custom config records, and running tmux Sessions, and `sesh connect` to connect to a directory and create a Tmux Session.\n\nMy YouTuber friend, [Dreams of Autonomy](https://www.youtube.com/@dreamsofautonomy), has a great video explaining how zoxide works.\n\n\u003Ciframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/aghxkpyRVDY?si=-UVPNsGrslVNPP0c\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n  referrerpolicy=\"strict-origin-when-cross-origin\"\n  allowfullscreen\n>\u003C/iframe>\n\n## Getting Started\n\nUsing `sesh connect` with `sesh list` and tools like [fzf](https://github.com/junegunn/fzf) or [gum](https://github.com/charmbracelet/gum) allows for quick selection and creation of Tmux Sessions based on the chosen project or directory.\n\n```bash\nsesh connect \"$(sesh list | fzf)\"\n```\n\nI prefer gum as I find it faster and prettier.\n\n```bash\nsesh connect \"$(sesh list -i | gum filter --limit 1 --placeholder 'Pick a sesh' --prompt='⚡')\"\n```\n\n## Startup\n\nCreating custom Tmux Bindings like `K` displays a pop-up to switch between or create new tmux Sessions on the fly using a keybinding, similar to command palettes in Discord and GitHub.\n\n```lua title=\"~/.config/tmux/tmux.conf\"\nbind-key \"K\" display-popup -E -w 40% \"sesh connect \\\"$(\n\tsesh list -i | gum filter --limit 1 --placeholder 'Pick a sesh' --prompt='⚡'\n)\\\"\"\n```\n\nIf you want a more complex setup, you can use fzf to add keybindings to filter by category or even take actions like kill tmux sessions from within the popup.\n\n```lua title=\"~/.config/tmux/tmux.conf\"\nbind-key \"J\" run-shell \"sesh connect \\\"$(\n\tsesh list -i | fzf-tmux -p 55%,60% \\\n\t\t--no-sort --border-label ' sesh ' --prompt '⚡  ' \\\n\t\t--header '  ^a all ^t tmux ^x zoxide ^g config ^d tmux kill ^f find' \\\n\t\t--bind 'tab:down,btab:up' \\\n\t\t--bind 'ctrl-a:change-prompt(⚡  )+reload(sesh list -i)' \\\n\t\t--bind 'ctrl-t:change-prompt(🪟  )+reload(sesh list -it)' \\\n\t\t--bind 'ctrl-g:change-prompt(⚙️  )+reload(sesh list -ic)' \\\n\t\t--bind 'ctrl-x:change-prompt(📁  )+reload(sesh list -iz)' \\\n\t\t--bind 'ctrl-f:change-prompt(🔎  )+reload(fd -H -d 2 -t d -E .Trash . ~)' \\\n\t\t--bind 'ctrl-d:execute(tmux kill-session -t {})+change-prompt(⚡  )+reload(sesh list)'\n)\\\"\"\n```\n\n## macOS keybinding\n\nBinding Sesh to a macOS keybinding like `command+K` creates a command bar to move between Sessions quickly and easily.\n\n\u003Ciframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/BLp61-Lq0kQ?si=PUHMQb_vQgIgn2As\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n  referrerpolicy=\"strict-origin-when-cross-origin\"\n  allowfullscreen\n>\u003C/iframe>\n\n## Naming Sessions\n\nSesh uses the folder name as the session name by default, but can create more contextualized session names based on the directory structure or git work trees.\n\nFor example, the `~/c/Downloads` directory can be named `Downloads` in Tmux, while the `~/c/github.com/joshmedeski/sesh` directory can be named `sesh` in Tmux.\n\nIn a git repository like `~/c/joshmedeski.com/src/content`, sesh will automatically detect the root of the git repository and name the tmux session `joshmedeski_com/src/content`.\n\nIf you're working with git worktrees, sesh will use the root of the worktree on the session name. So if I'm working with the directory `~/c/sesh/v2` where `v2` is a worktree, the session name will be `sesh/v2`, making it easy to contextualize all sesh wokrtrees in your workflow.\n\n## Custom configs\n\nCustom configurations can be created using a toml file in the `~/.config/sesh` directory. Sessions can be defined with a location, name, startup command, and startup script to automate actions like opening a file picker or starting a website.\n\n```toml title=\"~/.config/sesh/sesh.toml\"\n# open the file manager\n[[session]]\nname = \"Downloads 📥\"\npath = \"~/Downloads\"\nstartup_command = \"yazi\"\n\n# open a file\n[[session]]\nname = \"tmux config\"\npath = \"~/c/dotfiles/tmux\"\nstartup_command = \"nvim tmux.conf\"\n\n# run a script to startup a node project\n[[session]]\npath = \"~/c/joshmedeski.com\"\nstartup_script = \"~/.config/sesh/scripts/node_dev\"\n```\n\nThe script is a executable bash file with some simple tmux commands.\n\n```bash title=\"~/.config/sesh/scripts/node_dev\"\n#!/usr/bin/env bash\ntmux split-window -v -l 10 dev\ntmux select-pane -t :.+\ntmux send-keys \"nvim +GoToFile\" Enter\n```\n\nYou can also import other toml files if you want to break up your configs.\n\n```toml title=\"~/.config/sesh/sesh.toml\"\nimport = [\"~/c/joshmedeski.com/.sesh.toml\"]\n```\n\n## Default Startup\n\nSetting a default startup command like opening NeoVim with a file picker allows for quick access to recently used files whenever switching between sessions and projects for all your projects that don't have a custom configuration.\n\n```toml title=\"~/.config/sesh/sesh.toml\"\n[default_session]\nstartup_command = \"nvim -c ':Telescope find_files'\"\n```\n\n## Raycast\n\nThe [sesh companion extension](https://www.raycast.com/joshmedeski/sesh) for [Raycast](https://www.raycast.com/) makes it easy to use sesh outside of the terminal.\n\nHere are limitations to keep in mind:\n\n- tmux has to be running before you can use the extension\n- The extension caches results for a few seconds, so it may not always be up to date\n\n\u003Ca\n  title=\"Install sesh Raycast Extension\"\n  href=\"https://www.raycast.com/joshmedeski/sesh\"\n>\n  \u003Cimg\n    src=\"https://www.raycast.com/joshmedeski/sesh/install_button@2x.png?v=1.1\"\n    height=\"64\"\n    alt=\"\"\n    style=\"height: 64px;\"\n  />\n\u003C/a>\n\n## Adding to Zoxide\n\nTo make Sesh more useful, it's important to add records to Zoxide. This can be done by `cd`ing into directories or using a shortcut like `zad` to list and add multiple directories at once.\n\n```bash\nls -d */ | xargs -I {} zoxide add {}\n```\n\n## Wrapping Up\n\nSesh is a powerful tool that combines zoxide and tmux sessions to create a more efficient workflow. It allows for quick selection and creation of tmux sessions based on the chosen project or directory, and can be customized with custom configurations and startup scripts to automate actions.\n\nPlease give it a star and share it with your friends if you find it useful!\n\n\u003CGhRepo repo=\"joshmedeski/sesh\" />","src/data/posts/smart-tmux-sessions-with-sesh.mdx",[604],"../../assets/posts/smart-tmux-sessions-with-sesh.jpeg","73aef91b06fef29a","track-git-in-tmux-with-gitmux",{"id":606,"data":608,"filePath":614,"assetImports":615,"digest":617,"deferredRender":28},{"title":609,"description":610,"pubDate":611,"category":612,"heroImage":613,"draft":28},"Track git in tmux with gitmux","gitmux puts git details in your tmux status bar to track a project",["Date","2023-06-26T12:00:00.000Z"],{"id":18,"collection":19},"__ASTRO_IMAGE_../../assets/posts/track-git-in-tmux-with-gitmux.jpeg","src/data/posts/track-git-in-tmux-with-gitmux.mdx",[616],"../../assets/posts/track-git-in-tmux-with-gitmux.jpeg","2345391457e37322","underrated-square-bracket",{"id":618,"data":620,"body":628,"filePath":629,"assetImports":630,"digest":632,"deferredRender":28},{"title":621,"description":622,"pubDate":623,"category":624,"duration":625,"heroImage":626,"youtubeUrl":627},"The Underrated Square Bracket (NeoVim Conf 2023)","This vim motion offers many useful vim motions that make navigating code a breeze",["Date","2023-12-05T00:00:00.000Z"],{"id":18,"collection":19},"03:23","__ASTRO_IMAGE_../../assets/posts/the-underrated-square-bracket.jpeg","https://www.youtube.com/embed/vHNtl9gTWSU?si=8aaJVNu-Da45cZLq","Let's talk about the underrated square bracket. I don't think it's a very popular Vim motion but I hope that after this talk you add it to your workflow. It's a really simple Vim motion that helps me be more efficient, which is all we want with NeoVim right, I'm excited to show you how it works so let's get into it.\n\n**Note:** the following configuration snippets are all compatible with the [lazy.nvim](https://github.com/folke/lazy.nvim) package manager.\n\n## References (`]]` & `[[`)\n\nThe simplest version of this motion is hitting the right square bracket twice (`]]`) which will jump you to the next reference under your cursor. Conversely, if you go to the left square brackets twice (`[[`) it can go backwards.\n\n```lua title=\"~/.config/nvim/lua/plugins/vim-illuminate.lua\" {20-21} {27-28} {33-34}\n  return {\n    \"RRethy/vim-illuminate\",\n    event = \"LazyFile\",\n    opts = {\n      delay = 200,\n      large_file_cutoff = 2000,\n      large_file_overrides = {\n        providers = { \"lsp\" },\n      },\n    },\n    config = function(_, opts)\n      require(\"illuminate\").configure(opts)\n\n      local function map(key, dir, buffer)\n        vim.keymap.set(\"n\", key, function()\n          require(\"illuminate\")[\"goto_\" .. dir .. \"_reference\"](false)\n        end, { desc = dir:sub(1, 1):upper() .. dir:sub(2) .. \" Reference\", buffer = buffer })\n      end\n\n      map(\"]]\", \"next\")\n      map(\"[[\", \"prev\")\n\n      -- also set it after loading ftplugins, since a lot overwrite [[ and ]]\n      vim.api.nvim_create_autocmd(\"FileType\", {\n        callback = function()\n          local buffer = vim.api.nvim_get_current_buf()\n          map(\"]]\", \"next\", buffer)\n          map(\"[[\", \"prev\", buffer)\n        end,\n      })\n    end,\n    keys = {\n      { \"]]\", desc = \"Next Reference\" },\n      { \"[[\", desc = \"Prev Reference\" },\n    },\n  },\n```\n\n## Buffers (`]b` & `[b`)\n\nYou can move forward and backward through buffers using the square bracket and \"b\" (`]b`) so we can go forward and we can go back (`[b`).\n\n```lua title=\"~/.config/nvim/init.lua\"\nvim.keymap.set(\"n\", \"[b\", \"\u003Ccmd>bprevious\u003Ccr>\", {\n  desc = \"Prev buffer\",\n})\n\nvim.keymap.set(\"n\", \"]b\", \"\u003Ccmd>bnext\u003Ccr>\", {\n  desc = \"Next buffer\",\n})\n```\n\n## Git Hunks (`]g` & `[g`)\n\nOne of my favorites is jumping between Git hunks hunks using square bracket and \"g\" (`]g`).\n\n```lua title=\"~/.config/nvim/lua/plugins/gitsigns.lua\" {12-13}\nreturn {\n  \"lewis6991/gitsigns.nvim\",\n  event = \"BufReadPre\",\n  opts = function()\n    --- @type Gitsigns.Config\n    local C = {\n      on_attach = function(buffer)\n        local gs = package.loaded.gitsigns\n        local function map(mode, l, r, desc)\n          vim.keymap.set(mode, l, r, { buffer = buffer, desc = desc })\n        end\n        map(\"n\", \"]g\", gs.next_hunk, \"Next Hunk\")\n        map(\"n\", \"[g\", gs.prev_hunk, \"Prev Hunk\")\n      end,\n    }\n    return C\n  end,\n}\n```\n\n## LSP\n\n### LSP Diagnostics (`]d` & `[d`)\n\nMy most common use with using the square bracket motion is with LSPs and so in this case we can see two diagnoses showing and so I can do bracket \"d\" (`]d`) for \"diagnostic\".\n\n### LSP Errors (`]e` & `[e`)\n\nSimilarly if I want to go directly to the first error I can do bracket \"e\" (`]e`) .\n\n### LSP Warnings (`]w` & `[w`)\n\nAnd if I want to go to warning specifically I can do bracket \"w\" (`]w`).\n\nHere are all the mappings I use for this:\n\n```lua title=\"~/.config/nvim/lua/init.lua\"\nlocal diagnostic_goto = function(next, severity)\n  local go = next and vim.diagnostic.goto_next or vim.diagnostic.goto_prev\n  severity = severity and vim.diagnostic.severity[severity] or nil\n  return function()\n    go({ severity = severity })\n  end\nend\nmap(\"n\", \"]d\", diagnostic_goto(true), { desc = \"Next Diagnostic\" })\nmap(\"n\", \"[d\", diagnostic_goto(false), { desc = \"Prev Diagnostic\" })\nmap(\"n\", \"]e\", diagnostic_goto(true, \"ERROR\"), { desc = \"Next Error\" })\nmap(\"n\", \"[e\", diagnostic_goto(false, \"ERROR\"), { desc = \"Prev Error\" })\nmap(\"n\", \"]w\", diagnostic_goto(true, \"WARN\"), { desc = \"Next Warning\" })\nmap(\"n\", \"[w\", diagnostic_goto(false, \"WARN\"), { desc = \"Prev Warning\" })\n```\n\n## TODO Comments (`]t` & `[t`)\n\nIf you like to use to-do comments I have it set up so I can use square bracket \"t\" (`]t`) to switch between different to-do comments.\n\n```lua title=\"~/.config/nvim/lua/plugins/todo-comments.lua\" {7-8}\nreturn {\n  \"folke/todo-comments.nvim\",\n  cmd = { \"TodoTrouble\", \"TodoTelescope\" },\n  event = \"LazyFile\",\n  config = true,\n  keys = {\n    { \"]t\", function() require(\"todo-comments\").jump_next() end, desc = \"Next todo comment\" },\n    { \"[t\", function() require(\"todo-comments\").jump_prev() end, desc = \"Previous todo comment\" },\n  }\n}\n```\n\n## Treesitter\n\n### Classes & Functions (`]c` & `[c`)\n\nAnother motion I use that is a bit less common than the others is using square bracket \"c\" (`]c`) to jump up to the parent are of a class.\n\n### Functions (`]f` & `[f`)\n\nSimilarly, if we want to go up in a function we can use the square bracket \"f\" motion (`]f`).\n\n```lua title=\"~/.config/nvim/lua/plugins/nvim-treesitter.lua\"\nreturn {\n  \"nvim-treesitter/nvim-treesitter\",\n  opts = {\n    textobjects = {\n      move = {\n        enable = true,\n        goto_next_start = { [\"]f\"] = \"@function.outer\", [\"]c\"] = \"@class.outer\" },\n        goto_next_end = { [\"]F\"] = \"@function.outer\", [\"]C\"] = \"@class.outer\" },\n        goto_previous_start = { [\"[f\"] = \"@function.outer\", [\"[c\"] = \"@class.outer\" },\n        goto_previous_end = { [\"[F\"] = \"@function.outer\", [\"[C\"] = \"@class.outer\" },\n      },\n    },\n  }\n```\n\n## Note on complex motions\n\nI'd like to point out that in general this motion is a lot more simple than the ones that we might be used to where we can prepend numbers in front of our motions (ex: `w2` to jump to the second word) in order to be even more accurate or to skip references. In this case if I were to do two bracket bracket (`2]]`) we can see that it only honors the second part of that motion and goes to the next entry which is unfortunate. But, once you get used to it, I find it very useful to be in my workflow.\n\n## Jumping out of view\n\nSo far I've shown some rather contrived, albeit very short, examples where everything is on the screen but the real power of this motion is that you can get to things that you want even when they're not visible so if this error is 50 lines down I can just use my motion of square bracket \"e\" (`]e`) and I can jump all the way to anywhere in the file in which I'm looking for a particular thing albeit it warnings or motions or references or whatever it might be.\n\n## Customizing\n\nNow let's look at an example of how you would set this so in this case we're just using the Vim keymap set command um and you set the mode you set the key mapping you set the command you want to fire on that key mapping and the description is really helpful for if you use tools like [which key](https://github.com/folke/which-key.nvim) which I do.\n\n```lua\nvim.keymap.set(\"n\", \"[b\", \"\u003Ccmd>bprevious\u003Ccr>\", {\n  desc = \"Prev buffer\",\n})\n\nvim.keymap.set(\"n\", \"]b\", \"\u003Ccmd>bnext\u003Ccr>\", {\n  desc = \"Next buffer\",\n})\n```\n\n## Conclusion\n\nAnd that's my lightning talk on the underrated square bracket motion I don't see people using this motion very much but I use it every day and I find it incredibly helpful and so I hope that it will help you as well.\n\nA big thanks to the NeoVim conf team for putting on this conference and for inviting me to speak. Thanks so much for inviting me I really appreciate it.\n\nNow it's your turn go start using this underrated square bracket motion and I'll see you guys next time.\n\n---\n\nThis was a lightning talk given at NeoVim Conf, 2023. Learn more about it here:\n[neovimconf.live](https://neovimconf.live/)","src/data/posts/underrated-square-bracket.mdx",[631],"../../assets/posts/the-underrated-square-bracket.jpeg","8b182d18342f7fc1","upgrading-to-astro-v3",{"id":633,"data":635,"body":643,"filePath":644,"assetImports":645,"digest":647,"deferredRender":28},{"title":636,"description":637,"pubDate":638,"category":639,"duration":640,"heroImage":641,"youtubeUrl":642},"Upgrading to Astro v3","Code along with me as I upgrade my website to Astro 3.0! It's 30% faster",["Date","2023-08-31T12:00:00.000Z"],{"id":82,"collection":19},"03:17:16","__ASTRO_IMAGE_../../assets/posts/upgrading-to-astro-v3.jpeg","https://www.youtube.com/embed/dqvjutA_N2c","Code along with me as I upgrade my website to Astro 3.0! It's 30% faster and more powerful than ever. We'll explore new features like view transitions, image optimization, JSX Fast Refresh, and so much more.\n\nHere are the highlights of what we'll cover:\n\n- **Upgrade packages:** We'll upgrade all our Astro dependencies to the latest version of 3.0. We'll also make sure the site still builds, runs locally, and deploys successfully. This update includes a 30-75% performance boost for Astro components and a 30% build time reduction.\n- **Image Optimization:** Astro now supports image optimization out of the box. We'll update the site to use the new built-in `\u003CImage>` component and explore the new image optimization features. I ended up reducing the size of some of my images by over 90%!\n- **View Transitions**: We'll experiment with the new web platform API that unlocks native browser transition effects between pages, without any JavaScript required. The goal is to morph the post thumbnails between page routes.\n\nOverall it was a fun stream! I had some hiccups with the new View Transitions API but once we figured it out it turned out great! You can view all of the work in the pull request.\n\n[View pull request](https://github.com/joshmedeski/joshmedeski.com/pull/23)","src/data/posts/upgrading-to-astro-v3.mdx",[646],"../../assets/posts/upgrading-to-astro-v3.jpeg","4102574e989d8ecf","vim-tmux-with-nick-nisi",{"id":648,"data":650,"body":658,"filePath":659,"assetImports":660,"digest":662,"deferredRender":28},{"title":651,"description":652,"pubDate":653,"category":654,"duration":655,"heroImage":656,"youtubeUrl":657},"vim + tmux with Nick Nisi","Nick and I talk about our developer workflows and what tools we're finding interesting with tmux and neovim.",["Date","2023-02-23T18:00:00.000Z"],{"id":51,"collection":19},"01:08:44","__ASTRO_IMAGE_../../assets/posts/vim-tmux-with-nick-nisi.jpeg","https://www.youtube.com/embed/17o9QrCcF_o","Nick and I talk about our developer workflows and what tools we're finding interesting in the world of tmux and neovim.\n\n## Resources\n\n\u003CGhRepo repo=\"nicknisi/dotfiles\" />\n\u003CGhRepo repo=\"joshmedeski/dotfiles\" />\n\n- [vim + tmux - OMG!Code video](https://www.youtube.com/watch?v=5r6yzFEXajQ)\n- [Git worktree docs](https://git-scm.com/docs/git-worktree)\n- [ThePrimeagen's git worktree video](https://www.youtube.com/watch?v=2uEqYw-N8uE)\n- [Josh's Smart tmux sessions with zoxide and fzf video](https://www.youtube.com/watch?v=l_TTxc0AcCw)\n- [Josh's Blazing Fast Window Management on macOS video](https://www.youtube.com/watch?v=fYsCAOfGjxE)\n- [Josh's macos keyboard shortcuts for tmux video](https://www.youtube.com/watch?v=BLp61-Lq0kQ)","src/data/posts/vim-tmux-with-nick-nisi.mdx",[661],"../../assets/posts/vim-tmux-with-nick-nisi.jpeg","07b945fc22f0d2ae","using-bun-with-astro",{"id":663,"data":665,"body":673,"filePath":674,"assetImports":675,"digest":677,"deferredRender":28},{"title":666,"description":667,"pubDate":668,"category":669,"duration":670,"heroImage":671,"youtubeUrl":672},"Using bun with astro","Experimenting with the new bun runtime with the astro framework.",["Date","2023-09-13T19:00:00.000Z"],{"id":82,"collection":19},"02:40:22","__ASTRO_IMAGE_../../assets/posts/using-bun-with-astro.jpeg","https://www.youtube.com/embed/JgACR7xQY2g","Experimenting with the new bun runtime with the astro framework.\n\n**Note:** I ultimately didn't deploy Astro with bun because of bun's current limitations. You can watch the stream to see me work through the issues, or read the highlights below.\n\n## Highlights\n\n- Bun is fast! Install times are significantly faster\n- Sharp isn't supported by bun yet, so I had back to Squoosh to get images working\n- Netlify can't build, there seems to be something wrong with how dependencies are installed\n- Vercel can build, but the View Transitions API doesn't work on the deployed site\n\n## Resources\n\n- [Astro Docs: Using Astro with Bun](https://docs.astro.build/en/recipes/bun/)\n- [Example of React app that you can deploy to netlify using bun (bun.js, oven.sh)](https://github.com/JLarky/bun-netlify)\n- [Sharp error issue on Astro's Github](https://github.com/withastro/astro/issues/8489)","src/data/posts/using-bun-with-astro.mdx",[676],"../../assets/posts/using-bun-with-astro.jpeg","5c89fe6bba7b8b2e","waiting-for",{"id":678,"data":680,"body":686,"filePath":687,"assetImports":688,"digest":690,"deferredRender":28},{"title":681,"description":682,"pubDate":683,"category":684,"heroImage":685},"Can't Keep up? Make a Waiting For List","You live in a world that depends on other people to get work done. On any day you could be waiting for a handful of people to take action",["Date","2014-06-26T00:00:00.000Z"],{"id":113,"collection":19},"__ASTRO_IMAGE_../../assets/posts/waiting-for/waiting-for-thumb.jpeg","You live in a world that depends on other people to get work done. On any day you could be waiting for a handful of people to take action on something before you can take the next step on a project. So how do you keep track of all those items?\n\nIn Getting Things Done (GTD), David Allen recommends creating a \"waiting for\" list that shows everything you are waiting for others to do. It's recommended you date each item so that if you have to follow up with someone, you have a solid timeline.  Remember this list is for items that require your attention after you have completed your part. (Sometimes you delegate work and you don't have to follow up.)\n\nLast month I won free tickets to a play at a local theater in town. The theater said I would receive an email with instructions for ordering my tickets. The day I won the tickets, I put \"email from Stages Theater about free tickets won at Creative Mornings\" in my \"waiting for\" list. Notice how specific I got, which also included the date I won the tickets as a reference.\n\nAlmost a full month later I still had not received the email, so I went to the theater website and filled out a contact form requesting information for my free tickets. The next day I got an email with clear instructions and an apology from the theater because the person in charge of my tickets was on vacation.\n\nIf I had not put this item on my \"waiting for\" list, I might have forgotten about the show. Thanks to this helpful tool, I was able to see a great show because it wasn't forgotten.\n\nThere are more important items that can go on your \"waiting for\" list than free tickets to a play. What if you're waiting for a proposal to be written, an invoice to be paid, or a doctor's report to come in? The \"waiting for\" list becomes a necessity in cases like these.\n\nAnd most importantly, if you have multiple items pending at the same time, this tool is a worry-free alternative to ensure things aren't missed.\n\nTo get started, get out a blank piece of paper, set a timer for ten minutes and write down everything you are waiting for from someone else. Feel free to move this list into your to-do app and make sure you visit this list at regularly scheduled intervals, or set reminders on your calendar for those time-sensitive items.\n\nYou will be amazed at how smart you look when you follow up with a cold lead, a delayed email, or a software update when the rest of the world around you lets these little things get missed in this busy world.\n\nDo you have any stories about how your \"waiting for\" list saved you from trouble? Let me know in the comments.","src/data/posts/waiting-for.mdx",[689],"../../assets/posts/waiting-for/waiting-for-thumb.jpeg","71b6e4373dd991f2","weekly-review",{"id":691,"data":693,"body":699,"filePath":700,"assetImports":701,"digest":703,"deferredRender":28},{"title":694,"description":695,"pubDate":696,"category":697,"heroImage":698},"How I Do my Weekly Review","A good weekly review is important in my productivity. It allows me to evaluate my recent actions and plan out the following week.",["Date","2014-05-01T20:24:00.169Z"],{"id":113,"collection":19},"__ASTRO_IMAGE_../../assets/posts/weekly-review/weekly-review.jpeg","A good weekly review is important in my productivity. It allows me to evaluate my recent actions and plan out the following week. The weekly review also gives me a chance to catch up with everything.\n\nI've been a big GTD (Getting Things Done) user for many years now, but I never set realistic expectation on my weekly review, and to be honest, I didn't consistently do it. Over the past few months that perspective has changed and I have created a set routine and dedication to the weekly routine. It has completely transformed my productivity and focus.\n\nLet me tell you about what my weekly review looks like. And show you why it's so important to be intentional and dedicated to the weekly review.\n\n## Friday Afternoon\n\nMy weekly review is every Friday, without fail. I've been able to do this for a few months now and I schedule my entire week around it. I usually do interesting things Friday morning (like \u003Ca href=\"http://creativemornings.com/cities/hou\" target=\"_blank\" rel=\"noopener\">Creative Mornings\u003C/a> or spend time with friends). But I never schedule meetings or appointments Friday afternoon, it's my day.\n\n## Cleanup\n\nBefore I sit down and do the review, I have also made it house cleaning day. So I start the laundry, clean the dishes, clean up loose paperwork, recycling, and whatever else is not where it's supposed to be.\n\nNow that I have a clean house I'm ready to start.\n\n## Catching Up\n\nI use \u003Ca href=\"https://todoist.com/\" target=\"_blank\" rel=\"noopener\">Todoist\u003C/a> as my todo app. I've scheduled a weekly task called \"Weekly Review\" and inside of it I have the following sub-tasks:\n\n- Pull out all loose papers, receipts, posts-its, etc...\n- Clear off desk\n- Empty paper inbox\n- Empty email inbox\n- Review todo emails\n- Empty \"Downloads\" folder\n- Empty voicemail\n- Review Feedly\n- Review Pocket\n- Budget in YNAB\n- Review previous & upcoming events\n- Review completed items\n- Go through the collection triggers (brain dump)\n- Review projects\n- Review next actions (are the accurate? Can all of it be done this coming week?)\n- Review waiting for (is it still worth waiting for? Is there a next action?)\n- Review someday/maybe (could I do it this week? Or ever?)\n- Review goals (what have I done to get closer to those goals?)\n\nThis is useful because I don't have to remember what to do in my weekly review, and I don't have to go looking for it when it comes time to start reviewing. It's also a great reminder in case my morning is busy (because Todoist is almost always open on my computer).\n\nThe list is pretty strait forward, and many of the items only take a few seconds to do. It's meant to be thorough so that I don't have to think during this process. I go through and check of each item. If something doesn't make sense to me or I skip the task more than one week, I make revision for the future weekly review.\n\nIf you noticed, most of the tasks have to do with emptying. That's because during the week I don't want to have to deal with this stuff. But every week I want a fresh start. Plus I tend to miss less things if I check these places every week.\n\n## Brain Dump\n\nPart of my weekly review involves a brain dump. I go through the following list with Todoist's collection trigger feature and try to think of anything that's on my mind.\n\n- Open projects (websites, part-time, other)\n- Upcoming events (work, family, community)\n- Communication (calls, emails)\n- Errands (groceries, recycling, Walmart, car)\n- Home (cleaning, laundry, fixing, sort)\n- Tech (software, hardware, updates)\n- Health (hair, medicine, doctor, dentist)\n- Hobbies (art, music, Rubik's cube)\n- Media (movies, books, podcasts)\n- Community (volunteering, relationships)\n- Community (teaching, volunteering)\n- Someday (art, products, trip, event)\n- Houston (Meetups, events)\n\nI'm not totally happy with these triggers at this point. So I may try to reevaluate how to phrase these tricks (possibly putting them in question form?). Overall I do my best to write something down the minute I think of it, but in the weekly review there are always a few things that come up! Sometimes it's the weirdest things, like that restaurant I want to go eat at, that hobby I've been neglecting, or the invoice that I need to follow up on. I'm sure the brain dump can happen more than once a week, but it's been the right amount of time for my brain to handle.\n\n## Reflecting\n\nThis last part I learned from my life coach, Whitney Hutten. I ask myself the following questions to make sure that I'm actually focusing on what's most important and aligning my tasks with my values. This is the higher thinking GTD talks about, and I've found it to be the missing link for me from being busy vs being productive.\n\n- What went well?\n- What could be adjusted?\n- What to stop doing?\n- What to start doing?\n- What to continue doing?\n\n---\n\nThat's my weekly review! It adapts and changes over time, but the principles remain the same. Schedule a consistent time, catch up, brain dump, reflect. I've found it invaluable and I hope looking into my weekly review will shape your weekly review or get you started on actually making it happen!\n\nWhat secrets do you have for the weekly review? Tell me in the comments!","src/data/posts/weekly-review.mdx",[702],"../../assets/posts/weekly-review/weekly-review.jpeg","401e28f04995dbd7","what-is-the-terminal",{"id":704,"data":706,"body":714,"filePath":715,"assetImports":716,"digest":718,"deferredRender":28},{"title":707,"description":708,"pubDate":709,"category":710,"duration":711,"heroImage":712,"youtubeUrl":713},"What is the terminal?","Terminology related to the terminal are often misinterpreted. The terminal is",["Date","2022-10-27T12:00:00.000Z"],{"id":18,"collection":19},"15:16","__ASTRO_IMAGE_../../assets/posts/what-is-the-terminal/what-is-the-terminal.jpeg","https://www.youtube.com/embed/bbc0ex3eNKk","Terminology related to the terminal are often misinterpreted. The terminal is kind of a scary thing for some people. So I want to demystify how it works and break down the different terms.\n\n## Terminal App\n\nA terminal application is a computer program that emulates the terminal environment on your computer. Every operating system comes with a built-in terminal application, but there are many third-party applications that can be found online (both open-source and paid).\n\n## Shell Environment\n\nNext, the shell is an environment to interact with your computer. There are multiple shell environments to choose from, but they all have a base set of commands (like `cd`, `ls`, and `pwd`) that allows you to interact with your computer at a lower-level.\n\nThe most basic shell environment is `sh` and the most common is `bash`. In recent years, Apple decided to make `zsh` their default shell and I, personally, use one called `fish`. Each one offers different features and each can be customized in different ways.\n\nIf your not sure which shell environment you are using, running `echo $SHELL` will output your shell.\n\n## Extending Functionality\n\nOnce you have chosen and setup your shell environment, you can continue to extend the functionality of your terminal by adding third-party scripts called binaries. For example, [`fzf`](https://github.com/junegunn/fzf) a fuzzy finder CLI (command-line interface). To install it, I recommend the [homebrew](https://brew.sh) package manager for macOS (`brew install fzf`).\n\nOnce installed, the `fzf` binary (which is a file) is stored to your path. The path is a set of directories for your shell environment to look for files that can run. This is defined in your shell environment and tools downloaded from brew are typically stored at `/opt/homebrew/bin`. There are also many binaries pre-installed on your computer (beyond `zsh`) in `/usr/sbin`.\n\nThe most important thing to know is that these scripts that your run have full access to your computer, so make sure to download them responsibly!\n\n## Closing Thoughts\n\nBinaries or we can use third party package tools like home brew to install additional binaries onto our computer. I hope all of this makes sense. Let's chat for a second.\n\nI think the terminal is an interesting and exciting environment to do, complex things. You can automate your life in a lot of ways with this. Most importantly, as a programmer, you can develop and extend it. I recommend you ease into it, and take it one step at a time.\n\nSo that's the terminal. Feel free to head to YouTube and leave a comment if you have any questions.","src/data/posts/what-is-the-terminal.mdx",[717],"../../assets/posts/what-is-the-terminal/what-is-the-terminal.jpeg","2f132996be3f31cd","why-i-switched-from-zsh-to-fish",{"id":719,"data":721,"body":727,"filePath":728,"assetImports":729,"digest":731,"deferredRender":28},{"title":722,"description":723,"pubDate":724,"category":725,"heroImage":726},"Why I Switched from zsh to fish","My experience using zsh and changing to using the friendly interactive shell to improve performance",["Date","2019-07-30T12:00:00.000Z"],{"id":18,"collection":19},"__ASTRO_IMAGE_../../assets/posts/why-i-switched-from-zsh-to-fish.jpeg","I've been using the `zsh` terminal with the infamous [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh) framework for many years now. The features and improvements it makes on plain old bash are impressive. But as my needs change, so does my shell. I made the switch to the `fish` shell almost a year ago and here is why I switched.\n\n## Speed\n\n`fish` is faster than `zsh`. Especially when using `zsh` plugins the loading time alone is significantly slower. But more than that, the overall experience for me feels snappier and more responsive in the `fish` shell. Since I'm using the terminal to be more efficient and get things done faster than a GUI, speed is one of my top requirements for my shell.\n\n## Simplicity\n\nThe oh-my-zsh configuration and plugins tend to add complexity to the terminal environment, especially custom aliases. Overall, I have found `fish` to be much simpler regarding configuration and usage. My config file is only a few lines long and I'm only using one or two plugins for third party utilities (ex: [`fasd`](https://github.com/clvv/fasd) and [`nvm`](https://github.com/nvm-sh/nvm)). I also found a very simple theme that only shows me what I need, similar to my previous `zsh` theme.\n\n## Autosuggestion\n\nThis is the main reason I moved to `fish`. I originally was using the [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) which is \"Fish-like autosuggestions for zsh\". This is what drew me to fish, this is by far my most used feature. If I mistype a command, it will show in red to indicate that it's an invalid command. But, more importantly, while I type the prompt auto-suggests my previous commands (by recent and most used). This is far quicker than `ctrl+r` and usually shows me the command I want 80%+ of the time. Again, this is the main reason I use `fish` and one of my favorite productivity tools on my computer, period.\n\n## Vim Mode\n\nI've been a vim user for many years now. What I love about vim is it's intuitiveness and efficiency (once you've really gotten it down). I know `zsh` offers a vim-mode but I was happy to learn `fish` has one as well. It a sort of simplified `vi` hybrid but it does all I need it to do.\n\n## Conclusion\n\n`fish` is fast, simple, offers powerful autosuggestion and a vim mode. These are the most important thing for me right now in the terminal so I proudly made the switch to this friendly interactive shell and haven't looked back.","src/data/posts/why-i-switched-from-zsh-to-fish.mdx",[730],"../../assets/posts/why-i-switched-from-zsh-to-fish.jpeg","549886caed36e7ff","i-made-my-favorite-tmux-feature-better-with-sesh",{"id":732,"data":734,"body":742,"filePath":743,"assetImports":744,"digest":746,"deferredRender":28},{"title":735,"description":736,"pubDate":737,"category":738,"duration":739,"heroImage":740,"youtubeUrl":741},"I made my favorite tmux feature better with sesh","Use the last command in tmux to switch between sessions easily, and learn how to improve it with sesh.",["Date","2025-03-24T22:00:00.000Z"],{"id":18,"collection":19},"5:03","__ASTRO_IMAGE_../../assets/posts/i-made-my-favorite-tmux-feature-better.jpeg","https://www.youtube.com/embed/6I5xOAdSqLM","I made one of my favorite tmux sessions even better, so let's talk about it.\n\n## tmux last command\n\nSo let's talk about the last command. It is bound to `\u003Cprefix>` capital L and it allows you to switch the attached client back to the last session. \n\nSo think of this like a command tab kind of feature, but for tmux. So if I was to open up a second session and we were to hit `\u003Cprefix>` capital L, you'll see that I'll be able to switch very easily back to the previous session. \n\n## macOS keybinding\n\nI have done an extra step here and I have bound this to command L. And if you want to know about how I did that, I have a video all about how I can [bind macOS key bindings to tmux](/posts/macos-keyboard-shortcuts-for-tmux). And so this is fantastic. Maybe I'm working on the front end and the back end of something and I want to have two sessions open and quickly switch between them. Or maybe I'm messing with my configs, right? And I want to play around with that.\n\n## The problem\n\nHowever, this starts to quickly fall apart when there's a third introduced. And so now my workflow is I want to be able to quickly and easily close a tmux session. And then there's this detach on destroy feature that's really helpful. \n\n```sh\nset -g detach-on-destroy off # don't exit from tmux when closing a session\n```\n\nSo if I'm in neovim and I decide I don't want it anymore, I can close the final window. And when I do that, the last command actually stops working. You see that when I hit `⌘+l`, it says can't find last session. And so the feature sort of falls apart very quickly as soon as you start closing sessions, right? And so the way to fix that is you can switch back to one of the other sessions manually and then the feature comes back. And that's all right. But further it falls apart when we detach and we reattach. And so if we detach from a tmux session and come back, the idea of last goes away in tmux mind. And so you'll see that this feature still doesn't work. Can't find last session. \n\nAnd so I thought, hey, you know, we know the attached order with the timestamp from tmux. tmux stores that data and tells us when we've attached to something for every session forever. It's one of those things that they have the information, but they're choosing not to use it with this command. And so I decided, hey, it doesn't work right now, right? Can't find last session. \n\n## Introducing `sesh last`\n\nHowever, if I was to type sesh last, I was able to solve the problem. And so now `sesh last` can switch to the previous session no matter what it is. And now if I was to have a third session, I was to close it, right? Then I can do sesh last and it's able to switch to back to fish. And so you can see pretty easily this thing works as you'd expect it to. And the way that you end up binding it, it's sort of up to you. But I recommend that you just overwrite the default behavior. \n\n```sh\nbind -N \"⌘+l last-session (via sesh) \" L run-shell \"sesh last || tmux display-message -d 1000 'Only one session'\"\n```\n\nAnd so you use the bind command in your tmux config. It's called run shell and you can run shell. You can say sesh last. And then optionally, I like this. You can have this double, this double pipe for or and you can say, you know, if sesh last fails, basically it's because there's only one session. And so I'll show you really quickly how that works. But basically when you make this kind of change, usually it's best to restart tmux. So we'll go ahead and kill it and restart it.\n\nAnd then we'll reopen it up. And you'll see the fallback where only one session, that makes sense. But if I open up more than one, right, it works as expected. And if I open up a third and was to close it, I'm still able to switch back. And if I was to detach and reattach, the feature still works. \n\n## In conclusion\n\nAnd so this has been a huge time saver for me. I really love this feature. I just wanted it to always work. I haven't yet taken the time to contribute to the tmux source code. And so I just decided to extend my tmux session manager to include this feature.\n\nAnd so if you're not using it already, I highly recommend you take a look at my [video on sesh](/posts/smart-tmux-sessions-with-sesh) and how it works and all of its inner workings. This is a new feature, so I wanted to show it off. And I hope that you use the last command more and let me know if there's anything else that you want to know about this workflow.","src/data/posts/i-made-my-favorite-tmux-feature-better-with-sesh.mdx",[745],"../../assets/posts/i-made-my-favorite-tmux-feature-better.jpeg","f0e06b15048ea3de","instantly-open-any-website-using-raycast",{"id":747,"data":749,"body":757,"filePath":758,"assetImports":759,"digest":761,"deferredRender":28},{"title":750,"description":751,"pubDate":752,"category":753,"duration":754,"heroImage":755,"youtubeUrl":756},"Instantly Open Any Website Using Raycast","Using an open-source search engine and Raycast, I can get to any website I want instantly.",["Date","2025-05-20T21:00:00.000Z"],{"id":18,"collection":19},"4:05","__ASTRO_IMAGE_../../assets/posts/instantly-open-any-website-using-raycast.jpeg","https://www.youtube.com/embed/Xd-xmPtLoqI","Using an open-source search engine and Raycast, I can get to any website I want instantly. In this post, I’ll show you how it works and why it’s changed the way I browse the web.\n\n## SearchXNG\n\nThe search engine I use is called [SearXNG](https://github.com/searxng/searxng). It’s open-source and runs as a Docker container on your machine. You simply forward port 8080, and you’re ready to go.\n\nSee the [SearXNG Docker Container instructions](https://docs.searxng.org/admin/installation-docker.html) for how to set it up.\n\nFor example, if you search for `GitHub NeoVim`, you’d expect the first result to be `github.com/neovim/neovim`. This works for a variety of queries:\n\n-  Searching my own name, \"joshmedeski\", puts my website first.\n-  Searching for “joshmedeski blazing fast window management” brings up my blog post as the top result.\n-  Typing in “imdb andor” quickly brings up the IMDB page for the TV show, Andor.\n\n## Leveraging Search Engine Skills\n\nMost of us use search engines every day and have developed a sense for what results our keywords will produce. When you know you always want the first result, many search engines offer a “get lucky” feature—essentially rolling the dice to jump straight to the top hit.\n\n## Introducing \"Bangs\" and Auto Redirects\n\nA key part of this workflow is the use of bangs. [DuckDuckGo popularized the concept](https://duckduckgo.com/bangs) with exclamation points that redirect your search to specific sites.\n\nBut SearXNG takes it further with a **double bang auto redirect**. When you use `!!` at the start of your query, you’re automatically redirected to the first result.\n\n### Example Searches\n\n-  `!! GitHub NeoVim` → Instantly opens the NeoVim GitHub page.\n-  `!! Paris France` → Redirects to the Wikipedia entry for France.\n\nEven if the first result isn’t perfect, it’s almost always contextual and relevant.\n\n## Setting Up with Raycast\n\nHere’s how I have it configured:\n\nCreate a quicklink in Raycast with the following URL:\n\n```\nhttp://localhost:8080/search?q=!!%20{argument name=\"term\"}\n```\n\n-  **Double bangs** (`!!`) trigger the auto-redirect.\n-  The search engine runs locally on `localhost:8080`.\n-  The API endpoint is `/search`.\n-  The query includes `!!` and the search term as arguments, which you can pass into Raycast.\n\nWhen I type `!!` and hit tab, Raycast prompts for the term. I enter what I want, and ARC gives me a preview window with the result.\n\n## Supercharging with a Keyboard Shortcut\n\nI took it a step further by binding the command to **⌥ + 1**. Since the exclamation point is on the `1` key, it’s a fast, muscle-memory shortcut to trigger a search.\n\nNow, I just type the shortcut, enter my keywords, and instantly jump to the page I want—like T-Mux’s documentation or any other site.\n\n## Why This Workflow Works for Me\n\n-  **No need for bookmarks:** If I know what I want, I can get to it with keywords.\n-  **Minimal management:** I don’t have to organize or maintain anything.\n-  **Accuracy:** I rarely end up on irrelevant pages.\n-  **Efficiency:** This method is fast, smart, and leverages my existing search skills.\n\nTraditional search engines have almost disappeared from my workflow. For research-heavy browsing, I use a different tool (which I’ll cover in a future post).\n\n---\n\nThat’s an overview of how I use \"searching\" and Raycast together to instantly redirect to any website.","src/data/posts/instantly-open-any-website-using-raycast.mdx",[760],"../../assets/posts/instantly-open-any-website-using-raycast.jpeg","7ac95b99f931b152","areas",["Map",764,765,775,776,786,787],"audio",{"id":764,"data":766,"filePath":768,"digest":769,"rendered":770},{"title":767},"Audio","src/data/areas/audio.md","51992c4c12e9c7f5",{"html":501,"metadata":771},{"headings":772,"imagePaths":773,"frontmatter":774},[],[],{"title":767,"slug":764},"keyboards",{"id":775,"data":777,"filePath":779,"digest":780,"rendered":781},{"title":778},"Keyboards","src/data/areas/keyboards.md","0f80a6b15207864b",{"html":501,"metadata":782},{"headings":783,"imagePaths":784,"frontmatter":785},[],[],{"title":778,"slug":775},"hardware",{"id":786,"data":788,"filePath":790,"digest":791,"rendered":792},{"title":789},"Hardware","src/data/areas/hardware.md","b3627f795fe1ac55",{"html":501,"metadata":793},{"headings":794,"imagePaths":795,"frontmatter":796},[],[],{"title":789,"slug":786},"projects",["Map",799,800,806,807,814,815],"sesh",{"id":799,"data":801,"filePath":804,"digest":805,"deferredRender":28},{"title":799,"description":802,"repo":803},"Smart session manager for the terminal","joshmedeski/sesh","src/data/projects/sesh.mdx","3abeec225c7f6d45","tmux-nerd-font-window-name-thumb",{"id":806,"data":808,"filePath":812,"digest":813,"deferredRender":28},{"title":809,"description":810,"repo":811,"image":574},"tmux-nerd-font-window-name","Nerd Font icons for your tmux windows","joshmedeski/tmux-nerd-font-window-name","src/data/projects/tmux-nerd-font-window-name-thumb.mdx","9ec1b80492a8c565","tmux-fzf-url",{"id":814,"data":816,"filePath":819,"digest":820,"deferredRender":28},{"title":814,"description":817,"repo":818},"Quickly open urls from your terminal screen.","joshmedeski/tmux-fzf-url","src/data/projects/tmux-fzf-url.mdx","766f3902c499e93f",["Map",822,823,146,832,839,840],"null-ls_246351_dev-workflow-intro",{"id":822,"data":824,"body":829,"filePath":830,"digest":831,"deferredRender":28},{"title":825,"description":826,"pubDate":827,"heroImage":828},"Dev Workflow Intro","Your guide to creating a powerful and intuitive development workflow in the terminal.",["Date","2023-07-14T15:00:00.000Z"],"/images/guides/dev-workflow-intro/dev-workflow-intro-hero-alt.png","import Cta from \"../../components/dev-workflow-intro-guide/Cta.astro\";\nimport Hero from \"../../components/dev-workflow-intro-guide/Hero.astro\";\nimport Lessons from \"../../components/dev-workflow-intro-guide/Lessons.astro\";\n\n\u003CHero />\n\u003CLessons guide=\"dev-workflow-intro\" />\n\u003CCta />","src/data/guides/.null-ls_246351_dev-workflow-intro.mdx","85b52bc43f54bcfb",{"id":146,"data":833,"body":836,"filePath":837,"digest":838,"deferredRender":28},{"title":825,"description":826,"pubDate":834,"heroImage":835},["Date","2023-07-14T15:00:00.000Z"],"../../assets/guides/dev-workflow-intro/dev-workflow-intro-hero-alt.png","import Cta from \"../../components/dev-workflow-intro-guide/Cta.astro\";\nimport Hero from \"../../components/dev-workflow-intro-guide/Hero.astro\";\nimport Lessons from \"../../components/dev-workflow-intro-guide/Lessons.astro\";\n\n\u003CHero overlapOnHeader={true} />\n\u003CLessons guide=\"dev-workflow-intro\" />\n\u003CCta />","src/data/guides/dev-workflow-intro.mdx","fd907411922e8229","null-ls_159647_dev-workflow-intro",{"id":839,"data":841,"body":829,"filePath":843,"digest":831,"deferredRender":28},{"title":825,"description":826,"pubDate":842,"heroImage":828},["Date","2023-07-14T15:00:00.000Z"],"src/data/guides/.null-ls_159647_dev-workflow-intro.mdx","uses",["Map",846,847,864,865,882,883,898,899,916,917,932,933,948,949,964,965,980,981,996,997,1012,1013,1028,1029,1043,1044,1059,1060,1075,1076],"airpods-max",{"id":846,"data":848,"body":853,"filePath":854,"assetImports":855,"digest":857,"rendered":858},{"title":849,"description":850,"area":851,"image":852},"AirPods Max","Apple's over-ear headphones with active noise cancellation and spatial audio.",{"id":764,"collection":762},"__ASTRO_IMAGE_../../assets/uses/airpods-max.jpeg","I love these lol","src/data/uses/airpods-max.md",[856],"../../assets/uses/airpods-max.jpeg","ae5c93cfaa9389a2",{"html":859,"metadata":860},"\u003Cp>I love these lol\u003C/p>",{"headings":861,"imagePaths":862,"frontmatter":863},[],[],{"title":849,"description":850,"area":764,"image":856},"grell-aoe",{"id":864,"data":866,"body":871,"filePath":872,"assetImports":873,"digest":875,"rendered":876},{"title":867,"description":868,"area":869,"image":870},"Grell AOE1","Open back headphones with a detachable cable.",{"id":764,"collection":762},"__ASTRO_IMAGE_../../assets/uses/drop-grell-aoe1-signature-headphones.jpeg","An overview of the product, including more images.","src/data/uses/grell-aoe.md",[874],"../../assets/uses/drop-grell-aoe1-signature-headphones.jpeg","008defc45dc87f16",{"html":877,"metadata":878},"\u003Cp>An overview of the product, including more images.\u003C/p>",{"headings":879,"imagePaths":880,"frontmatter":881},[],[],{"title":867,"description":868,"area":764,"image":874},"airpods",{"id":882,"data":884,"filePath":889,"assetImports":890,"digest":892,"rendered":893},{"title":885,"description":886,"area":887,"image":888},"AirPods","Apple's wireless earbuds.",{"id":764,"collection":762},"__ASTRO_IMAGE_../../assets/uses/airpods.jpeg","src/data/uses/airpods.md",[891],"../../assets/uses/airpods.jpeg","32a078cc5cd888ad",{"html":501,"metadata":894},{"headings":895,"imagePaths":896,"frontmatter":897},[],[],{"title":885,"description":886,"area":764,"image":891},"audio-engine-a2",{"id":898,"data":900,"body":905,"filePath":906,"assetImports":907,"digest":909,"rendered":910},{"title":901,"description":902,"area":903,"image":904},"Audio-Engine A2","A pair of powered bookshelf speakers with a built-in DAC.",{"id":764,"collection":762},"__ASTRO_IMAGE_../../assets/uses/audio-engine-a2-bookshelf.jpeg","The AudioEngine A2+ speakers pack a punch with their impressive sound quality. Despite their compact size, they deliver powerful, full-range audio that can fill a room. With built-in amplifiers and a precision-tuned design, these speakers offer clear highs, detailed mids, and rich bass that make them ideal for both casual listening and critical audio work. Whether you're streaming music, watching movies, or producing audio, the Audioengine A2+ provides an exceptional listening experience.","src/data/uses/audio-engine-a2.md",[908],"../../assets/uses/audio-engine-a2-bookshelf.jpeg","020c6fd7be37d43b",{"html":911,"metadata":912},"\u003Cp>The AudioEngine A2+ speakers pack a punch with their impressive sound quality. Despite their compact size, they deliver powerful, full-range audio that can fill a room. With built-in amplifiers and a precision-tuned design, these speakers offer clear highs, detailed mids, and rich bass that make them ideal for both casual listening and critical audio work. Whether you’re streaming music, watching movies, or producing audio, the Audioengine A2+ provides an exceptional listening experience.\u003C/p>",{"headings":913,"imagePaths":914,"frontmatter":915},[],[],{"title":901,"description":902,"area":764,"image":908},"iqunix-l80-cosmic-traveller",{"id":916,"data":918,"filePath":923,"assetImports":924,"digest":926,"rendered":927},{"title":919,"description":920,"area":921,"image":922},"iQunix L80 Cosmic Traveller","A 80% mechanical keyboard with a unique design.",{"id":775,"collection":762},"__ASTRO_IMAGE_../../assets/uses/iqunix-l80-cosmic-traveller.jpeg","src/data/uses/iqunix-l80-cosmic-traveller.md",[925],"../../assets/uses/iqunix-l80-cosmic-traveller.jpeg","f0cd8d60b083c16e",{"html":501,"metadata":928},{"headings":929,"imagePaths":930,"frontmatter":931},[],[],{"title":919,"description":920,"area":775,"image":925},"apple-mbp",{"id":932,"data":934,"filePath":939,"assetImports":940,"digest":942,"rendered":943},{"title":935,"description":936,"area":937,"image":938},"Apple MacBook Pro","2023 - 16-inch - Apple M2 Max - 32GB RAM",{"id":786,"collection":762},"__ASTRO_IMAGE_../../assets/uses/apple-mbp.jpeg","src/data/uses/apple-mbp.md",[941],"../../assets/uses/apple-mbp.jpeg","06129228f1511ebb",{"html":501,"metadata":944},{"headings":945,"imagePaths":946,"frontmatter":947},[],[],{"title":935,"description":936,"area":786,"image":941},"nuphy-air-75",{"id":948,"data":950,"filePath":955,"assetImports":956,"digest":958,"rendered":959},{"title":951,"description":952,"area":953,"image":954},"Nuphy Air 75","A 65% wireless mechanical keyboard.",{"id":775,"collection":762},"__ASTRO_IMAGE_../../assets/uses/nuphy-air-75.jpeg","src/data/uses/nuphy-air-75.md",[957],"../../assets/uses/nuphy-air-75.jpeg","c96d911b14dbb561",{"html":501,"metadata":960},{"headings":961,"imagePaths":962,"frontmatter":963},[],[],{"title":951,"description":952,"area":775,"image":957},"hd-6xx",{"id":964,"data":966,"filePath":971,"assetImports":972,"digest":974,"rendered":975},{"title":967,"description":968,"area":969,"image":970},"Senheiser HD 6XX","Over-ear headphones with open-back design and a detachable cable.",{"id":764,"collection":762},"__ASTRO_IMAGE_../../assets/uses/massdrop-x-sennheiser-hd-6xx-headphones.jpeg","src/data/uses/hd-6xx.md",[973],"../../assets/uses/massdrop-x-sennheiser-hd-6xx-headphones.jpeg","13aa5fb1f0e5efbf",{"html":501,"metadata":976},{"headings":977,"imagePaths":978,"frontmatter":979},[],[],{"title":967,"description":968,"area":764,"image":973},"kbdcraft-atom-kit",{"id":980,"data":982,"filePath":987,"assetImports":988,"digest":990,"rendered":991},{"title":983,"description":984,"area":985,"image":986},"KBDcraft Atom Kit","A keyboard made out of Lego bricks.",{"id":775,"collection":762},"__ASTRO_IMAGE_../../assets/uses/kbdcraft-atom-kit.jpeg","src/data/uses/kbdcraft-atom-kit.md",[989],"../../assets/uses/kbdcraft-atom-kit.jpeg","42aa8115e92c126b",{"html":501,"metadata":992},{"headings":993,"imagePaths":994,"frontmatter":995},[],[],{"title":983,"description":984,"area":775,"image":989},"o2-sdac",{"id":996,"data":998,"filePath":1003,"assetImports":1004,"digest":1006,"rendered":1007},{"title":999,"description":1000,"area":1001,"image":1002},"O2 + SDAC","A headphone amplifier and dac combo.",{"id":764,"collection":762},"__ASTRO_IMAGE_../../assets/uses/massdrop-02-sdac-dac-amp.jpeg","src/data/uses/o2-sdac.md",[1005],"../../assets/uses/massdrop-02-sdac-dac-amp.jpeg","4e2607c27b968b14",{"html":501,"metadata":1008},{"headings":1009,"imagePaths":1010,"frontmatter":1011},[],[],{"title":999,"description":1000,"area":764,"image":1005},"zsa-ergodox-ez",{"id":1012,"data":1014,"filePath":1019,"assetImports":1020,"digest":1022,"rendered":1023},{"title":1015,"description":1016,"area":1017,"image":1018},"ZSA ErgoDox EZ","A split ergonomic keyboard made by ZSA.",{"id":775,"collection":762},"__ASTRO_IMAGE_../../assets/uses/zsa-ergodox-ez.jpeg","src/data/uses/zsa-ergodox-ez.md",[1021],"../../assets/uses/zsa-ergodox-ez.jpeg","0448848f224b7df5",{"html":501,"metadata":1024},{"headings":1025,"imagePaths":1026,"frontmatter":1027},[],[],{"title":1015,"description":1016,"area":775,"image":1021},"zsa-moonlander",{"id":1028,"data":1030,"filePath":1034,"assetImports":1035,"digest":1037,"rendered":1038},{"title":1031,"description":1016,"area":1032,"image":1033},"ZSA Moonlander",{"id":775,"collection":762},"__ASTRO_IMAGE_../../assets/uses/zsa-moonlander.jpeg","src/data/uses/zsa-moonlander.md",[1036],"../../assets/uses/zsa-moonlander.jpeg","a34efb05f1e3b6e9",{"html":501,"metadata":1039},{"headings":1040,"imagePaths":1041,"frontmatter":1042},[],[],{"title":1031,"description":1016,"area":775,"image":1036},"at-lp120xusb",{"id":1043,"data":1045,"filePath":1050,"assetImports":1051,"digest":1053,"rendered":1054},{"title":1046,"description":1047,"area":1048,"image":1049},"AT-LP120XUSB","Direct-Drive Turntable (Analog & USB)",{"id":764,"collection":762},"__ASTRO_IMAGE_../../assets/uses/at-lp120xusb.jpeg","src/data/uses/at-lp120xusb.md",[1052],"../../assets/uses/at-lp120xusb.jpeg","072c96622bd315b2",{"html":501,"metadata":1055},{"headings":1056,"imagePaths":1057,"frontmatter":1058},[],[],{"title":1046,"description":1047,"area":764,"image":1052},"audio-engine-a2-sub",{"id":1059,"data":1061,"filePath":1066,"assetImports":1067,"digest":1069,"rendered":1070},{"title":1062,"description":1063,"area":1064,"image":1065},"Audio-Engine A2 Sub","Subwoofer for the A2+ speakers.",{"id":764,"collection":762},"__ASTRO_IMAGE_../../assets/uses/a2-sub.jpeg","src/data/uses/audio-engine-a2-sub.md",[1068],"../../assets/uses/a2-sub.jpeg","022ef1dc6921d897",{"html":501,"metadata":1071},{"headings":1072,"imagePaths":1073,"frontmatter":1074},[],[],{"title":1062,"description":1063,"area":764,"image":1068},"apple-studio-display",{"id":1075,"data":1077,"filePath":1082,"assetImports":1083,"digest":1085,"rendered":1086},{"title":1078,"description":1079,"area":1080,"image":1081},"Apple Studio Display","27-inch 5K Retina Display",{"id":786,"collection":762},"__ASTRO_IMAGE_../../assets/uses/apple-studio-display.jpeg","src/data/uses/apple-studio-display.md",[1084],"../../assets/uses/apple-studio-display.jpeg","349467179978adca",{"html":501,"metadata":1087},{"headings":1088,"imagePaths":1089,"frontmatter":1090},[],[],{"title":1078,"description":1079,"area":786,"image":1084},["Map",82,1092,51,1103,18,1114,287,1126,273,1137,113,1148],{"id":82,"data":1093,"filePath":1101,"digest":1102,"deferredRender":28},{"title":1094,"desc":1095,"style":1096},"Development","How I build web apps",{"container":1097,"title":1098,"desc":1099,"themeColor":1100},"bg-teal-950 shadow-teal-800","text-teal-200","text-teal-500","bg-teal-950","src/data/categories/development.mdx","bde33ddea112f8d9",{"id":51,"data":1104,"filePath":1112,"digest":1113,"deferredRender":28},{"title":1105,"desc":1106,"style":1107},"Conversations","Talking with friends",{"container":1108,"title":1109,"desc":1110,"themeColor":1111},"bg-yellow-950 shadow-yellow-800","text-yellow-200","text-yellow-50","bg-yellow-950","src/data/categories/conversations.mdx","aae670e91f35a1c2",{"id":18,"data":1115,"body":1123,"filePath":1124,"digest":1125,"deferredRender":28},{"title":1116,"desc":1117,"style":1118},"Dotfiles","My dev workflows",{"container":1119,"title":1120,"desc":1121,"themeColor":1122},"bg-dotfiles-950 shadow-dotfiles-800","text-dotfiles-200","text-dotfiles-50","bg-dotfiles-950","## Software\n\n- Terminal: [Alacritty](https://alacritty.org)\n- Font: [SFMono Nerd Font](https://github.com/epk/SF-Mono-Nerd-Font)\n- Colors: [catppuccin](https://github.com/catppuccin/catppuccin)\n- Shell: [fish](https://fishshell.com)\n- Multiplexer: [tmux](https://github.com/tmux/tmux/wiki)\n- Editor: [Neovim](https://neovim.io)\n- Git: [lazygit](https://github.com/jesseduffield/lazygit)\n- macOS package manager: [Homebrew](https://brew.sh)\n- npm package manager: [pnpm](https://pnpm.io/)\n\n## Hardware\n\n- Laptop: [MacBook Pro](https://www.apple.com/macbook-pro-14-and-16/) (16-inch, 2021, Apple M1 Pro Chip, 16GB RAM)\n- Keyboard: [Moonlander](https://www.zsa.io/moonlander/)\n- Mouse: Logitech trackball","src/data/categories/dotfiles.mdx","074c4d0ec6e11817",{"id":287,"data":1127,"filePath":1135,"digest":1136,"deferredRender":28},{"title":1128,"desc":1129,"style":1130},"Growth Mindset","Living with intention",{"container":1131,"title":1132,"desc":1133,"themeColor":1134},"bg-sky-950 shadow-sky-800","text-sky-200","text-sky-50","bg-sky-950","src/data/categories/personal-development.mdx","b78a48bf6671b008",{"id":273,"data":1138,"filePath":1146,"digest":1147,"deferredRender":28},{"title":1139,"desc":1140,"style":1141},"Tech","Gear and tools I use",{"container":1142,"title":1143,"desc":1144,"themeColor":1145},"bg-fuchsia-950 shadow-fuchsia-800","text-fuchsia-200","text-fuchsia-50","bg-fuchsia-950","src/data/categories/tech.mdx","5c53bc39ba8f08f4",{"id":113,"data":1149,"filePath":1157,"digest":1158,"deferredRender":28},{"title":1150,"desc":1151,"style":1152},"Productivity","How I get things done",{"container":1153,"title":1154,"desc":1155,"themeColor":1156},"bg-green-950 shadow-green-800","text-green-200","text-green-50","bg-green-950","src/data/categories/productivity.mdx","0ad929d1187d602d"]