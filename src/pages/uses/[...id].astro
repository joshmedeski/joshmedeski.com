---
import { getCollection, render } from 'astro:content'
import type { CollectionEntry } from 'astro:content'
import { Image } from 'astro:assets'
import GhRepo from '../../components/GhRepo.astro'
import Layout from '~/components/Layout.astro'
import Wrapper from '~/components/Wrapper.astro'
import UseCard from '~/components/uses/UseCard.astro'

export async function getStaticPaths() {
  const uses = await getCollection('uses')
  return uses.map((use) => {
    return {
      params: { id: use.id },
      props: { use },
    }
  })
}

interface Props {
  use: CollectionEntry<'uses'>
}

const { use } = Astro.props
const relatedUses = await getCollection(
  'uses',
  (relatedUse) =>
    relatedUse.data.area.id === use.data.area.id &&
    relatedUse.data.title !== use.data.title,
)
const { Content } = await render(use)
---

<Layout
  title={use.data.title}
  description={use.data.description}
  hideCta={false}
  image={use.data.image}
>
  <Wrapper>
    <a href="/uses" class="mb-2 block text-primary-500">← Back to all uses</a>
    <section class="grid grid-cols-2 gap-6">
      <Image
        src={use.data.image}
        alt={use.data.title}
        width="1640"
        height="1094"
        class="mb-2 w-full rounded-lg bg-black shadow-md md:mb-8"
        transition:name={`use-${use.data.title}-thumb`}
      />
      <div class="space-y-4">
        <h1 class="text-5xl font-bold">{use.data.title}</h1>
        <p>{use.data.description}</p>
        <Content components={{ GhRepo, Image }} />
      </div>
    </section>

    {relatedUses.length > 0 && (
      <footer class="mb-12">
        <h3 class="mb-4 text-4xl font-bold">Related {use.data.area.id}</h3>
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
          {relatedUses.map((use) => <UseCard use={use} />)}
        </div>
      </footer>
    )}
  </Wrapper>
</Layout>
